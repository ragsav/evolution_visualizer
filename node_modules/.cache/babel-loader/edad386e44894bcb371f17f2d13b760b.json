{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\experiments\\\\earth.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Vector } from \"./vector\";\nimport { Ball } from \"./ball\";\nimport { Wall } from \"./wall\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BALLZ = [];\nconst WALLZ = [];\nlet LEFT, UP, RIGHT, DOWN;\nlet friction = 0.1;\n\nfunction randInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst Earth = () => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const [ctx, setCtx] = useState(null);\n  useEffect(() => {\n    if (canvasRef && canvasRef.current) {\n      const canvas = document.getElementById(\"canvas\");\n      const ctx_2 = canvas.getContext(\"2d\");\n      canvasRef.current.focus();\n      setCtx(ctx_2);\n    }\n  }, [canvasRef]);\n  useEffect(() => {\n    if (ctx) {\n      for (let i = 0; i < 10; i++) {\n        let newBall = new Ball(randInt(100, 500), randInt(50, 400), 5, randInt(0, 10), BALLZ);\n        newBall.elasticity = randInt(0, 10) / 10;\n      }\n\n      BALLZ[0].player = true;\n      let edge1 = new Wall(0, 0, canvasRef.current.clientWidth, 0, WALLZ);\n      let edge2 = new Wall(canvasRef.current.clientWidth, 0, canvasRef.current.clientWidth, canvasRef.current.clientHeight, WALLZ);\n      let edge3 = new Wall(canvasRef.current.clientWidth, canvasRef.current.clientHeight, 0, canvasRef.current.clientHeight, WALLZ);\n      let edge4 = new Wall(0, canvasRef.current.clientHeight, 0, 0, WALLZ);\n      requestAnimationFrame(mainLoop);\n    }\n  }, [ctx]);\n\n  function keyControl(b) {\n    canvasRef.current.addEventListener(\"keydown\", function (e) {\n      if (e.keyCode === 37) {\n        LEFT = true;\n      }\n\n      if (e.keyCode === 38) {\n        UP = true;\n      }\n\n      if (e.keyCode === 39) {\n        RIGHT = true;\n      }\n\n      if (e.keyCode === 40) {\n        DOWN = true;\n      }\n    });\n    canvasRef.current.addEventListener(\"keyup\", function (e) {\n      if (e.keyCode === 37) {\n        LEFT = false;\n      }\n\n      if (e.keyCode === 38) {\n        UP = false;\n      }\n\n      if (e.keyCode === 39) {\n        RIGHT = false;\n      }\n\n      if (e.keyCode === 40) {\n        DOWN = false;\n      }\n    });\n\n    if (LEFT) {\n      b.acc.x = -b.acceleration;\n    }\n\n    if (UP) {\n      b.acc.y = -b.acceleration;\n    }\n\n    if (RIGHT) {\n      b.acc.x = b.acceleration;\n    }\n\n    if (DOWN) {\n      b.acc.y = b.acceleration;\n    }\n\n    if (!LEFT && !RIGHT) {\n      b.acc.x = 0;\n    }\n\n    if (!UP && !DOWN) {\n      b.acc.y = 0;\n    } // b.acc = b.acc.unit().mult(b.acceleration);\n    // b.vel = b.vel.add(b.acc);\n    // b.vel = b.vel.mult(1 - friction);\n    // b.pos = b.pos.add(b.vel);\n\n  }\n\n  function round(number, precision) {\n    let factor = 10 ** precision;\n    return Math.round(number * factor) / factor;\n  } //collision detection between two balls\n\n\n  function coll_det_bb(b1, b2) {\n    if (b1.r + b2.r >= b2.pos.subtr(b1.pos).mag()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function pen_res_bb(b1, b2) {\n    let dist = b1.pos.subtr(b2.pos);\n    let pen_depth = b1.r + b2.r - dist.mag(); //dividing the penetration depth in the ratio of the inverse masses\n\n    let pen_res = dist.unit().mult(pen_depth / (b1.inv_m + b2.inv_m));\n    b1.pos = b1.pos.add(pen_res.mult(b1.inv_m));\n    b2.pos = b2.pos.add(pen_res.mult(-b2.inv_m));\n  }\n\n  function coll_res_bb(b1, b2) {\n    let normal = b1.pos.subtr(b2.pos).unit();\n    let relVel = b1.vel.subtr(b2.vel);\n    let sepVel = Vector.dot(relVel, normal);\n    let new_sepVel = -sepVel * Math.min(b1.elasticity, b2.elasticity); //the difference between the new and the original sep.velocity value\n\n    let vsep_diff = new_sepVel - sepVel; //dividing the impulse value in the ration of the inverse masses\n    //and adding the impulse vector to the original vel. vectors\n    //according to their inverse mass\n\n    let impulse = vsep_diff / (b1.inv_m + b2.inv_m);\n    let impulseVec = normal.mult(impulse);\n    b1.vel = b1.vel.add(impulseVec.mult(b1.inv_m));\n    b2.vel = b2.vel.add(impulseVec.mult(-b2.inv_m));\n  }\n\n  function closestPointBW(b1, w1) {\n    let ballToWallStart = w1.start.subtr(b1.pos);\n\n    if (Vector.dot(w1.wallUnit(), ballToWallStart) > 0) {\n      return w1.start;\n    }\n\n    let wallEndToBall = b1.pos.subtr(w1.end);\n\n    if (Vector.dot(w1.wallUnit(), wallEndToBall) > 0) {\n      return w1.end;\n    }\n\n    let closestDist = Vector.dot(w1.wallUnit(), ballToWallStart);\n    let closestVect = w1.wallUnit().mult(closestDist);\n    return w1.start.subtr(closestVect);\n  }\n\n  function coll_det_bw(b1, w1) {\n    let ballToClosest = closestPointBW(b1, w1).subtr(b1.pos);\n\n    if (ballToClosest.mag() <= b1.r) {\n      return true;\n    }\n  }\n\n  function pen_res_bw(b1, w1) {\n    let penVect = b1.pos.subtr(closestPointBW(b1, w1));\n    b1.pos = b1.pos.add(penVect.unit().mult(b1.r - penVect.mag()));\n  }\n\n  function coll_res_bw(b1, w1) {\n    let normal = b1.pos.subtr(closestPointBW(b1, w1)).unit();\n    let sepVel = Vector.dot(b1.vel, normal);\n    let new_sepVel = -sepVel * b1.elasticity;\n    let vsep_diff = sepVel - new_sepVel;\n    b1.vel = b1.vel.add(normal.mult(-vsep_diff));\n  }\n\n  function mainLoop(timestamp) {\n    ctx.clearRect(0, 0, canvasRef.current.clientWidth, canvasRef.current.clientHeight);\n    BALLZ.forEach((b, index) => {\n      b.drawBall(ctx);\n\n      if (b.player) {\n        keyControl(b);\n      }\n\n      WALLZ.forEach(w => {\n        if (coll_det_bw(BALLZ[index], w)) {\n          pen_res_bw(BALLZ[index], w);\n          coll_res_bw(BALLZ[index], w);\n        }\n      }); //calls the collision detection for each ball pairs\n\n      for (let i = index + 1; i < BALLZ.length; i++) {\n        if (coll_det_bb(BALLZ[index], BALLZ[i])) {\n          pen_res_bb(BALLZ[index], BALLZ[i]);\n          coll_res_bb(BALLZ[index], BALLZ[i]);\n        }\n      }\n\n      b.display(ctx);\n      b.reposition(ctx);\n    });\n    requestAnimationFrame(mainLoop);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    tabIndex: 1,\n    id: \"canvas\",\n    ref: canvasRef,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    style: {\n      backgroundColor: \"#222222\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Earth, \"B7P/88+wLKaKs8yUCwOt0d/Ar0E=\");\n\n_c = Earth;\nexport default Earth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Earth\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/experiments/earth.js"],"names":["useEffect","useRef","useState","Vector","Ball","Wall","BALLZ","WALLZ","LEFT","UP","RIGHT","DOWN","friction","randInt","min","max","Math","floor","random","Earth","canvasRef","ctx","setCtx","current","canvas","document","getElementById","ctx_2","getContext","focus","i","newBall","elasticity","player","edge1","clientWidth","edge2","clientHeight","edge3","edge4","requestAnimationFrame","mainLoop","keyControl","b","addEventListener","e","keyCode","acc","x","acceleration","y","round","number","precision","factor","coll_det_bb","b1","b2","r","pos","subtr","mag","pen_res_bb","dist","pen_depth","pen_res","unit","mult","inv_m","add","coll_res_bb","normal","relVel","vel","sepVel","dot","new_sepVel","vsep_diff","impulse","impulseVec","closestPointBW","w1","ballToWallStart","start","wallUnit","wallEndToBall","end","closestDist","closestVect","coll_det_bw","ballToClosest","pen_res_bw","penVect","coll_res_bw","timestamp","clearRect","forEach","index","drawBall","w","length","display","reposition","window","innerWidth","innerHeight","backgroundColor"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { Vector } from \"./vector\";\r\nimport { Ball } from \"./ball\";\r\nimport { Wall } from \"./wall\";\r\nconst BALLZ = [];\r\nconst WALLZ = [];\r\n\r\nlet LEFT, UP, RIGHT, DOWN;\r\nlet friction = 0.1;\r\n\r\nfunction randInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst Earth = () => {\r\n  const canvasRef = useRef(null);\r\n  const [ctx, setCtx] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (canvasRef && canvasRef.current) {\r\n      const canvas = document.getElementById(\"canvas\");\r\n      const ctx_2 = canvas.getContext(\"2d\");\r\n      canvasRef.current.focus();\r\n      setCtx(ctx_2);\r\n    }\r\n  }, [canvasRef]);\r\n\r\n  useEffect(() => {\r\n    if (ctx) {\r\n      for (let i = 0; i < 10; i++) {\r\n        let newBall = new Ball(\r\n          randInt(100, 500),\r\n          randInt(50, 400),\r\n          5,\r\n          randInt(0, 10),\r\n          BALLZ\r\n        );\r\n        newBall.elasticity = randInt(0, 10) / 10;\r\n      }\r\n      BALLZ[0].player = true;\r\n      let edge1 = new Wall(0, 0, canvasRef.current.clientWidth, 0, WALLZ);\r\n      let edge2 = new Wall(\r\n        canvasRef.current.clientWidth,\r\n        0,\r\n        canvasRef.current.clientWidth,\r\n        canvasRef.current.clientHeight,\r\n        WALLZ\r\n      );\r\n      let edge3 = new Wall(\r\n        canvasRef.current.clientWidth,\r\n        canvasRef.current.clientHeight,\r\n        0,\r\n        canvasRef.current.clientHeight,\r\n        WALLZ\r\n      );\r\n      let edge4 = new Wall(0, canvasRef.current.clientHeight, 0, 0, WALLZ);\r\n      requestAnimationFrame(mainLoop);\r\n    }\r\n  }, [ctx]);\r\n\r\n  function keyControl(b) {\r\n    canvasRef.current.addEventListener(\"keydown\", function (e) {\r\n      if (e.keyCode === 37) {\r\n        LEFT = true;\r\n      }\r\n      if (e.keyCode === 38) {\r\n        UP = true;\r\n      }\r\n      if (e.keyCode === 39) {\r\n        RIGHT = true;\r\n      }\r\n      if (e.keyCode === 40) {\r\n        DOWN = true;\r\n      }\r\n    });\r\n\r\n    canvasRef.current.addEventListener(\"keyup\", function (e) {\r\n      if (e.keyCode === 37) {\r\n        LEFT = false;\r\n      }\r\n      if (e.keyCode === 38) {\r\n        UP = false;\r\n      }\r\n      if (e.keyCode === 39) {\r\n        RIGHT = false;\r\n      }\r\n      if (e.keyCode === 40) {\r\n        DOWN = false;\r\n      }\r\n    });\r\n\r\n    if (LEFT) {\r\n      b.acc.x = -b.acceleration;\r\n    }\r\n    if (UP) {\r\n      b.acc.y = -b.acceleration;\r\n    }\r\n    if (RIGHT) {\r\n      b.acc.x = b.acceleration;\r\n    }\r\n    if (DOWN) {\r\n      b.acc.y = b.acceleration;\r\n    }\r\n    if (!LEFT && !RIGHT) {\r\n      b.acc.x = 0;\r\n    }\r\n    if (!UP && !DOWN) {\r\n      b.acc.y = 0;\r\n    }\r\n\r\n    // b.acc = b.acc.unit().mult(b.acceleration);\r\n    // b.vel = b.vel.add(b.acc);\r\n    // b.vel = b.vel.mult(1 - friction);\r\n    // b.pos = b.pos.add(b.vel);\r\n  }\r\n\r\n  function round(number, precision) {\r\n    let factor = 10 ** precision;\r\n    return Math.round(number * factor) / factor;\r\n  }\r\n\r\n  //collision detection between two balls\r\n  function coll_det_bb(b1, b2) {\r\n    if (b1.r + b2.r >= b2.pos.subtr(b1.pos).mag()) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function pen_res_bb(b1, b2) {\r\n    let dist = b1.pos.subtr(b2.pos);\r\n    let pen_depth = b1.r + b2.r - dist.mag();\r\n    //dividing the penetration depth in the ratio of the inverse masses\r\n    let pen_res = dist.unit().mult(pen_depth / (b1.inv_m + b2.inv_m));\r\n    b1.pos = b1.pos.add(pen_res.mult(b1.inv_m));\r\n    b2.pos = b2.pos.add(pen_res.mult(-b2.inv_m));\r\n  }\r\n\r\n  function coll_res_bb(b1, b2) {\r\n    let normal = b1.pos.subtr(b2.pos).unit();\r\n    let relVel = b1.vel.subtr(b2.vel);\r\n    let sepVel = Vector.dot(relVel, normal);\r\n    let new_sepVel = -sepVel * Math.min(b1.elasticity, b2.elasticity);\r\n\r\n    //the difference between the new and the original sep.velocity value\r\n    let vsep_diff = new_sepVel - sepVel;\r\n\r\n    //dividing the impulse value in the ration of the inverse masses\r\n    //and adding the impulse vector to the original vel. vectors\r\n    //according to their inverse mass\r\n    let impulse = vsep_diff / (b1.inv_m + b2.inv_m);\r\n    let impulseVec = normal.mult(impulse);\r\n\r\n    b1.vel = b1.vel.add(impulseVec.mult(b1.inv_m));\r\n    b2.vel = b2.vel.add(impulseVec.mult(-b2.inv_m));\r\n  }\r\n\r\n  function closestPointBW(b1, w1) {\r\n    let ballToWallStart = w1.start.subtr(b1.pos);\r\n    if (Vector.dot(w1.wallUnit(), ballToWallStart) > 0) {\r\n      return w1.start;\r\n    }\r\n\r\n    let wallEndToBall = b1.pos.subtr(w1.end);\r\n    if (Vector.dot(w1.wallUnit(), wallEndToBall) > 0) {\r\n      return w1.end;\r\n    }\r\n\r\n    let closestDist = Vector.dot(w1.wallUnit(), ballToWallStart);\r\n    let closestVect = w1.wallUnit().mult(closestDist);\r\n    return w1.start.subtr(closestVect);\r\n  }\r\n\r\n  function coll_det_bw(b1, w1) {\r\n    let ballToClosest = closestPointBW(b1, w1).subtr(b1.pos);\r\n    if (ballToClosest.mag() <= b1.r) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function pen_res_bw(b1, w1) {\r\n    let penVect = b1.pos.subtr(closestPointBW(b1, w1));\r\n    b1.pos = b1.pos.add(penVect.unit().mult(b1.r - penVect.mag()));\r\n  }\r\n\r\n  function coll_res_bw(b1, w1) {\r\n    let normal = b1.pos.subtr(closestPointBW(b1, w1)).unit();\r\n    let sepVel = Vector.dot(b1.vel, normal);\r\n    let new_sepVel = -sepVel * b1.elasticity;\r\n    let vsep_diff = sepVel - new_sepVel;\r\n    b1.vel = b1.vel.add(normal.mult(-vsep_diff));\r\n  }\r\n\r\n  function mainLoop(timestamp) {\r\n    ctx.clearRect(\r\n      0,\r\n      0,\r\n      canvasRef.current.clientWidth,\r\n      canvasRef.current.clientHeight\r\n    );\r\n    BALLZ.forEach((b, index) => {\r\n      b.drawBall(ctx);\r\n      if (b.player) {\r\n        keyControl(b);\r\n      }\r\n\r\n      WALLZ.forEach((w) => {\r\n        if (coll_det_bw(BALLZ[index], w)) {\r\n          pen_res_bw(BALLZ[index], w);\r\n          coll_res_bw(BALLZ[index], w);\r\n        }\r\n      });\r\n\r\n      //calls the collision detection for each ball pairs\r\n      for (let i = index + 1; i < BALLZ.length; i++) {\r\n        if (coll_det_bb(BALLZ[index], BALLZ[i])) {\r\n          pen_res_bb(BALLZ[index], BALLZ[i]);\r\n          coll_res_bb(BALLZ[index], BALLZ[i]);\r\n        }\r\n      }\r\n      b.display(ctx);\r\n      b.reposition(ctx);\r\n    });\r\n\r\n    requestAnimationFrame(mainLoop);\r\n  }\r\n\r\n  return (\r\n    <canvas\r\n      tabIndex={1}\r\n      id=\"canvas\"\r\n      ref={canvasRef}\r\n      width={window.innerWidth}\r\n      height={window.innerHeight}\r\n      style={{ backgroundColor: \"#222222\" }}\r\n    ></canvas>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n"]},"metadata":{},"sourceType":"module"}