{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Screen = () => {\n  _s();\n\n  // const {ground} = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  const {\n    status\n  } = useGlobalState();\n  const {\n    setStatus\n  } = useGlobalActions();\n  const [creatures, setCreatures] = useState([]);\n  useEffect(() => {\n    if (status.localeCompare(\"playing\") === 0) {\n      console.log(creatures.length);\n\n      if (Math.random() > 0.7 / creatures.length * 20) {\n        var timeInterval = setInterval(() => {\n          const l = creatures.length;\n          const index = Math.random() * l;\n          const creaturesTemp = [...creatures];\n          creaturesTemp.splice(index, 1);\n          setCreatures([...creaturesTemp]);\n        }, 100);\n        return () => {\n          clearInterval(timeInterval);\n        };\n      }\n    }\n  }, [creatures, status]);\n\n  function addCreature(c) {\n    creatures.push(c);\n    setCreatures([...creatures]);\n  }\n\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n        demo.forEach((t, i) => {\n          const k = uuidv4();\n          creatures.push( /*#__PURE__*/_jsxDEV(Node, {\n            screenRef: screenRef,\n            uid: k,\n            setCreatures: setCreatures,\n            creatures: creatures,\n            bounds: {\n              l: screenRef.current.offsetLeft,\n              t: screenRef.current.offsetTop,\n              w: screenRef.current.clientWidth,\n              h: screenRef.current.clientHeight\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              id: `${k}+123`\n            }, `${k}+123`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 23\n            }, this)\n          }, k, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this));\n        });\n        setCreatures([...creatures]);\n      }\n    }\n  }, [screenRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"screen\",\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? creatures : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"CGqpMy1lX4GNypH36kDa3N2pk6E=\", false, function () {\n  return [useGlobalState, useGlobalActions];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","useGlobalActions","useGlobalState","Node","v4","uuidv4","demo","Array","from","keys","Screen","trueRef","setTrueRef","screenRef","status","setStatus","creatures","setCreatures","localeCompare","console","log","length","Math","random","timeInterval","setInterval","l","index","creaturesTemp","splice","clearInterval","addCreature","c","push","current","forEach","t","i","k","offsetLeft","offsetTop","w","clientWidth","h","clientHeight","height","width","backgroundColor"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,0BAAjD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAEA,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAL,CAAUE,IAAV,EAAX,CAAb;;AACA,MAAMC,MAAM,GAAG,MAAI;AAAA;;AAGf;AACA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBb,QAAQ,CAAC,IAAD,CAArC;AACA,QAAMc,SAAS,GAAGf,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM;AAACgB,IAAAA;AAAD,MAAWZ,cAAc,EAA/B;AACA,QAAM;AAACa,IAAAA;AAAD,MAAcd,gBAAgB,EAApC;AACA,QAAM,CAACe,SAAD,EAAWC,YAAX,IAA2BlB,QAAQ,CAAC,EAAD,CAAzC;AAWAF,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGiB,MAAM,CAACI,aAAP,CAAqB,SAArB,MAAkC,CAArC,EAAuC;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAS,CAACK,MAAtB;;AACA,UAAIC,IAAI,CAACC,MAAL,KAAiB,MAAMP,SAAS,CAACK,MAAjB,GAA2B,EAA/C,EAAmD;AACjD,YAAIG,YAAY,GAAGC,WAAW,CAAC,MAAM;AACnC,gBAAMC,CAAC,GAAGV,SAAS,CAACK,MAApB;AACA,gBAAMM,KAAK,GAAGL,IAAI,CAACC,MAAL,KAAgBG,CAA9B;AACA,gBAAME,aAAa,GAAG,CAAC,GAAGZ,SAAJ,CAAtB;AACAY,UAAAA,aAAa,CAACC,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACAV,UAAAA,YAAY,CAAC,CAAC,GAAGW,aAAJ,CAAD,CAAZ;AACD,SAN6B,EAM3B,GAN2B,CAA9B;AAOA,eAAO,MAAM;AACXE,UAAAA,aAAa,CAACN,YAAD,CAAb;AACD,SAFD;AAGD;AACJ;AAEJ,GAjBQ,EAiBP,CAACR,SAAD,EAAWF,MAAX,CAjBO,CAAT;;AAmBD,WAASiB,WAAT,CAAqBC,CAArB,EAAwB;AACtBhB,IAAAA,SAAS,CAACiB,IAAV,CAAeD,CAAf;AAEAf,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;AACD;;AAEAnB,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGgB,SAAH,EAAa;AACT,UAAGA,SAAS,CAACqB,OAAb,EAAqB;AACjBtB,QAAAA,UAAU,CAACC,SAAS,CAACqB,OAAX,CAAV;AACA5B,QAAAA,IAAI,CAAC6B,OAAL,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnB,gBAAMC,CAAC,GAAGjC,MAAM,EAAhB;AACFW,UAAAA,SAAS,CAACiB,IAAV,eACE,QAAC,IAAD;AACE,YAAA,SAAS,EAAEpB,SADb;AAEE,YAAA,GAAG,EAAEyB,CAFP;AAIE,YAAA,YAAY,EAAErB,YAJhB;AAKE,YAAA,SAAS,EAAED,SALb;AAME,YAAA,MAAM,EAAE;AACNU,cAAAA,CAAC,EAAEb,SAAS,CAACqB,OAAV,CAAkBK,UADf;AAENH,cAAAA,CAAC,EAAEvB,SAAS,CAACqB,OAAV,CAAkBM,SAFf;AAGNC,cAAAA,CAAC,EAAE5B,SAAS,CAACqB,OAAV,CAAkBQ,WAHf;AAINC,cAAAA,CAAC,EAAE9B,SAAS,CAACqB,OAAV,CAAkBU;AAJf,aANV;AAAA,mCAaE;AAAuB,cAAA,EAAE,EAAG,GAAEN,CAAE;AAAhC,eAAY,GAAEA,CAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAbF,aAGOA,CAHP;AAAA;AAAA;AAAA;AAAA,kBADF;AAiBD,SAnBD;AAoBArB,QAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;AACH;AACJ;AACJ,GA3BQ,EA2BP,CAACH,SAAD,CA3BO,CAAT;AAsCA,sBACE;AACA,IAAA,EAAE,EAAC,QADH;AAEE,IAAA,KAAK,EAAE;AAAEgC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KAFT;AAGE,IAAA,GAAG,EAAElC,SAHP;AAAA,cAMGF,OAAO,GAAGK,SAAH,GAAe;AANzB;AAAA;AAAA;AAAA;AAAA,UADF;AAUH,CA5FD;;GAAMN,M;UAMeR,c,EACGD,gB;;;KAPlBS,M;AA8FN,eAAeA,MAAf","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    const {status} = useGlobalState();\r\n    const {setStatus} = useGlobalActions();\r\n    const [creatures,setCreatures] = useState([])\r\n  \r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    useEffect(()=>{\r\n        if(status.localeCompare(\"playing\")===0){\r\n            console.log(creatures.length);\r\n            if (Math.random() > (0.7 / creatures.length) * 20) {\r\n              var timeInterval = setInterval(() => {\r\n                const l = creatures.length;\r\n                const index = Math.random() * l;\r\n                const creaturesTemp = [...creatures];\r\n                creaturesTemp.splice(index, 1);\r\n                setCreatures([...creaturesTemp]);\r\n              }, 100);\r\n              return () => {\r\n                clearInterval(timeInterval);\r\n              };\r\n            }\r\n        }\r\n        \r\n    },[creatures,status])\r\n\r\n   function addCreature(c) {\r\n     creatures.push(c);\r\n\r\n     setCreatures([...creatures]);\r\n   }\r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n                demo.forEach((t, i) => {\r\n                    const k = uuidv4();\r\n                  creatures.push(\r\n                    <Node\r\n                      screenRef={screenRef}\r\n                      uid={k}\r\n                      key={k}\r\n                      setCreatures={setCreatures}\r\n                      creatures={creatures}\r\n                      bounds={{\r\n                        l: screenRef.current.offsetLeft,\r\n                        t: screenRef.current.offsetTop,\r\n                        w: screenRef.current.clientWidth,\r\n                        h: screenRef.current.clientHeight,\r\n                      }}\r\n                    >\r\n                      <span key={`${k}+123`} id={`${k}+123`}></span>\r\n                    </Node>\r\n                  );\r\n                });\r\n                setCreatures([...creatures])\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n      id=\"screen\"\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        \r\n        {trueRef ? creatures : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}