{"version":3,"sources":["logo.svg","context/globalContext.js","components/node.js","components/screen.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStateContext","React","createContext","undefined","GlobalActionsContext","GlobalContextProvider","children","useState","status","setStatus","Provider","value","useGlobalState","context","useContext","Error","Node","props","bounds","nodeRef","useRef","x","Math","floor","random","w","y","h","position","setPosition","color","setColor","useEffect","localeCompare","timeInterval","setInterval","pos","skipX","skipY","plusMinusX","plusMinusY","newPosition","l","t","current","parentNode","childNodes","Object","keys","forEach","key","nodeName","abs","offsetLeft","offsetTop","firstChild","id","uid","creatures","k","uuidv4","push","screenRef","setCreatures","clearInterval","Card","ref","style","backgroundColor","height","width","top","left","borderRadius","size","border","transition","demo","Array","from","Screen","useGlobalActions","trueRef","setTrueRef","console","log","length","index","creaturesTemp","splice","i","clientWidth","clientHeight","Button","variant","padding","margin","zIndex","onClick","e","preventDefault","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5638ca36.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createRef, useEffect, useState ,useRef} from \"react\";\r\n\r\n\r\n\r\nconst GlobalStateContext = React.createContext(undefined);\r\nconst GlobalActionsContext = React.createContext(undefined);\r\n\r\n\r\n\r\nconst GlobalContextProvider = ({ children }) => {\r\n  \r\n\r\n  const [status,setStatus] = useState(\"Paused\")\r\n\r\n\r\n  return (\r\n    <GlobalStateContext.Provider\r\n      value={{\r\n        status\r\n      }}\r\n      \r\n    >\r\n      <GlobalActionsContext.Provider value={{ setStatus }}>\r\n        {children}\r\n      </GlobalActionsContext.Provider>\r\n    </GlobalStateContext.Provider>\r\n  );\r\n};\r\n\r\nconst useGlobalState = () => {\r\n  const context = React.useContext(GlobalStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      \"useGlobalState error\"\r\n    );\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nconst useGlobalActions = () => {\r\n  const context = React.useContext(GlobalActionsContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      \"useGlobalActions error\"\r\n    );\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\r\n","import { useEffect, useState ,useRef} from \"react\";\r\nimport ReactDom from \"react-dom\"\r\nimport React from \"react\"\r\nimport {Card} from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport \"./node.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nconst Node = (props)=>{\r\n\r\n    const bounds = props.bounds;\r\n    const size = 5;\r\n    \r\n    \r\n    const nodeRef = useRef(null);\r\n    const {status} = useGlobalState();\r\n    const [position, setPosition] = useState({\r\n      x: Math.floor(Math.random() * bounds.w),\r\n      y: Math.floor(Math.random() * bounds.h),\r\n    });\r\n    const [color,setColor] = useState(props.color?props.color:\"#5EFF00\")\r\n\r\n    \r\n    useEffect(()=>{\r\n        if(status.localeCompare(\"Playing\")===0){\r\n            var timeInterval = setInterval(() => {\r\n              const pos = [1, -1];\r\n              const skipX = Math.floor(Math.random() * 100);\r\n              const skipY = Math.floor(Math.random() *100);\r\n\r\n              const plusMinusX = Math.floor(Math.random() * 2);\r\n              const plusMinusY = Math.floor(Math.random() * 2);\r\n\r\n              const newPosition = {\r\n                x: position.x + pos[plusMinusX] * skipX,\r\n                y: position.y + pos[plusMinusY] * skipY,\r\n              };\r\n              if (newPosition.x > bounds.w + bounds.l) {\r\n                newPosition.x = bounds.w;\r\n              }\r\n              if (newPosition.y > bounds.h + bounds.t) {\r\n                newPosition.y = bounds.h;\r\n              }\r\n              if (newPosition.x < bounds.l) {\r\n                newPosition.x = bounds.l;\r\n              }\r\n              if (newPosition.y < bounds.t) {\r\n                newPosition.y = bounds.t;\r\n              }\r\n\r\n              setPosition({ ...newPosition });\r\n              setColor(\"#5EFF00\");\r\n              if (true) {\r\n                const children = nodeRef.current?.parentNode?.childNodes;\r\n                if (children) {\r\n                  Object.keys(children).forEach((key) => {\r\n                    if (\r\n                      children[key]?.nodeName === \"DIV\" &&\r\n                      Math.abs(\r\n                        children[key].offsetLeft - nodeRef.current.offsetLeft\r\n                      ) < 10 &&\r\n                      Math.abs(\r\n                        children[key].offsetTop - nodeRef.current.offsetTop\r\n                      ) < 10 &&\r\n                      children[key].firstChild.id.localeCompare(\r\n                        `${props.uid}+123`\r\n                      ) !== 0\r\n                    ) {\r\n                      if (Math.random() > 0.6) {\r\n                        const creatures = props.creatures;\r\n                        const k = uuidv4();\r\n                        creatures.push(\r\n                          <Node\r\n                            uid={k}\r\n                            key={k}\r\n                            color=\"#FF0000\"\r\n                            screenRef={props.screenRef}\r\n                            setCreatures={props.setCreatures}\r\n                            creatures={creatures}\r\n                            bounds={bounds}\r\n                          >\r\n                            <span key={`${k}+123`} id={`${k}+123`}></span>\r\n                          </Node>\r\n                        );\r\n                        props.setCreatures([...creatures]);\r\n                      }\r\n\r\n                      //do mating here\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            },Math.random()*5000);\r\n            return () => {\r\n              clearInterval(timeInterval);\r\n            };\r\n        }\r\n        \r\n        \r\n    },[position,status])\r\n\r\n    useEffect(()=>{\r\n        if(nodeRef&&nodeRef.current){\r\n            \r\n        }\r\n    },[nodeRef])\r\n\r\n    \r\n    return (\r\n      <Card\r\n        ref={nodeRef}\r\n        style={{\r\n          backgroundColor: color,\r\n          height: size,\r\n          width: size,\r\n          top: position.y,\r\n          left: position.x,\r\n          position: \"absolute\",\r\n          borderRadius: size / 2,\r\n          border: \"none\",\r\n          transition: \"all 1s ease-in-out\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default Node;","import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const { setStatus } = useGlobalActions();\r\n    const { status } = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n    const [creatures,setCreatures] = useState([])\r\n  \r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    useEffect(()=>{\r\n        console.log(creatures.length)\r\n        if (\r\n          status.localeCompare(\"Playing\") === 0 &&\r\n          Math.random() > (0.7 )\r\n        ) {\r\n          const l = creatures.length;\r\n          const index = Math.random() * l;\r\n          const creaturesTemp = [...creatures];\r\n          creaturesTemp.splice(index, 1);\r\n          setCreatures([...creaturesTemp]);\r\n        }\r\n        \r\n    },[creatures])\r\n\r\n   \r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n                demo.forEach((t, i) => {\r\n                    const k = uuidv4();\r\n                  creatures.push(\r\n                    <Node\r\n                      screenRef={screenRef}\r\n                      uid={k}\r\n                      key={k}\r\n                      setCreatures={setCreatures}\r\n                      creatures={creatures}\r\n                      bounds={{\r\n                        l: screenRef.current.offsetLeft,\r\n                        t: screenRef.current.offsetTop,\r\n                        w: screenRef.current.clientWidth,\r\n                        h: screenRef.current.clientHeight,\r\n                      }}\r\n                    >\r\n                      <span key={`${k}+123`} id={`${k}+123`}></span>\r\n                    </Node>\r\n                  );\r\n                });\r\n                setCreatures([...creatures])\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        id=\"screen\"\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        <Button\r\n        variant = \"outline-light\"\r\n          style={{\r\n            padding: 4,\r\n            margin: 0,\r\n            top: 5,\r\n            left: 5,\r\n            position: \"absolute\",\r\n            borderRadius:0,\r\n            zIndex:10\r\n          }}\r\n          onClick = {(e)=>{e.preventDefault();\r\n            status.localeCompare(\"Playing\")===0?setStatus(\"Paused\"):setStatus(\"Playing\")}}\r\n        >\r\n          {status}\r\n        </Button>\r\n        {trueRef ? creatures : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;","import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Screen from './components/screen';\r\nimport { GlobalContextProvider } from './context/globalContext';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalContextProvider>\r\n        <Screen></Screen>\r\n      </GlobalContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}