{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Screen = () => {\n  _s();\n\n  const {\n    creatures,\n    creatureRef\n  } = useGlobalState();\n  const {\n    setCreatures\n  } = useGlobalActions();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  const nodeRef = creatures.map(() => /*#__PURE__*/createRef());\n  const cre = Array(100).fill({});\n  useEffect(() => {\n    nodeRef.forEach((ref, index) => {\n      var _ref$current;\n\n      const handler = e => {\n        if (e === null || e === void 0 ? void 0 : e.detail) {\n          const newC1 = e.detail;\n          cre[index] = newC1;\n        }\n      };\n\n      ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addEventListener(\"position\", handler);\n      return () => {\n        var _ref$current2;\n\n        return ref === null || ref === void 0 ? void 0 : (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.removeEventListener(\"position\", handler);\n      };\n    });\n    console.log(cre);\n  }, [nodeRef]);\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n      }\n    }\n  }, [screenRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? creatures.map((m, index) => {\n      return /*#__PURE__*/_jsxDEV(Node, {\n        id: index,\n        childRef: nodeRef[index],\n        bounds: {\n          l: screenRef.current.offsetLeft,\n          t: screenRef.current.offsetTop,\n          w: screenRef.current.clientWidth,\n          h: screenRef.current.clientHeight\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: nodeRef[index],\n          id: index\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 19\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"dQMci0DqF3iG8UxtwS7S+9kg5+g=\", false, function () {\n  return [useGlobalState, useGlobalActions];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","useGlobalActions","useGlobalState","Node","Screen","creatures","creatureRef","setCreatures","trueRef","setTrueRef","screenRef","nodeRef","map","cre","Array","fill","forEach","ref","index","handler","e","detail","newC1","current","addEventListener","removeEventListener","console","log","height","width","backgroundColor","m","l","offsetLeft","t","offsetTop","w","clientWidth","h","clientHeight"],"mappings":"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","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\n\r\nconst Screen = ()=>{\r\n\r\n    \r\n    const {creatures,creatureRef} = useGlobalState();\r\n    const {setCreatures} = useGlobalActions();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    const nodeRef = creatures.map(()=>createRef());\r\n\r\n    const cre = Array(100).fill({});\r\n    useEffect(()=>{\r\n        nodeRef.forEach((ref,index)=>{\r\n            const handler = (e) => {\r\n              if (e?.detail) {\r\n                const newC1 = e.detail;\r\n                cre[index] = newC1;\r\n              }\r\n            };\r\n            ref?.current?.addEventListener(\"position\", handler);\r\n            return () =>\r\n              ref?.current?.removeEventListener(\"position\", handler);\r\n        })\r\n        console.log(cre)\r\n    },[nodeRef])\r\n\r\n    \r\n    \r\n\r\n   \r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {trueRef\r\n          ? creatures.map((m,index) => {\r\n              return (\r\n                <Node\r\n                    key ={index}\r\n                    id={index}\r\n                    childRef = {nodeRef[index]}\r\n                  bounds={{\r\n                    l: screenRef.current.offsetLeft,\r\n                    t: screenRef.current.offsetTop,\r\n                    w: screenRef.current.clientWidth,\r\n                    h: screenRef.current.clientHeight,\r\n                  }}\r\n                >\r\n                  <span key={index} ref = {nodeRef[index]} id={index}></span>\r\n                </Node>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}