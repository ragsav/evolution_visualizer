{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Screen = () => {\n  _s();\n\n  // const {ground} = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  const [creatures, setCreatures] = useState([]);\n  useEffect(() => {\n    console.log(creatures.length);\n  }, [creatures]);\n\n  function addCreature(c) {\n    creatures.push(c);\n    setCreatures([...creatures]);\n  }\n\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n        demo.forEach((t, i) => {\n          const k = uuidv4();\n          creatures.push( /*#__PURE__*/_jsxDEV(Node, {\n            screenRef: screenRef,\n            uid: k,\n            setCreatures: setCreatures,\n            creatures: creatures,\n            bounds: {\n              l: screenRef.current.offsetLeft,\n              t: screenRef.current.offsetTop,\n              w: screenRef.current.clientWidth,\n              h: screenRef.current.clientHeight\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              id: `${k}+123`\n            }, `${k}+123`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 23\n            }, this)\n          }, k, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this));\n        });\n        setCreatures([...creatures]);\n      }\n    }\n  }, [screenRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"screen\",\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? creatures : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"SoNO5Dxu6rlnaKvkWcifohniH5s=\");\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","useGlobalActions","useGlobalState","Node","v4","uuidv4","demo","Array","from","keys","Screen","trueRef","setTrueRef","screenRef","creatures","setCreatures","console","log","length","addCreature","c","push","current","forEach","t","i","k","l","offsetLeft","offsetTop","w","clientWidth","h","clientHeight","height","width","backgroundColor"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,0BAAjD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAEA,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAL,CAAUE,IAAV,EAAX,CAAb;;AACA,MAAMC,MAAM,GAAG,MAAI;AAAA;;AAGf;AACA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBb,QAAQ,CAAC,IAAD,CAArC;AACA,QAAMc,SAAS,GAAGf,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAM,CAACgB,SAAD,EAAWC,YAAX,IAA2BhB,QAAQ,CAAC,EAAD,CAAzC;AAWAF,EAAAA,SAAS,CAAC,MAAI;AACVmB,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAS,CAACI,MAAtB;AACH,GAFQ,EAEP,CAACJ,SAAD,CAFO,CAAT;;AAID,WAASK,WAAT,CAAqBC,CAArB,EAAwB;AACtBN,IAAAA,SAAS,CAACO,IAAV,CAAeD,CAAf;AACAL,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;AACD;;AAEAjB,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGgB,SAAH,EAAa;AACT,UAAGA,SAAS,CAACS,OAAb,EAAqB;AACjBV,QAAAA,UAAU,CAACC,SAAS,CAACS,OAAX,CAAV;AACAhB,QAAAA,IAAI,CAACiB,OAAL,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnB,gBAAMC,CAAC,GAAGrB,MAAM,EAAhB;AACFS,UAAAA,SAAS,CAACO,IAAV,eACE,QAAC,IAAD;AACE,YAAA,SAAS,EAAER,SADb;AAEE,YAAA,GAAG,EAAEa,CAFP;AAIE,YAAA,YAAY,EAAEX,YAJhB;AAKE,YAAA,SAAS,EAAED,SALb;AAME,YAAA,MAAM,EAAE;AACNa,cAAAA,CAAC,EAAEd,SAAS,CAACS,OAAV,CAAkBM,UADf;AAENJ,cAAAA,CAAC,EAAEX,SAAS,CAACS,OAAV,CAAkBO,SAFf;AAGNC,cAAAA,CAAC,EAAEjB,SAAS,CAACS,OAAV,CAAkBS,WAHf;AAINC,cAAAA,CAAC,EAAEnB,SAAS,CAACS,OAAV,CAAkBW;AAJf,aANV;AAAA,mCAaE;AAAuB,cAAA,EAAE,EAAG,GAAEP,CAAE;AAAhC,eAAY,GAAEA,CAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAbF,aAGOA,CAHP;AAAA;AAAA;AAAA;AAAA,kBADF;AAiBD,SAnBD;AAoBAX,QAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;AACH;AACJ;AACJ,GA3BQ,EA2BP,CAACD,SAAD,CA3BO,CAAT;AAsCA,sBACE;AACA,IAAA,EAAE,EAAC,QADH;AAEE,IAAA,KAAK,EAAE;AAAEqB,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KAFT;AAGE,IAAA,GAAG,EAAEvB,SAHP;AAAA,cAKGF,OAAO,GAAGG,SAAH,GAAe;AALzB;AAAA;AAAA;AAAA;AAAA,UADF;AASH,CA1ED;;GAAMJ,M;;KAAAA,M;AA4EN,eAAeA,MAAf","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n    const [creatures,setCreatures] = useState([])\r\n  \r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    useEffect(()=>{\r\n        console.log(creatures.length)\r\n    },[creatures])\r\n\r\n   function addCreature(c) {\r\n     creatures.push(c);\r\n     setCreatures([...creatures]);\r\n   }\r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n                demo.forEach((t, i) => {\r\n                    const k = uuidv4();\r\n                  creatures.push(\r\n                    <Node\r\n                      screenRef={screenRef}\r\n                      uid={k}\r\n                      key={k}\r\n                      setCreatures={setCreatures}\r\n                      creatures={creatures}\r\n                      bounds={{\r\n                        l: screenRef.current.offsetLeft,\r\n                        t: screenRef.current.offsetTop,\r\n                        w: screenRef.current.clientWidth,\r\n                        h: screenRef.current.clientHeight,\r\n                      }}\r\n                    >\r\n                      <span key={`${k}+123`} id={`${k}+123`}></span>\r\n                    </Node>\r\n                  );\r\n                });\r\n                setCreatures([...creatures])\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n      id=\"screen\"\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {trueRef ? creatures : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}