{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\naruto\\\\src\\\\components\\\\home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport \"./home.css\";\nimport ReactTooltip from \"react-tooltip\"; // This is a simplified example of an org chart with a depth of 2.\n// Note how deeper levels are defined recursively via the `children` property.\n\nimport treeData from \"./data/tree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OrgChartTree() {\n  _s();\n\n  const treeRef = useRef(null);\n  const [translation, setTranslation] = useState({\n    x: 0,\n    y: 0\n  });\n  const [depth, setDepth] = useState(0);\n  const [scaleExtent, setScaleExtent] = useState({\n    min: 0.1,\n    max: 1\n  });\n  useEffect(() => {\n    // console.log(treeRef);\n    setTranslation({\n      y: Math.floor(treeRef.current.clientHeight / 2),\n      x: Math.floor(treeRef.current.clientWidth / 2)\n    });\n  }, [treeRef]);\n  useEffect(() => {\n    console.log(depth);\n\n    if (depth > 0) {\n      var temp_y = translation.y;\n      temp_y = Math.floor(temp_y - temp_y / 7);\n      setTranslation({\n        x: translation.x,\n        y: temp_y\n      });\n      var temp_max = scaleExtent.max;\n      temp_max = temp_max - 0.08;\n      setScaleExtent({\n        min: scaleExtent.min,\n        max: temp_max\n      });\n    }\n  }, [depth]);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(\"div\", {\n      id: \"treeWrapper\",\n      ref: treeRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"black\",\n        top: \"50%\",\n        left: \"50%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        data: treeData,\n        renderCustomNodeElement: () => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              \"data-tip\": \"React-tooltip\",\n              children: \" \\u25D5\\u203F\\u203F\\u25D5 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n              place: \"top\",\n              type: \"dark\",\n              effect: \"float\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this);\n        },\n        enableLegacyTransitions: true,\n        orientation: \"vertical\",\n        transitionDuration: 500,\n        rootNodeClassName: \"node__root\",\n        branchNodeClassName: \"node__branch\",\n        leafNodeClassName: \"node__leaf\",\n        initialDepth: 0,\n        translate: translation,\n        collapsible: true,\n        zoomable: true,\n        zoom: 3,\n        scaleExtent: scaleExtent,\n        separation: {\n          siblings: 1,\n          nonSiblings: 1\n        },\n        shouldCollapseNeighborNodes: false,\n        onNodeClick: (...args) => {\n          console.log(args);\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\n        },\n        onNodeMouseOver: (...args) => {\n          console.log(\"onNodeMouseOver\", args);\n        },\n        onNodeMouseOut: (...args) => {\n          console.log(\"onNodeMouseOut\", args);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(OrgChartTree, \"YT1Ews/ko6fwf0BMxPDWGgyevTM=\");\n\n_c = OrgChartTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrgChartTree\");","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","useRef","useEffect","useState","Tree","ReactTooltip","treeData","OrgChartTree","treeRef","translation","setTranslation","x","y","depth","setDepth","scaleExtent","setScaleExtent","min","max","Math","floor","current","clientHeight","clientWidth","console","log","temp_y","temp_max","width","height","backgroundColor","top","left","siblings","nonSiblings","args","__rd3t"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport \"./home.css\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n// This is a simplified example of an org chart with a depth of 2.\r\n// Note how deeper levels are defined recursively via the `children` property.\r\nimport treeData from \"./data/tree\";\r\n\r\nexport default function OrgChartTree() {\r\n  const treeRef = useRef(null);\r\n  const [translation, setTranslation] = useState({ x: 0, y: 0 });\r\n  const [depth, setDepth] = useState(0);\r\n  const [scaleExtent, setScaleExtent] = useState({ min: 0.1, max: 1 });\r\n  useEffect(() => {\r\n    // console.log(treeRef);\r\n    setTranslation({\r\n      y: Math.floor(treeRef.current.clientHeight / 2),\r\n      x: Math.floor(treeRef.current.clientWidth / 2),\r\n    });\r\n  }, [treeRef]);\r\n\r\n  useEffect(() => {\r\n    console.log(depth);\r\n    if (depth > 0) {\r\n      var temp_y = translation.y;\r\n      temp_y = Math.floor(temp_y - temp_y / 7);\r\n      setTranslation({ x: translation.x, y: temp_y });\r\n\r\n      var temp_max = scaleExtent.max;\r\n      temp_max = temp_max - 0.08;\r\n      setScaleExtent({ min: scaleExtent.min, max: temp_max });\r\n    }\r\n  }, [depth]);\r\n  return (\r\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n    <div\r\n      id=\"treeWrapper\"\r\n      ref={treeRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        backgroundColor: \"black\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n      }}\r\n    >\r\n      <Tree\r\n        data={treeData}\r\n        renderCustomNodeElement={() => {\r\n          return (\r\n            <div>\r\n              <a data-tip=\"React-tooltip\"> ◕‿‿◕ </a>\r\n\r\n              <ReactTooltip place=\"top\" type=\"dark\" effect=\"float\" />\r\n            </div>\r\n          );\r\n        }}\r\n        enableLegacyTransitions={true}\r\n        orientation=\"vertical\"\r\n        transitionDuration={500}\r\n        rootNodeClassName=\"node__root\"\r\n        branchNodeClassName=\"node__branch\"\r\n        leafNodeClassName=\"node__leaf\"\r\n        initialDepth={0}\r\n        translate={translation}\r\n        collapsible={true}\r\n        zoomable={true}\r\n        zoom={3}\r\n        scaleExtent={scaleExtent}\r\n        separation={{ siblings: 1, nonSiblings: 1 }}\r\n        shouldCollapseNeighborNodes={false}\r\n        onNodeClick={(...args) => {\r\n          console.log(args);\r\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\r\n        }}\r\n        onNodeMouseOver={(...args) => {\r\n          console.log(\"onNodeMouseOver\", args);\r\n        }}\r\n        onNodeMouseOut={(...args) => {\r\n          console.log(\"onNodeMouseOut\", args);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}