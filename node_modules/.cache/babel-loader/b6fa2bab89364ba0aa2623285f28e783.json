{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\naruto\\\\src\\\\components\\\\home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport { Group } from \"@visx/group\";\nimport { Tree, hierarchy } from \"@visx/hierarchy\";\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\nimport { LinkHorizontal } from \"@visx/shape\";\nimport { LinearGradient } from \"@visx/gradient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst peach = \"#fd9b93\";\nconst pink = \"#fe6e9e\";\nconst blue = \"#03c0dc\";\nconst green = \"#26deb0\";\nconst plum = \"#71248e\";\nconst lightpurple = \"#374469\";\nconst white = \"#ffffff\";\nexport const background = \"#272b4d\"; // interface TreeNode {\n//   name: string;\n//   children?: this[];\n// }\n// type HierarchyNode = HierarchyPointNode<TreeNode>;\n\nconst rawTree = {\n  name: \"T\",\n  children: [{\n    name: \"A\",\n    children: [{\n      name: \"A1\"\n    }, {\n      name: \"A2\"\n    }, {\n      name: \"A3\"\n    }, {\n      name: \"C\",\n      children: [{\n        name: \"C1\"\n      }, {\n        name: \"D\",\n        children: [{\n          name: \"D1\"\n        }, {\n          name: \"D2\"\n        }, {\n          name: \"D3\"\n        }]\n      }]\n    }]\n  }, {\n    name: \"Z\"\n  }, {\n    name: \"B\",\n    children: [{\n      name: \"B1\"\n    }, {\n      name: \"B2\"\n    }, {\n      name: \"B3\"\n    }]\n  }]\n};\n/** Handles rendering Root, Parent, and other Nodes. */\n\nfunction Node({\n  node\n}) {\n  const width = 40;\n  const height = 20;\n  const centerX = -width / 2;\n  const centerY = -height / 2;\n  const isRoot = node.depth === 0;\n  const isParent = !!node.children;\n  if (isRoot) return /*#__PURE__*/_jsxDEV(RootNode, {\n    node: node\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 22\n  }, this);\n  if (isParent) return /*#__PURE__*/_jsxDEV(ParentNode, {\n    node: node\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Group, {\n    top: node.x,\n    left: node.y,\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      height: height,\n      width: width,\n      y: centerY,\n      x: centerX,\n      fill: background,\n      stroke: green,\n      strokeWidth: 1,\n      strokeDasharray: \"2,2\",\n      strokeOpacity: 0.6,\n      rx: 10,\n      onClick: () => {\n        alert(`clicked: ${JSON.stringify(node.data.name)}`);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      dy: \".33em\",\n      fontSize: 9,\n      fontFamily: \"Arial\",\n      textAnchor: \"middle\",\n      fill: green,\n      style: {\n        pointerEvents: \"none\"\n      },\n      children: node.data.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Node;\n\nfunction RootNode({\n  node\n}) {\n  return /*#__PURE__*/_jsxDEV(Group, {\n    top: node.x,\n    left: node.y,\n    children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n      r: 12,\n      fill: \"url('#lg')\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      dy: \".33em\",\n      fontSize: 9,\n      fontFamily: \"Arial\",\n      textAnchor: \"middle\",\n      style: {\n        pointerEvents: \"none\"\n      },\n      fill: plum,\n      children: node.data.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = RootNode;\n\nfunction ParentNode({\n  node\n}) {\n  const width = 40;\n  const height = 20;\n  const centerX = -width / 2;\n  const centerY = -height / 2;\n  return /*#__PURE__*/_jsxDEV(Group, {\n    top: node.x,\n    left: node.y,\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      height: height,\n      width: width,\n      y: centerY,\n      x: centerX,\n      fill: background,\n      stroke: blue,\n      strokeWidth: 1,\n      onClick: () => {\n        alert(`clicked: ${JSON.stringify(node.data.name)}`);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      dy: \".33em\",\n      fontSize: 9,\n      fontFamily: \"Arial\",\n      textAnchor: \"middle\",\n      style: {\n        pointerEvents: \"none\"\n      },\n      fill: white,\n      children: node.data.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = ParentNode;\nconst defaultMargin = {\n  top: 10,\n  left: 80,\n  right: 80,\n  bottom: 10\n}; // export type TreeProps = {\n//   width: number;\n//   height: number;\n//   margin?: { top: number; right: number; bottom: number; left: number };\n// };\n\nexport default function FamilyTree({\n  width = 1000,\n  height = 800,\n  margin = defaultMargin\n}) {\n  _s();\n\n  const data = useMemo(() => hierarchy(rawTree), []);\n  const yMax = height - margin.top - margin.bottom;\n  const xMax = width - margin.left - margin.right;\n  return width < 10 ? null : /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: [/*#__PURE__*/_jsxDEV(LinearGradient, {\n      id: \"lg\",\n      from: peach,\n      to: pink\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n      width: width,\n      height: height,\n      rx: 14,\n      fill: background\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tree, {\n      root: data,\n      size: [yMax, xMax],\n      children: tree => /*#__PURE__*/_jsxDEV(Group, {\n        top: margin.top,\n        left: margin.left,\n        children: [tree.links().map((link, i) => /*#__PURE__*/_jsxDEV(LinkHorizontal, {\n          data: link,\n          stroke: lightpurple,\n          strokeWidth: \"1\",\n          fill: \"none\"\n        }, `link-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this)), tree.descendants().map((node, i) => /*#__PURE__*/_jsxDEV(Node, {\n          node: node\n        }, `node-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FamilyTree, \"jwuu1hJIzb+z9O8CErpZ1XdXNoc=\");\n\n_c4 = FamilyTree;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Node\");\n$RefreshReg$(_c2, \"RootNode\");\n$RefreshReg$(_c3, \"ParentNode\");\n$RefreshReg$(_c4, \"FamilyTree\");","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","useMemo","Group","Tree","hierarchy","HierarchyPointNode","LinkHorizontal","LinearGradient","peach","pink","blue","green","plum","lightpurple","white","background","rawTree","name","children","Node","node","width","height","centerX","centerY","isRoot","depth","isParent","x","y","alert","JSON","stringify","data","pointerEvents","RootNode","ParentNode","defaultMargin","top","left","right","bottom","FamilyTree","margin","yMax","xMax","tree","links","map","link","i","descendants"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { Group } from \"@visx/group\";\r\nimport { Tree, hierarchy } from \"@visx/hierarchy\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport { LinkHorizontal } from \"@visx/shape\";\r\nimport { LinearGradient } from \"@visx/gradient\";\r\n\r\nconst peach = \"#fd9b93\";\r\nconst pink = \"#fe6e9e\";\r\nconst blue = \"#03c0dc\";\r\nconst green = \"#26deb0\";\r\nconst plum = \"#71248e\";\r\nconst lightpurple = \"#374469\";\r\nconst white = \"#ffffff\";\r\nexport const background = \"#272b4d\";\r\n\r\n// interface TreeNode {\r\n//   name: string;\r\n//   children?: this[];\r\n// }\r\n\r\n// type HierarchyNode = HierarchyPointNode<TreeNode>;\r\n\r\nconst rawTree = {\r\n  name: \"T\",\r\n  children: [\r\n    {\r\n      name: \"A\",\r\n      children: [\r\n        { name: \"A1\" },\r\n        { name: \"A2\" },\r\n        { name: \"A3\" },\r\n        {\r\n          name: \"C\",\r\n          children: [\r\n            {\r\n              name: \"C1\",\r\n            },\r\n            {\r\n              name: \"D\",\r\n              children: [\r\n                {\r\n                  name: \"D1\",\r\n                },\r\n                {\r\n                  name: \"D2\",\r\n                },\r\n                {\r\n                  name: \"D3\",\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    { name: \"Z\" },\r\n    {\r\n      name: \"B\",\r\n      children: [{ name: \"B1\" }, { name: \"B2\" }, { name: \"B3\" }],\r\n    },\r\n  ],\r\n};\r\n\r\n/** Handles rendering Root, Parent, and other Nodes. */\r\nfunction Node({ node }) {\r\n  const width = 40;\r\n  const height = 20;\r\n  const centerX = -width / 2;\r\n  const centerY = -height / 2;\r\n  const isRoot = node.depth === 0;\r\n  const isParent = !!node.children;\r\n\r\n  if (isRoot) return <RootNode node={node} />;\r\n  if (isParent) return <ParentNode node={node} />;\r\n\r\n  return (\r\n    <Group top={node.x} left={node.y}>\r\n      <rect\r\n        height={height}\r\n        width={width}\r\n        y={centerY}\r\n        x={centerX}\r\n        fill={background}\r\n        stroke={green}\r\n        strokeWidth={1}\r\n        strokeDasharray=\"2,2\"\r\n        strokeOpacity={0.6}\r\n        rx={10}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy=\".33em\"\r\n        fontSize={9}\r\n        fontFamily=\"Arial\"\r\n        textAnchor=\"middle\"\r\n        fill={green}\r\n        style={{ pointerEvents: \"none\" }}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction RootNode({ node }) {\r\n  return (\r\n    <Group top={node.x} left={node.y}>\r\n      <circle r={12} fill=\"url('#lg')\" />\r\n      <text\r\n        dy=\".33em\"\r\n        fontSize={9}\r\n        fontFamily=\"Arial\"\r\n        textAnchor=\"middle\"\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={plum}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction ParentNode({ node }) {\r\n  const width = 40;\r\n  const height = 20;\r\n  const centerX = -width / 2;\r\n  const centerY = -height / 2;\r\n\r\n  return (\r\n    <Group top={node.x} left={node.y}>\r\n      <rect\r\n        height={height}\r\n        width={width}\r\n        y={centerY}\r\n        x={centerX}\r\n        fill={background}\r\n        stroke={blue}\r\n        strokeWidth={1}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy=\".33em\"\r\n        fontSize={9}\r\n        fontFamily=\"Arial\"\r\n        textAnchor=\"middle\"\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nconst defaultMargin = { top: 10, left: 80, right: 80, bottom: 10 };\r\n\r\n// export type TreeProps = {\r\n//   width: number;\r\n//   height: number;\r\n//   margin?: { top: number; right: number; bottom: number; left: number };\r\n// };\r\n\r\nexport default function FamilyTree({\r\n  width = 1000,\r\n  height = 800,\r\n  margin = defaultMargin,\r\n}) {\r\n  const data = useMemo(() => hierarchy(rawTree), []);\r\n  const yMax = height - margin.top - margin.bottom;\r\n  const xMax = width - margin.left - margin.right;\r\n\r\n  return width < 10 ? null : (\r\n    <svg width={width} height={height}>\r\n      <LinearGradient id=\"lg\" from={peach} to={pink} />\r\n      <rect width={width} height={height} rx={14} fill={background} />\r\n      <Tree root={data} size={[yMax, xMax]}>\r\n        {(tree) => (\r\n          <Group top={margin.top} left={margin.left}>\r\n            {tree.links().map((link, i) => (\r\n              <LinkHorizontal\r\n                key={`link-${i}`}\r\n                data={link}\r\n                stroke={lightpurple}\r\n                strokeWidth=\"1\"\r\n                fill=\"none\"\r\n              />\r\n            ))}\r\n            {tree.descendants().map((node, i) => (\r\n              <Node key={`node-${i}`} node={node} />\r\n            ))}\r\n          </Group>\r\n        )}\r\n      </Tree>\r\n    </svg>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}