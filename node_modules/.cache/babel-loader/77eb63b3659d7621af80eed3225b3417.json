{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\experiments\\\\screen.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createRef, useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Creature = props => {\n  _s();\n\n  const earthDimensions = props.dim;\n  const size = 10;\n  const [position, setPosition] = useState({\n    x: Math.random(earthDimensions.w * Math.random() + earthDimensions.left - size / 2),\n    y: Math.random(earthDimensions.h * Math.random() + earthDimensions.top - size / 2)\n  });\n\n  function changePosition() {\n    const pos = [1, -1];\n    const skipX = Math.floor(Math.random() * 50 + 20);\n    const skipY = Math.floor(Math.random() * 50 + 20);\n    const plusMinusX = Math.floor(Math.random() * 2);\n    const plusMinusY = Math.floor(Math.random() * 2);\n    const newPosition = {\n      x: position.x + pos[plusMinusX] * skipX,\n      y: position.y + pos[plusMinusY] * skipY\n    };\n\n    if (newPosition.x + size > earthDimensions.w + earthDimensions.left) {\n      newPosition.x = earthDimensions.w + earthDimensions.left - size;\n    }\n\n    if (newPosition.y + size > earthDimensions.h + earthDimensions.top) {\n      newPosition.y = earthDimensions.h + earthDimensions.top - size;\n    }\n\n    if (newPosition.x < earthDimensions.left) {\n      newPosition.x = earthDimensions.left;\n    }\n\n    if (newPosition.y < earthDimensions.top) {\n      newPosition.y = earthDimensions.top;\n    }\n\n    setPosition({ ...newPosition\n    });\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      changePosition();\n      console.log(position);\n    }, Math.floor(Math.random() * 20) + 10);\n  }, [position]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      borderRadius: 5,\n      height: 10,\n      width: 10,\n      backgroundColor: \"#111111\",\n      position: \"absolute\",\n      top: position.x,\n      left: position.y,\n      transition: \"all 1s ease-in-out\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Creature, \"tIGvRz5/AC1AGaXcRL0M+HeBe9I=\");\n\n_c = Creature;\n\nconst Earth = () => {\n  _s2();\n\n  const [creatures, setCreatures] = useState([]);\n  const [earthDimensions, setEarthDimensions] = useState(null);\n  const earthRef = /*#__PURE__*/createRef();\n\n  function addNewCreature() {\n    const creaturesTemp = creatures;\n    creaturesTemp.push({\n      uid: uuidv4()\n    });\n    setCreatures([...creaturesTemp]);\n  }\n\n  useEffect(() => {\n    console.log({ ...earthRef\n    });\n\n    if (earthRef && earthRef.current && !earthDimensions) {\n      setEarthDimensions({\n        top: earthRef.current.offsetTop,\n        left: earthRef.current.offsetLeft,\n        w: earthRef.current.offsetWidth,\n        h: earthRef.current.offsetHeight\n      });\n    }\n  }, [earthRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: earthRef,\n    style: {\n      backgroundColor: \"#2C931D\",\n      height: \"100%\",\n      width: \"100%\"\n    },\n    onClick: e => {\n      // console.log(onClick);\n      e.preventDefault();\n      addNewCreature();\n    },\n    children: earthRef && earthDimensions ? creatures.map(creature => {\n      return /*#__PURE__*/_jsxDEV(Creature, {\n        dim: earthDimensions\n      }, creature.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Earth, \"eKDhjuH0fAMRnIgNc3+v8xE2nkI=\");\n\n_c2 = Earth;\nexport default Earth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Creature\");\n$RefreshReg$(_c2, \"Earth\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/experiments/screen.js"],"names":["createRef","useEffect","useState","v4","uuidv4","demo","Array","from","keys","Creature","props","earthDimensions","dim","size","position","setPosition","x","Math","random","w","left","y","h","top","changePosition","pos","skipX","floor","skipY","plusMinusX","plusMinusY","newPosition","interval","setInterval","console","log","borderRadius","height","width","backgroundColor","transition","Earth","creatures","setCreatures","setEarthDimensions","earthRef","addNewCreature","creaturesTemp","push","uid","current","offsetTop","offsetLeft","offsetWidth","offsetHeight","e","preventDefault","map","creature"],"mappings":"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","sourcesContent":["import { createRef, useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nconst demo = Array.from(Array(20).keys());\r\n\r\nconst Creature = (props) => {\r\n  const earthDimensions = props.dim;\r\n  const size = 10;\r\n  const [position, setPosition] = useState({\r\n    x: Math.random(\r\n      earthDimensions.w * Math.random() + earthDimensions.left - size / 2\r\n    ),\r\n    y: Math.random(\r\n      earthDimensions.h * Math.random() + earthDimensions.top - size / 2\r\n    ),\r\n  });\r\n\r\n  function changePosition() {\r\n    const pos = [1, -1];\r\n    const skipX = Math.floor(Math.random() * 50 + 20);\r\n    const skipY = Math.floor(Math.random() * 50 + 20);\r\n\r\n    const plusMinusX = Math.floor(Math.random() * 2);\r\n    const plusMinusY = Math.floor(Math.random() * 2);\r\n\r\n    const newPosition = {\r\n      x: position.x + pos[plusMinusX] * skipX,\r\n      y: position.y + pos[plusMinusY] * skipY,\r\n    };\r\n    if (newPosition.x + size > earthDimensions.w + earthDimensions.left) {\r\n      newPosition.x = earthDimensions.w + earthDimensions.left - size;\r\n    }\r\n    if (newPosition.y + size > earthDimensions.h + earthDimensions.top) {\r\n      newPosition.y = earthDimensions.h + earthDimensions.top - size;\r\n    }\r\n    if (newPosition.x < earthDimensions.left) {\r\n      newPosition.x = earthDimensions.left;\r\n    }\r\n    if (newPosition.y < earthDimensions.top) {\r\n      newPosition.y = earthDimensions.top;\r\n    }\r\n\r\n    setPosition({ ...newPosition });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      changePosition();\r\n      console.log(position);\r\n    }, Math.floor(Math.random() * 20) + 10);\r\n  }, [position]);\r\n  return (\r\n    <div\r\n      style={{\r\n        borderRadius: 5,\r\n        height: 10,\r\n        width: 10,\r\n        backgroundColor: \"#111111\",\r\n        position: \"absolute\",\r\n        top: position.x,\r\n        left: position.y,\r\n        transition: \"all 1s ease-in-out\",\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\nconst Earth = () => {\r\n  const [creatures, setCreatures] = useState([]);\r\n  const [earthDimensions, setEarthDimensions] = useState(null);\r\n  const earthRef = createRef();\r\n\r\n  function addNewCreature() {\r\n    const creaturesTemp = creatures;\r\n    creaturesTemp.push({\r\n      uid: uuidv4(),\r\n    });\r\n    setCreatures([...creaturesTemp]);\r\n  }\r\n  useEffect(() => {\r\n    console.log({ ...earthRef });\r\n    if (earthRef && earthRef.current && !earthDimensions) {\r\n      setEarthDimensions({\r\n        top: earthRef.current.offsetTop,\r\n        left: earthRef.current.offsetLeft,\r\n        w: earthRef.current.offsetWidth,\r\n        h: earthRef.current.offsetHeight,\r\n      });\r\n    }\r\n  }, [earthRef]);\r\n  return (\r\n    <div\r\n      ref={earthRef}\r\n      style={{ backgroundColor: \"#2C931D\", height: \"100%\", width: \"100%\" }}\r\n      onClick={(e) => {\r\n        // console.log(onClick);\r\n        e.preventDefault();\r\n        addNewCreature();\r\n      }}\r\n    >\r\n      {earthRef && earthDimensions\r\n        ? creatures.map((creature) => {\r\n            return (\r\n              <Creature key={creature.uid} dim={earthDimensions}></Creature>\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n"]},"metadata":{},"sourceType":"module"}