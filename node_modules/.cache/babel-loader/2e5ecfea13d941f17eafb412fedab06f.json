{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\context\\\\globalContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { createRef, useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalStateContext = /*#__PURE__*/React.createContext(undefined);\nconst GlobalActionsContext = /*#__PURE__*/React.createContext(undefined);\nconst bounds = {\n  w: window.innerWidth - 20,\n  h: window.innerHeight - 20,\n  l: 10,\n  t: 10\n}; // bounds = {\n//   l: screenRef.current.offsetLeft,\n//   t: screenRef.current.offsetTop,\n//   w: screenRef.current.clientWidth,\n//   h: screenRef.current.clientHeight,\n// };\n\nconst useInterval = (callback, delay) => {\n  _s();\n\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      if (typeof (savedCallback === null || savedCallback === void 0 ? void 0 : savedCallback.current) !== \"undefined\") {\n        savedCallback === null || savedCallback === void 0 ? void 0 : savedCallback.current();\n      }\n    }\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\n_s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\nconst groundInitial = Array(100).fill(Array(100).fill({}));\ngroundInitial.forEach((row, i) => {\n  row.forEach((cell, j) => {\n    if (Math.random() > 0.7) {\n      const initialCreature = {\n        row: i,\n        col: j,\n        birth: Date.now(),\n        color: \"#2BFF00\"\n      };\n      groundInitial[i][j] = initialCreature;\n    } else {\n      groundInitial[i][j] = NaN;\n    }\n  });\n});\n\nconst ga = function* () {\n  for (var gen = 0; gen < 100; gen++) {\n    groundInitial.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (cell !== NaN) {\n          const sign = [-1, 1];\n          const signX = Math.floor(Math.random() * 2);\n          const signY = Math.floor(Math.random() * 2);\n          const distX = Math.floor(Math.random() * 10);\n          const distY = Math.floor(Math.random() * 10);\n          const rowNew = cell.row + sign[signX] * distX;\n          const colNew = cell.col + sign[signY] * distY;\n          if (rowNew < 0) rowNew = 0;\n          if (rowNew >= 100) rowNew = 99;\n          if (colNew < 0) colNew = 0;\n          if (colNew >= 100) colNew = 99;\n          cell.row = rowNew;\n          cell.col = colNew;\n        }\n      });\n    });\n    yield {\n      ground: groundInitial\n    };\n  }\n};\n\nconst GlobalContextProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [creatures, setCreatures] = useState(Array.from(Array(100).keys()));\n  const [dead, setDead] = useState([]);\n  const [prevDead, setPrevDead] = useState([]);\n  const gaProcessSteps = ga();\n  useEffect(() => {\n    console.log(gaProcessSteps);\n  }, gaProcessSteps);\n  useInterval(() => {\n    // console.log(gaProcessSteps)\n    if (!gaProcessSteps) return;\n    const next = gaProcessSteps.next(); // console.log(next);\n\n    if (next.done) return;\n    const creatureState = next.value; // console.log(creatureState.creatures);\n\n    setPrevDead([...dead]);\n    setCreatures([...creatureState.creatures]);\n    setDead([...creatureState.dead]);\n  }, 2000);\n  return /*#__PURE__*/_jsxDEV(GlobalStateContext.Provider, {\n    value: {\n      creatures,\n      dead,\n      prevDead\n    },\n    children: /*#__PURE__*/_jsxDEV(GlobalActionsContext.Provider, {\n      value: {\n        setCreatures\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(GlobalContextProvider, \"ojLeaICn6IeIagOt+HHmTnKSIQ8=\", false, function () {\n  return [useInterval];\n});\n\n_c = GlobalContextProvider;\n\nconst useGlobalState = () => {\n  _s3();\n\n  const context = React.useContext(GlobalStateContext);\n\n  if (context === undefined) {\n    throw new Error(\"useGlobalState error\");\n  }\n\n  return context;\n};\n\n_s3(useGlobalState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nconst useGlobalActions = () => {\n  _s4();\n\n  const context = React.useContext(GlobalActionsContext);\n\n  if (context === undefined) {\n    throw new Error(\"useGlobalActions error\");\n  }\n\n  return context;\n};\n\n_s4(useGlobalActions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/context/globalContext.js"],"names":["React","createRef","useEffect","useState","useRef","GlobalStateContext","createContext","undefined","GlobalActionsContext","bounds","w","window","innerWidth","h","innerHeight","l","t","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","groundInitial","Array","fill","forEach","row","i","cell","j","Math","random","initialCreature","col","birth","Date","now","color","NaN","ga","gen","sign","signX","floor","signY","distX","distY","rowNew","colNew","ground","GlobalContextProvider","children","creatures","setCreatures","from","keys","dead","setDead","prevDead","setPrevDead","gaProcessSteps","console","log","next","done","creatureState","value","useGlobalState","context","useContext","Error","useGlobalActions"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, useState ,useRef} from \"react\";\n\n\n\nconst GlobalStateContext = React.createContext(undefined);\nconst GlobalActionsContext = React.createContext(undefined);\n\n\nconst bounds = {w:window.innerWidth-20,h:window.innerHeight-20,l:10,t:10}\n// bounds = {\n//   l: screenRef.current.offsetLeft,\n//   t: screenRef.current.offsetTop,\n//   w: screenRef.current.clientWidth,\n//   h: screenRef.current.clientHeight,\n// };\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (typeof savedCallback?.current !== \"undefined\") {\n        savedCallback?.current();\n      }\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\n\n\nconst groundInitial = Array(100).fill(Array(100).fill({}));\ngroundInitial.forEach((row, i) => {\n  row.forEach((cell,j)=>{\n    if(Math.random()>0.7){\n      const initialCreature = {\n        row:i,\n        col:j,\n        birth:Date.now(),\n        color:\"#2BFF00\"\n      }\n      groundInitial[i][j] = initialCreature;\n    }else{\n      groundInitial[i][j] = NaN;\n    }\n  })\n});\n\nconst ga = function*(){\n\n  for(var gen=0;gen<100;gen++){\n    groundInitial.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (cell!==NaN) {\n          const sign = [-1,1];\n          const signX = Math.floor(Math.random() * 2);\n          const signY = Math.floor(Math.random() * 2);\n          const distX = Math.floor(Math.random()*10);\n          const distY = Math.floor(Math.random() * 10);\n\n          const rowNew = cell.row+(sign[signX]*distX);\n          const colNew = cell.col+(sign[signY]*distY);\n\n          if(rowNew<0)rowNew = 0;\n          if(rowNew>=100)rowNew = 99;\n          if(colNew<0)colNew = 0;\n          if(colNew>=100)colNew = 99;\n\n          cell.row = rowNew;\n          cell.col = colNew;\n        }\n      });\n    });\n    yield{ground:groundInitial}\n\n  }\n  \n  \n\n    \n    \n  \n}\n\nconst GlobalContextProvider = ({ children }) => {\n  \n\n  \n  const [creatures, setCreatures] = useState(Array.from(Array(100).keys()));\n \n  const [dead,setDead] = useState([]);\n  const [prevDead, setPrevDead] = useState([]);\n  const gaProcessSteps = ga();\n\n  useEffect(()=>{\n    console.log(gaProcessSteps)\n  },gaProcessSteps)\n    \n\n\n  \n\n\n  useInterval(() => {\n    // console.log(gaProcessSteps)\n    \n    if (!gaProcessSteps) return;\n    const next = gaProcessSteps.next();\n    // console.log(next);\n    if (next.done) return ;\n    const creatureState = next.value;\n    // console.log(creatureState.creatures);\n    setPrevDead([...dead]);\n    setCreatures([...creatureState.creatures]);\n    setDead([...creatureState.dead]);\n  }, 2000);\n\n  return (\n    <GlobalStateContext.Provider\n      value={{\n        creatures,\n        dead,\n        prevDead\n      }}\n      \n    >\n      <GlobalActionsContext.Provider value={{ setCreatures }}>\n        {children}\n      </GlobalActionsContext.Provider>\n    </GlobalStateContext.Provider>\n  );\n};\n\nconst useGlobalState = () => {\n  const context = React.useContext(GlobalStateContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalState error\"\n    );\n  }\n\n  return context;\n};\n\nconst useGlobalActions = () => {\n  const context = React.useContext(GlobalActionsContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalActions error\"\n    );\n  }\n\n  return context;\n};\n\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\n"]},"metadata":{},"sourceType":"module"}