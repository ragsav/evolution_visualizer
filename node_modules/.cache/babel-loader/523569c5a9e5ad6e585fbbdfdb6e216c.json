{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\experiments\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Creature = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      borderRadius: 5,\n      height: 10,\n      width: 10,\n      backgroundColor: \"#111111\",\n      position: \"absolute\",\n      top: props.creature.top,\n      left: props.creature.left,\n      transition: \"all 1sec linear\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Creature;\n\nconst Earth = () => {\n  _s();\n\n  const [creatures, setCreatures] = useState([]);\n  const [earthDimensions, setEarthDimensions] = useState(null);\n  const earthRef = /*#__PURE__*/createRef();\n\n  function addNewCreature() {\n    const creaturesTemp = creatures;\n    creaturesTemp.push({\n      uid: uuidv4(),\n      top: Math.floor(Math.random() * earthDimensions.h + earthDimensions.top),\n      left: Math.floor(Math.random() * earthDimensions.w + earthDimensions.left)\n    });\n    setCreatures([...creaturesTemp]);\n  }\n\n  useEffect(() => {\n    console.log({ ...earthRef\n    });\n\n    if (earthRef && earthRef.current && !earthDimensions) {\n      setEarthDimensions({\n        top: earthRef.current.offsetTop,\n        left: earthRef.current.offsetLeft,\n        w: earthRef.current.offsetWidth,\n        h: earthRef.current.offsetHeight\n      });\n    }\n  }, [earthRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: earthRef,\n    style: {\n      backgroundColor: \"#2C931D\",\n      height: \"100%\",\n      width: \"100%\"\n    },\n    onClick: e => {\n      // console.log(onClick);\n      e.preventDefault();\n      addNewCreature();\n    },\n    children: earthRef && earthDimensions ? creatures.map(creature => {\n      return /*#__PURE__*/_jsxDEV(Creature, {\n        creature: creature\n      }, props.creature.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Earth, \"eKDhjuH0fAMRnIgNc3+v8xE2nkI=\");\n\n_c2 = Earth;\nexport default Earth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Creature\");\n$RefreshReg$(_c2, \"Earth\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/experiments/screen.js"],"names":["createRef","useEffect","useState","v4","uuidv4","demo","Array","from","keys","Creature","props","borderRadius","height","width","backgroundColor","position","top","creature","left","transition","Earth","creatures","setCreatures","earthDimensions","setEarthDimensions","earthRef","addNewCreature","creaturesTemp","push","uid","Math","floor","random","h","w","console","log","current","offsetTop","offsetLeft","offsetWidth","offsetHeight","e","preventDefault","map"],"mappings":"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","sourcesContent":["import { createRef, useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nconst demo = Array.from(Array(20).keys());\r\n\r\nconst Creature = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        borderRadius: 5,\r\n        height: 10,\r\n        width: 10,\r\n        backgroundColor: \"#111111\",\r\n        position: \"absolute\",\r\n        top: props.creature.top,\r\n        left: props.creature.left,\r\n        transition: \"all 1sec linear\",\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\nconst Earth = () => {\r\n  const [creatures, setCreatures] = useState([]);\r\n  const [earthDimensions, setEarthDimensions] = useState(null);\r\n  const earthRef = createRef();\r\n\r\n  function addNewCreature() {\r\n    const creaturesTemp = creatures;\r\n    creaturesTemp.push({\r\n      uid: uuidv4(),\r\n      top: Math.floor(Math.random() * earthDimensions.h + earthDimensions.top),\r\n      left: Math.floor(\r\n        Math.random() * earthDimensions.w + earthDimensions.left\r\n      ),\r\n    });\r\n    setCreatures([...creaturesTemp]);\r\n  }\r\n  useEffect(() => {\r\n    console.log({ ...earthRef });\r\n    if (earthRef && earthRef.current && !earthDimensions) {\r\n      setEarthDimensions({\r\n        top: earthRef.current.offsetTop,\r\n        left: earthRef.current.offsetLeft,\r\n        w: earthRef.current.offsetWidth,\r\n        h: earthRef.current.offsetHeight,\r\n      });\r\n    }\r\n  }, [earthRef]);\r\n  return (\r\n    <div\r\n      ref={earthRef}\r\n      style={{ backgroundColor: \"#2C931D\", height: \"100%\", width: \"100%\" }}\r\n      onClick={(e) => {\r\n        // console.log(onClick);\r\n        e.preventDefault();\r\n        addNewCreature();\r\n      }}\r\n    >\r\n      {earthRef && earthDimensions\r\n        ? creatures.map((creature) => {\r\n            return (\r\n              <Creature key={props.creature.uid} creature={creature}></Creature>\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n"]},"metadata":{},"sourceType":"module"}