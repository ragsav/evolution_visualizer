{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\experiments\\\\screen.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createRef, useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Creature = props => {\n  _s();\n\n  const earthDimensions = props.dim;\n  const size = 10;\n  const [position, setPosition] = useState({\n    x: Math.random(earthDimensions.w * Math.random() + earthDimensions.left - size / 2)\n  });\n  useEffect(() => {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      borderRadius: 5,\n      height: 10,\n      width: 10,\n      backgroundColor: \"#111111\",\n      position: \"absolute\",\n      top: props.dim.top,\n      left: props.creature.left,\n      transition: \"all 1sec linear\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Creature, \"kLvui2NZCQCUBwD3LVAbf5l/JhI=\");\n\n_c = Creature;\n\nconst Earth = () => {\n  _s2();\n\n  const [creatures, setCreatures] = useState([]);\n  const [earthDimensions, setEarthDimensions] = useState(null);\n  const earthRef = /*#__PURE__*/createRef();\n\n  function addNewCreature() {\n    const creaturesTemp = creatures;\n    creaturesTemp.push({\n      uid: uuidv4()\n    });\n    setCreatures([...creaturesTemp]);\n  }\n\n  useEffect(() => {\n    console.log({ ...earthRef\n    });\n\n    if (earthRef && earthRef.current && !earthDimensions) {\n      setEarthDimensions({\n        top: earthRef.current.offsetTop,\n        left: earthRef.current.offsetLeft,\n        w: earthRef.current.offsetWidth,\n        h: earthRef.current.offsetHeight\n      });\n    }\n  }, [earthRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: earthRef,\n    style: {\n      backgroundColor: \"#2C931D\",\n      height: \"100%\",\n      width: \"100%\"\n    },\n    onClick: e => {\n      // console.log(onClick);\n      e.preventDefault();\n      addNewCreature();\n    },\n    children: earthRef && earthDimensions ? creatures.map(creature => {\n      return /*#__PURE__*/_jsxDEV(Creature, {\n        dim: earthDimensions\n      }, creature.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Earth, \"eKDhjuH0fAMRnIgNc3+v8xE2nkI=\");\n\n_c2 = Earth;\nexport default Earth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Creature\");\n$RefreshReg$(_c2, \"Earth\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/experiments/screen.js"],"names":["createRef","useEffect","useState","v4","uuidv4","demo","Array","from","keys","Creature","props","earthDimensions","dim","size","position","setPosition","x","Math","random","w","left","borderRadius","height","width","backgroundColor","top","creature","transition","Earth","creatures","setCreatures","setEarthDimensions","earthRef","addNewCreature","creaturesTemp","push","uid","console","log","current","offsetTop","offsetLeft","offsetWidth","h","offsetHeight","e","preventDefault","map"],"mappings":"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","sourcesContent":["import { createRef, useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nconst demo = Array.from(Array(20).keys());\r\n\r\nconst Creature = (props) => {\r\n  const earthDimensions = props.dim;\r\n  const size = 10;\r\n  const [position, setPosition] = useState({\r\n    x: Math.random(\r\n      earthDimensions.w * Math.random() + earthDimensions.left - size / 2\r\n    ),\r\n  });\r\n\r\n  useEffect(() => {});\r\n  return (\r\n    <div\r\n      style={{\r\n        borderRadius: 5,\r\n        height: 10,\r\n        width: 10,\r\n        backgroundColor: \"#111111\",\r\n        position: \"absolute\",\r\n        top: props.dim.top,\r\n        left: props.creature.left,\r\n        transition: \"all 1sec linear\",\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\nconst Earth = () => {\r\n  const [creatures, setCreatures] = useState([]);\r\n  const [earthDimensions, setEarthDimensions] = useState(null);\r\n  const earthRef = createRef();\r\n\r\n  function addNewCreature() {\r\n    const creaturesTemp = creatures;\r\n    creaturesTemp.push({\r\n      uid: uuidv4(),\r\n    });\r\n    setCreatures([...creaturesTemp]);\r\n  }\r\n  useEffect(() => {\r\n    console.log({ ...earthRef });\r\n    if (earthRef && earthRef.current && !earthDimensions) {\r\n      setEarthDimensions({\r\n        top: earthRef.current.offsetTop,\r\n        left: earthRef.current.offsetLeft,\r\n        w: earthRef.current.offsetWidth,\r\n        h: earthRef.current.offsetHeight,\r\n      });\r\n    }\r\n  }, [earthRef]);\r\n  return (\r\n    <div\r\n      ref={earthRef}\r\n      style={{ backgroundColor: \"#2C931D\", height: \"100%\", width: \"100%\" }}\r\n      onClick={(e) => {\r\n        // console.log(onClick);\r\n        e.preventDefault();\r\n        addNewCreature();\r\n      }}\r\n    >\r\n      {earthRef && earthDimensions\r\n        ? creatures.map((creature) => {\r\n            return (\r\n              <Creature key={creature.uid} dim={earthDimensions}></Creature>\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n"]},"metadata":{},"sourceType":"module"}