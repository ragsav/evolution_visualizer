{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\context\\\\globalContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalStateContext = /*#__PURE__*/React.createContext(undefined);\nconst GlobalActionsContext = /*#__PURE__*/React.createContext(undefined);\n\nconst ga = function* () {\n  const creatures = Array(100).fill({});\n  creatures.forEach((val, index) => {\n    creatures[index] = {\n      x: Math.floor(Math.random() * bounds.w),\n      y: Math.floor(Math.random() * bounds.h)\n    };\n  });\n\n  for (var i = 0; i < 1000; i++) {\n    for (var j = 0; j < 100; j++) {\n      const pos = [1, -1];\n      const skipX = Math.floor(Math.random() * 50);\n      const skipY = Math.floor(Math.random() * 50);\n      const plusMinusX = Math.floor(Math.random() * 2);\n      const plusMinusY = Math.floor(Math.random() * 2);\n      const newPosition = {\n        x: creatures[j].x + pos[plusMinusX] * skipX,\n        y: creatures[j].y + pos[plusMinusY] * skipY\n      };\n\n      if (newPosition.x > bounds.w + bounds.l) {\n        newPosition.x = bounds.w;\n      }\n\n      if (newPosition.y > bounds.h + bounds.t) {\n        newPosition.y = bounds.h;\n      }\n\n      if (newPosition.x < bounds.l) {\n        newPosition.x = bounds.l;\n      }\n\n      if (newPosition.y < bounds.t) {\n        newPosition.y = bounds.t;\n      }\n\n      creatures[j] = newPosition;\n    }\n\n    yield {\n      creatures\n    };\n  }\n};\n\nconst GlobalContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [arrayProcessSteps, setArrayProcessSteps] = useState();\n  const [creatures, setCreatures] = useState(Array.from(Array(50).keys()));\n  const creatureRef = creatures.map(() => /*#__PURE__*/createRef());\n  useEffect(() => {\n    setArrayProcessSteps(ga());\n    setArrayState({});\n  }, [array, algorithm]);\n\n  const compileAlgorithm = () => {\n    let algorithm;\n    console.log(algorithmString);\n    const e = eval(algorithmString);\n    setAlgorithm(() => {\n      return algorithm;\n    });\n  };\n\n  useInterval(() => {\n    if (!arrayProcessSteps) return;\n    const next = arrayProcessSteps.next();\n    if (next.done) return finish();\n    const state = next.value;\n    setArrayState(state);\n  }, interval);\n  return /*#__PURE__*/_jsxDEV(GlobalStateContext.Provider, {\n    value: {\n      creatures,\n      creatureRef\n    },\n    children: /*#__PURE__*/_jsxDEV(GlobalActionsContext.Provider, {\n      value: {\n        setCreatures\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalContextProvider, \"6nGvLk4YV1yAwbacGzlKHCgqkQ0=\", true);\n\n_c = GlobalContextProvider;\n\nconst useGlobalState = () => {\n  _s2();\n\n  const context = React.useContext(GlobalStateContext);\n\n  if (context === undefined) {\n    throw new Error(\"useGlobalState error\");\n  }\n\n  return context;\n};\n\n_s2(useGlobalState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nconst useGlobalActions = () => {\n  _s3();\n\n  const context = React.useContext(GlobalActionsContext);\n\n  if (context === undefined) {\n    throw new Error(\"useGlobalActions error\");\n  }\n\n  return context;\n};\n\n_s3(useGlobalActions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/context/globalContext.js"],"names":["React","createRef","useEffect","useState","GlobalStateContext","createContext","undefined","GlobalActionsContext","ga","creatures","Array","fill","forEach","val","index","x","Math","floor","random","bounds","w","y","h","i","j","pos","skipX","skipY","plusMinusX","plusMinusY","newPosition","l","t","GlobalContextProvider","children","arrayProcessSteps","setArrayProcessSteps","setCreatures","from","keys","creatureRef","map","setArrayState","array","algorithm","compileAlgorithm","console","log","algorithmString","e","eval","setAlgorithm","useInterval","next","done","finish","state","value","interval","useGlobalState","context","useContext","Error","useGlobalActions"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, useState } from \"react\";\n\n\n\nconst GlobalStateContext = React.createContext(undefined);\nconst GlobalActionsContext = React.createContext(undefined);\n\n\n\n\n\nconst ga = function*(){\n\n  const creatures = Array(100).fill({});\n  creatures.forEach((val,index)=>{\n    creatures[index] = {\n      x: Math.floor(Math.random() * bounds.w),\n      y: Math.floor(Math.random() * bounds.h),\n    };\n  })\n  \n  for (var i = 0; i < 1000; i++) {\n    for(var j=0;j<100;j++){\n      const pos = [1, -1];\n      const skipX = Math.floor(Math.random() * 50);\n      const skipY = Math.floor(Math.random() * 50);\n\n      const plusMinusX = Math.floor(Math.random() * 2);\n      const plusMinusY = Math.floor(Math.random() * 2);\n\n      const newPosition = {\n        x: creatures[j].x + pos[plusMinusX] * skipX,\n        y: creatures[j].y + pos[plusMinusY] * skipY,\n      };\n      if (newPosition.x > bounds.w + bounds.l) {\n        newPosition.x = bounds.w;\n      }\n      if (newPosition.y > bounds.h + bounds.t) {\n        newPosition.y = bounds.h;\n      }\n      if (newPosition.x < bounds.l) {\n        newPosition.x = bounds.l;\n      }\n      if (newPosition.y < bounds.t) {\n        newPosition.y = bounds.t;\n      }\n\n      creatures[j] = newPosition;\n    }\n    yield{creatures}\n  }\n}\n\nconst GlobalContextProvider = ({ children }) => {\n  \n\n  const [arrayProcessSteps, setArrayProcessSteps] = useState();\n  const [creatures, setCreatures] = useState(Array.from(Array(50).keys()));\n  const creatureRef= creatures.map(()=>createRef());\n  \n\n    useEffect(() => {\n      setArrayProcessSteps(ga());\n      setArrayState({});\n    }, [array, algorithm]);\n\n  const compileAlgorithm = () => {\n    let algorithm;\n    console.log(algorithmString);\n    const e = eval(algorithmString);\n    setAlgorithm(() => {\n      return algorithm;\n    });\n  };\n \n\n\n  useInterval(() => {\n    if (!arrayProcessSteps) return;\n    const next = arrayProcessSteps.next();\n    if (next.done) return finish();\n    const state = next.value;\n    setArrayState(state);\n  }, interval);\n\n  return (\n    <GlobalStateContext.Provider\n      value={{\n        creatures,\n        creatureRef,\n      }}\n    >\n      <GlobalActionsContext.Provider value={{ setCreatures }}>\n        {children}\n      </GlobalActionsContext.Provider>\n    </GlobalStateContext.Provider>\n  );\n};\n\nconst useGlobalState = () => {\n  const context = React.useContext(GlobalStateContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalState error\"\n    );\n  }\n\n  return context;\n};\n\nconst useGlobalActions = () => {\n  const context = React.useContext(GlobalActionsContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalActions error\"\n    );\n  }\n\n  return context;\n};\n\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\n"]},"metadata":{},"sourceType":"module"}