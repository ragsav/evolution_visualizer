{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\naruto\\\\src\\\\components\\\\home.js\";\nimport React from \"react\";\nimport Tree from \"react-d3-tree\";\nimport \"./home.css\"; // This is a simplified example of an org chart with a depth of 2.\n// Note how deeper levels are defined recursively via the `children` property.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst orgChart = {\n  name: \"CEO\",\n  children: [{\n    name: \"Manager\",\n    attributes: {\n      department: \"Production\"\n    },\n    children: [{\n      name: \"Foreman\",\n      attributes: {\n        department: \"Fabrication\"\n      },\n      children: [{\n        name: \"Worker\"\n      }]\n    }, {\n      name: \"Foreman\",\n      attributes: {\n        department: \"Assembly\"\n      },\n      children: [{\n        name: \"Worker\"\n      }]\n    }]\n  }]\n};\nexport default function OrgChartTree() {\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(\"div\", {\n      id: \"treeWrapper\",\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"white\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        data: orgChart,\n        enableLegacyTransitions: true,\n        orientation: \"vertical\",\n        transitionDuration: 1000,\n        rootNodeClassName: \"leaf_node\",\n        branchNodeClassName: \"leaf_node\",\n        leafNodeClassName: \"leaf_node\",\n        initialDepth: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c = OrgChartTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrgChartTree\");","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","Tree","orgChart","name","children","attributes","department","OrgChartTree","width","height","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAO,YAAP,C,CACA;AACA;;;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE,KADS;AAEfC,EAAAA,QAAQ,EAAE,CACR;AACED,IAAAA,IAAI,EAAE,SADR;AAEEE,IAAAA,UAAU,EAAE;AACVC,MAAAA,UAAU,EAAE;AADF,KAFd;AAKEF,IAAAA,QAAQ,EAAE,CACR;AACED,MAAAA,IAAI,EAAE,SADR;AAEEE,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE;AADF,OAFd;AAKEF,MAAAA,QAAQ,EAAE,CACR;AACED,QAAAA,IAAI,EAAE;AADR,OADQ;AALZ,KADQ,EAYR;AACEA,MAAAA,IAAI,EAAE,SADR;AAEEE,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE;AADF,OAFd;AAKEF,MAAAA,QAAQ,EAAE,CACR;AACED,QAAAA,IAAI,EAAE;AADR,OADQ;AALZ,KAZQ;AALZ,GADQ;AAFK,CAAjB;AAoCA,eAAe,SAASI,YAAT,GAAwB;AACrC;AAAA;AACE;AACA;AACE,MAAA,EAAE,EAAC,aADL;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE,MAAzB;AAAiCC,QAAAA,eAAe,EAAE;AAAlD,OAFT;AAAA,6BAIE,QAAC,IAAD;AACE,QAAA,IAAI,EAAER,QADR;AAEE,QAAA,uBAAuB,EAAE,IAF3B;AAGE,QAAA,WAAW,EAAC,UAHd;AAIE,QAAA,kBAAkB,EAAE,IAJtB;AAKE,QAAA,iBAAiB,EAAC,WALpB;AAME,QAAA,mBAAmB,EAAC,WANtB;AAOE,QAAA,iBAAiB,EAAC,WAPpB;AAQE,QAAA,YAAY,EAAE;AARhB;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AAFF;AAkBD;KAnBuBK,Y","sourcesContent":["import React from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport \"./home.css\";\r\n// This is a simplified example of an org chart with a depth of 2.\r\n// Note how deeper levels are defined recursively via the `children` property.\r\nconst orgChart = {\r\n  name: \"CEO\",\r\n  children: [\r\n    {\r\n      name: \"Manager\",\r\n      attributes: {\r\n        department: \"Production\",\r\n      },\r\n      children: [\r\n        {\r\n          name: \"Foreman\",\r\n          attributes: {\r\n            department: \"Fabrication\",\r\n          },\r\n          children: [\r\n            {\r\n              name: \"Worker\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          name: \"Foreman\",\r\n          attributes: {\r\n            department: \"Assembly\",\r\n          },\r\n          children: [\r\n            {\r\n              name: \"Worker\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default function OrgChartTree() {\r\n  return (\r\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n    <div\r\n      id=\"treeWrapper\"\r\n      style={{ width: \"100%\", height: \"100%\", backgroundColor: \"white\" }}\r\n    >\r\n      <Tree\r\n        data={orgChart}\r\n        enableLegacyTransitions={true}\r\n        orientation=\"vertical\"\r\n        transitionDuration={1000}\r\n        rootNodeClassName=\"leaf_node\"\r\n        branchNodeClassName=\"leaf_node\"\r\n        leafNodeClassName=\"leaf_node\"\r\n        initialDepth={0}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}