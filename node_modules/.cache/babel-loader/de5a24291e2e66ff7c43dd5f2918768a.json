{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Screen = () => {\n  _s();\n\n  const {\n    ground\n  } = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n      }\n    }\n  }, [screenRef]);\n  useEffect(() => {// setCreaturesData([...creatures])\n    // console.log(creatures);\n  }, [ground]); // useEffect(()=>{\n  //     console.log(creaturesData);\n  // },[creaturesData])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? ground.map((m, i) => {\n      return /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          padding: 0,\n          margin: 0,\n          width: \"100%\"\n        },\n        children: m.map((cell, j) => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            style: {\n              padding: 0,\n              margin: 0\n            },\n            children: cell.current ? /*#__PURE__*/_jsxDEV(Card, {\n              style: {\n                border: \"none\",\n                borderRadius: 0,\n                padding: 0,\n                margin: 0,\n                backgroundColor: cell.current.color\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 31\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 27\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"CW/30PfRpTKAZ1dmq6RMBOhe5tU=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","Row","Col","useGlobalActions","useGlobalState","Node","Screen","ground","trueRef","setTrueRef","screenRef","current","height","width","backgroundColor","map","m","i","padding","margin","cell","j","border","borderRadius","color"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,EAAeC,GAAf,EAAmBC,GAAnB,QAA6B,iBAA7B;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,0BAAjD;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,MAAM,GAAG,MAAI;AAAA;;AAGf,QAAM;AAACC,IAAAA;AAAD,MAAWH,cAAc,EAA/B;AACA,QAAM,CAACI,OAAD,EAASC,UAAT,IAAuBV,QAAQ,CAAC,IAAD,CAArC;AACA,QAAMW,SAAS,GAAGZ,MAAM,CAAC,IAAD,CAAxB;AAaAD,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGa,SAAH,EAAa;AACT,UAAGA,SAAS,CAACC,OAAb,EAAqB;AACjBF,QAAAA,UAAU,CAACC,SAAS,CAACC,OAAX,CAAV;AACH;AACJ;AACJ,GANQ,EAMP,CAACD,SAAD,CANO,CAAT;AASAb,EAAAA,SAAS,CAAC,MAAI,CAEV;AACA;AACH,GAJQ,EAIP,CAACU,MAAD,CAJO,CAAT,CA3Be,CAiCf;AACA;AACA;;AAKA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KADT;AAEE,IAAA,GAAG,EAAEJ,SAFP;AAAA,cAIIF,OAAD,GACGD,MAAM,CAACQ,GAAP,CAAW,CAACC,CAAD,EAAGC,CAAH,KAAS;AAClB,0BACE,QAAC,GAAD;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,OAAO,EAAC,CAAT;AAAWC,UAAAA,MAAM,EAAC,CAAlB;AAAoBN,UAAAA,KAAK,EAAC;AAA1B,SAAZ;AAAA,kBACKG,CAAC,CAACD,GAAF,CAAM,CAACK,IAAD,EAAMC,CAAN,KAAU;AACb,8BACE,QAAC,GAAD;AAAK,YAAA,KAAK,EAAE;AAAEH,cAAAA,OAAO,EAAE,CAAX;AAAcC,cAAAA,MAAM,EAAE;AAAtB,aAAZ;AAAA,sBACGC,IAAI,CAACT,OAAL,gBACC,QAAC,IAAD;AACE,cAAA,KAAK,EAAE;AACLW,gBAAAA,MAAM,EAAE,MADH;AAELC,gBAAAA,YAAY,EAAE,CAFT;AAGLL,gBAAAA,OAAO,EAAE,CAHJ;AAILC,gBAAAA,MAAM,EAAE,CAJH;AAKLL,gBAAAA,eAAe,EAAEM,IAAI,CAACT,OAAL,CAAaa;AALzB;AADT;AAAA;AAAA;AAAA;AAAA,oBADD,GAUG;AAXN;AAAA;AAAA;AAAA;AAAA,kBADF;AAeH,SAhBA;AADL;AAAA;AAAA;AAAA;AAAA,cADF;AAoBE,KArBJ,CADH,GAsBS;AA1BZ;AAAA;AAAA;AAAA;AAAA,UADF;AA8BH,CAtED;;GAAMlB,M;UAGeF,c;;;KAHfE,M;AAwEN,eAAeA,MAAf","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card ,Row,Col} from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\n\r\nconst Screen = ()=>{\r\n\r\n    \r\n    const {ground} = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n  \r\n    \r\n\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n   \r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n\r\n    useEffect(()=>{\r\n        \r\n        // setCreaturesData([...creatures])\r\n        // console.log(creatures);\r\n    },[ground])\r\n\r\n    // useEffect(()=>{\r\n    //     console.log(creaturesData);\r\n    // },[creaturesData])\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {(trueRef)\r\n          ? ground.map((m,i) => {\r\n              return (\r\n                <Row style={{padding:0,margin:0,width:\"100%\"}}>\r\n                    {m.map((cell,j)=>{\r\n                        return (\r\n                          <Col style={{ padding: 0, margin: 0 }}>\r\n                            {cell.current ? (\r\n                              <Card\r\n                                style={{\r\n                                  border: \"none\",\r\n                                  borderRadius: 0,\r\n                                  padding: 0,\r\n                                  margin: 0,\r\n                                  backgroundColor: cell.current.color,\r\n                                }}\r\n                              ></Card>\r\n                            ) : null}\r\n                          </Col>\r\n                        );\r\n                    })}\r\n                </Row>\r\n              )}):null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}