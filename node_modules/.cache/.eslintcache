[{"E:\\projects\\Fun\\genetic algorithm\\src\\index.js":"1","E:\\projects\\Fun\\genetic algorithm\\src\\App.js":"2","E:\\projects\\Fun\\genetic algorithm\\src\\reportWebVitals.js":"3","E:\\projects\\Fun\\genetic algorithm\\src\\components\\screen.js":"4","E:\\projects\\Fun\\genetic algorithm\\src\\components\\node.js":"5","E:\\projects\\Fun\\genetic algorithm\\src\\context\\globalContext.js":"6"},{"size":517,"mtime":1616660189445,"results":"7","hashOfConfig":"8"},{"size":403,"mtime":1617909449577,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1616660189826,"results":"10","hashOfConfig":"8"},{"size":2497,"mtime":1617973216373,"results":"11","hashOfConfig":"8"},{"size":4188,"mtime":1617973400251,"results":"12","hashOfConfig":"8"},{"size":3688,"mtime":1617954465956,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"73yash",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"E:\\projects\\Fun\\genetic algorithm\\src\\index.js",[],["29","30"],"E:\\projects\\Fun\\genetic algorithm\\src\\App.js",["31"],"import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Screen from './components/screen';\r\nimport { GlobalContextProvider } from './context/globalContext';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalContextProvider>\r\n        <Screen></Screen>\r\n      </GlobalContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\projects\\Fun\\genetic algorithm\\src\\reportWebVitals.js",[],"E:\\projects\\Fun\\genetic algorithm\\src\\components\\screen.js",["32","33","34","35","36","37"],"E:\\projects\\Fun\\genetic algorithm\\src\\components\\node.js",["38","39","40","41"],"E:\\projects\\Fun\\genetic algorithm\\src\\context\\globalContext.js",["42","43","44"],"import React, { createRef, useEffect, useState ,useRef} from \"react\";\n\n\n\nconst GlobalStateContext = React.createContext(undefined);\nconst GlobalActionsContext = React.createContext(undefined);\n\n\nconst bounds = {w:window.innerWidth-20,h:window.innerHeight-20,l:10,t:10}\n// bounds = {\n//   l: screenRef.current.offsetLeft,\n//   t: screenRef.current.offsetTop,\n//   w: screenRef.current.clientWidth,\n//   h: screenRef.current.clientHeight,\n// };\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (typeof savedCallback?.current !== \"undefined\") {\n        savedCallback?.current();\n      }\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\n\n\nconst groundInitial = Array(100).fill(Array(100).fill({}));\ngroundInitial.forEach((row, i) => {\n  row.forEach((cell, j) => {\n    groundInitial[i][j] = createRef();\n\n    const initialCreature = {\n      row: i,\n      col: j,\n      birth: Date.now(),\n      color: \"#2BFF00\",\n    };\n    groundInitial[i][j].current = Math.random() > 0.7 ? initialCreature : null;\n  });\n\n  groundInitial[i] = [...row];\n});\n\nconst ga = function*(){\n\n  for(var gen=0;gen<100;gen++){\n    groundInitial.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (groundInitial[i][j].current) {\n          const sign = [-1, 1];\n          const signX = Math.floor(Math.random() * 2);\n          const signY = Math.floor(Math.random() * 2);\n          const distX = Math.floor(Math.random() * 2);\n          const distY = Math.floor(Math.random() * 2);\n\n          var rowNew = groundInitial[i][j].current.row + sign[signX] * distX;\n          var colNew = groundInitial[i][j].current.col + sign[signY] * distY;\n\n          if (rowNew < 0) rowNew = 0;\n          if (rowNew >= 100) rowNew = 99;\n          if (colNew < 0) colNew = 0;\n          if (colNew >= 100) colNew = 99;\n\n          groundInitial[rowNew][colNew].current = groundInitial[i][j].current;\n          groundInitial[rowNew][colNew].current.row = rowNew;\n          groundInitial[rowNew][colNew].current.col = colNew;\n          groundInitial[i][j].current = null;\n        }\n      });\n       groundInitial[i] = [...row];\n    });\n    yield{ground:groundInitial}\n\n  }\n  \n  \n\n    \n    \n  \n}\n\nconst GlobalContextProvider = ({ children }) => {\n  \n\n  \n  const [ground, setGround] = useState([]);\n  const gaProcessSteps = ga();\n\n  useEffect(()=>{\n    console.log(gaProcessSteps)\n  },gaProcessSteps)\n    \n\n\n  \n\n\n  useInterval(() => {\n    // console.log(gaProcessSteps)\n    \n    if (!gaProcessSteps) return;\n    const next = gaProcessSteps.next();\n    // console.log(next);\n    if (next.done) return ;\n    const groundState = next.value;\n    \n    setGround([...groundState.ground]);\n    \n  }, 2000);\n\n  return (\n    <GlobalStateContext.Provider\n      value={{\n        ground\n      }}\n      \n    >\n      <GlobalActionsContext.Provider value={{ setGround }}>\n        {children}\n      </GlobalActionsContext.Provider>\n    </GlobalStateContext.Provider>\n  );\n};\n\nconst useGlobalState = () => {\n  const context = React.useContext(GlobalStateContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalState error\"\n    );\n  }\n\n  return context;\n};\n\nconst useGlobalActions = () => {\n  const context = React.useContext(GlobalActionsContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalActions error\"\n    );\n  }\n\n  return context;\n};\n\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":8,"nodeType":"51","messageId":"52","endLine":1,"endColumn":12},{"ruleId":"49","severity":1,"message":"53","line":1,"column":10,"nodeType":"51","messageId":"52","endLine":1,"endColumn":19},{"ruleId":"49","severity":1,"message":"54","line":2,"column":10,"nodeType":"51","messageId":"52","endLine":2,"endColumn":14},{"ruleId":"49","severity":1,"message":"55","line":3,"column":10,"nodeType":"51","messageId":"52","endLine":3,"endColumn":26},{"ruleId":"49","severity":1,"message":"56","line":3,"column":28,"nodeType":"51","messageId":"52","endLine":3,"endColumn":42},{"ruleId":"49","severity":1,"message":"57","line":43,"column":13,"nodeType":"51","messageId":"52","endLine":43,"endColumn":24},{"ruleId":"58","severity":1,"message":"59","line":76,"column":7,"nodeType":"60","endLine":76,"endColumn":18,"suggestions":"61"},{"ruleId":"49","severity":1,"message":"62","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":16},{"ruleId":"49","severity":1,"message":"55","line":5,"column":10,"nodeType":"51","messageId":"52","endLine":5,"endColumn":26},{"ruleId":"49","severity":1,"message":"56","line":5,"column":28,"nodeType":"51","messageId":"52","endLine":5,"endColumn":42},{"ruleId":"58","severity":1,"message":"63","line":102,"column":7,"nodeType":"60","endLine":102,"endColumn":17,"suggestions":"64"},{"ruleId":"49","severity":1,"message":"65","line":9,"column":7,"nodeType":"51","messageId":"52","endLine":9,"endColumn":13},{"ruleId":"58","severity":1,"message":"66","line":105,"column":5,"nodeType":"51","endLine":105,"endColumn":19},{"ruleId":"58","severity":1,"message":"67","line":105,"column":5,"nodeType":"51","endLine":105,"endColumn":19,"suggestions":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'createRef' is defined but never used.","'Card' is defined but never used.","'useGlobalActions' is defined but never used.","'useGlobalState' is defined but never used.","'addCreature' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'creatures'. Either include it or remove the dependency array. You can also do a functional update 'setCreatures(c => ...)' if you only need 'creatures' in the 'setCreatures' call.","ArrayExpression",["71"],"'ReactDom' is defined but never used.","React Hook useEffect has missing dependencies: 'bounds' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["72"],"'bounds' is assigned a value but never used.","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'gaProcessSteps'. Either include it or remove the dependency array.",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [creatures, screenRef]",{"range":"80","text":"81"},"Update the dependencies array to be: [bounds, position, props]",{"range":"82","text":"83"},"Update the dependencies array to be: [gaProcessSteps]",{"range":"84","text":"85"},[2206,2217],"[creatures, screenRef]",[3618,3628],"[bounds, position, props]",[2636,2650],"[gaProcessSteps]"]