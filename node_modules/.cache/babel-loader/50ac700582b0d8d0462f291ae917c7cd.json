{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\experiments\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Creature from \"./creature\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DehazeIcon from \"@material-ui/icons/Dehaze\";\nimport { useGlobalActions, useGlobalState } from \"../../context/globalContext\";\nimport Statisitcs from \"../statistics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Earth = () => {\n  _s();\n\n  const {\n    status\n  } = useGlobalState();\n  const [creatures, setCreatures] = useState([]);\n  const [earthDimensions, setEarthDimensions] = useState(null);\n  const [isStatsVisible, setIsStatsVisible] = useState(false);\n  const earthRef = /*#__PURE__*/createRef();\n  const creaturesRef = useRef([]);\n  useEffect(() => {\n    if (earthRef && earthRef.current && !earthDimensions && status.localeCompare(\"Playing\") === 0) {\n      const handler = e => {\n        if (e.detail) {\n          e.detail.candidates.forEach(() => {\n            addNewCreature({\n              color: \"#FF0000\"\n            });\n          });\n        }\n      };\n\n      earthRef.current.addEventListener(\"birth\", handler);\n      return () => {\n        var _earthRef$current;\n\n        return earthRef === null || earthRef === void 0 ? void 0 : (_earthRef$current = earthRef.current) === null || _earthRef$current === void 0 ? void 0 : _earthRef$current.removeEventListener(\"birth\", handler);\n      };\n    }\n  }, [earthRef, earthRef.current]);\n\n  function addNewCreature(props) {\n    const creaturesTemp = creaturesRef.current;\n    creaturesTemp.push({\n      uid: uuidv4(),\n      color: (props === null || props === void 0 ? void 0 : props.color) ? props.color : \"#000000\"\n    });\n    setCreatures([...creaturesTemp]);\n    creaturesRef.current = creaturesTemp;\n  }\n\n  function removeRandom() {\n    const creaturesTemp = creaturesRef.current;\n    creaturesTemp.splice(Math.floor(Math.random() * creaturesRef.current.length), 1);\n    setCreatures([...creaturesTemp]);\n    creaturesRef.current = creaturesTemp;\n  }\n\n  useEffect(() => {\n    if (earthRef && earthRef.current && !earthDimensions) {\n      setEarthDimensions({\n        top: earthRef.current.offsetTop,\n        left: earthRef.current.offsetLeft,\n        w: earthRef.current.offsetWidth,\n        h: earthRef.current.offsetHeight\n      });\n\n      for (var i = 0; i < 20; i++) {\n        addNewCreature({\n          color: \"#111111\"\n        });\n      }\n    }\n  }, [earthRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: earthRef,\n    style: {\n      backgroundColor: \"#2C931D\",\n      height: \"100%\",\n      width: \"100%\"\n    },\n    onMouseDown: e => {\n      // console.log(onClick);\n      e.preventDefault();\n\n      if (e.button === 0) {\n        addNewCreature({\n          color: \"#004CFF\"\n        });\n        console.log(\"tap\", creaturesRef.current);\n      } else {\n        removeRandom();\n      }\n    },\n    children: [earthRef && earthDimensions ? creatures.map(creature => {\n      return /*#__PURE__*/_jsxDEV(Creature, {\n        color: creature.color,\n        uid: creature.uid,\n        earthRef: earthRef,\n        dim: earthDimensions\n      }, creature.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this);\n    }) : null, isStatsVisible === false ? /*#__PURE__*/_jsxDEV(IconButton, {\n      style: {\n        position: \"absolute\",\n        top: 5,\n        left: 5\n      },\n      onClick: e => {\n        e.preventDefault();\n        setIsStatsVisible(true);\n      },\n      children: /*#__PURE__*/_jsxDEV(DehazeIcon, {\n        style: {\n          color: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Statisitcs, {\n      setIsStatsVisible: setIsStatsVisible,\n      style: {\n        position: \"absolute\",\n        top: 5,\n        left: 5\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Earth, \"on9wz2+OYaOV8IkGuMEebfNgDPw=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = Earth;\nexport default Earth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Earth\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/experiments/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","v4","uuidv4","Creature","IconButton","DehazeIcon","useGlobalActions","useGlobalState","Statisitcs","demo","Array","from","keys","Earth","status","creatures","setCreatures","earthDimensions","setEarthDimensions","isStatsVisible","setIsStatsVisible","earthRef","creaturesRef","current","localeCompare","handler","e","detail","candidates","forEach","addNewCreature","color","addEventListener","removeEventListener","props","creaturesTemp","push","uid","removeRandom","splice","Math","floor","random","length","top","offsetTop","left","offsetLeft","w","offsetWidth","h","offsetHeight","i","backgroundColor","height","width","preventDefault","button","console","log","map","creature","position"],"mappings":"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","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Creature from \"./creature\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DehazeIcon from \"@material-ui/icons/Dehaze\";\r\nimport { useGlobalActions, useGlobalState } from \"../../context/globalContext\";\r\nimport Statisitcs from \"../statistics\";\r\n\r\nconst demo = Array.from(Array(20).keys());\r\n\r\nconst Earth = () => {\r\n  const { status } = useGlobalState();\r\n  const [creatures, setCreatures] = useState([]);\r\n  const [earthDimensions, setEarthDimensions] = useState(null);\r\n  const [isStatsVisible, setIsStatsVisible] = useState(false);\r\n  const earthRef = createRef();\r\n  const creaturesRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      earthRef &&\r\n      earthRef.current &&\r\n      !earthDimensions &&\r\n      status.localeCompare(\"Playing\") === 0\r\n    ) {\r\n      const handler = (e) => {\r\n        if (e.detail) {\r\n          e.detail.candidates.forEach(() => {\r\n            addNewCreature({ color: \"#FF0000\" });\r\n          });\r\n        }\r\n      };\r\n      earthRef.current.addEventListener(\"birth\", handler);\r\n      return () => earthRef?.current?.removeEventListener(\"birth\", handler);\r\n    }\r\n  }, [earthRef, earthRef.current]);\r\n\r\n  function addNewCreature(props) {\r\n    const creaturesTemp = creaturesRef.current;\r\n    creaturesTemp.push({\r\n      uid: uuidv4(),\r\n      color: props?.color ? props.color : \"#000000\",\r\n    });\r\n    setCreatures([...creaturesTemp]);\r\n    creaturesRef.current = creaturesTemp;\r\n  }\r\n\r\n  function removeRandom() {\r\n    const creaturesTemp = creaturesRef.current;\r\n    creaturesTemp.splice(\r\n      Math.floor(Math.random() * creaturesRef.current.length),\r\n      1\r\n    );\r\n    setCreatures([...creaturesTemp]);\r\n    creaturesRef.current = creaturesTemp;\r\n  }\r\n  useEffect(() => {\r\n    if (earthRef && earthRef.current && !earthDimensions) {\r\n      setEarthDimensions({\r\n        top: earthRef.current.offsetTop,\r\n        left: earthRef.current.offsetLeft,\r\n        w: earthRef.current.offsetWidth,\r\n        h: earthRef.current.offsetHeight,\r\n      });\r\n      for (var i = 0; i < 20; i++) {\r\n        addNewCreature({ color: \"#111111\" });\r\n      }\r\n    }\r\n  }, [earthRef]);\r\n  return (\r\n    <div\r\n      ref={earthRef}\r\n      style={{ backgroundColor: \"#2C931D\", height: \"100%\", width: \"100%\" }}\r\n      onMouseDown={(e) => {\r\n        // console.log(onClick);\r\n        e.preventDefault();\r\n        if (e.button === 0) {\r\n          addNewCreature({ color: \"#004CFF\" });\r\n          console.log(\"tap\", creaturesRef.current);\r\n        } else {\r\n          removeRandom();\r\n        }\r\n      }}\r\n    >\r\n      {earthRef && earthDimensions\r\n        ? creatures.map((creature) => {\r\n            return (\r\n              <Creature\r\n                color={creature.color}\r\n                key={creature.uid}\r\n                uid={creature.uid}\r\n                earthRef={earthRef}\r\n                dim={earthDimensions}\r\n              ></Creature>\r\n            );\r\n          })\r\n        : null}\r\n      {isStatsVisible === false ? (\r\n        <IconButton\r\n          style={{ position: \"absolute\", top: 5, left: 5 }}\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            setIsStatsVisible(true);\r\n          }}\r\n        >\r\n          <DehazeIcon style={{ color: \"white\" }}></DehazeIcon>\r\n        </IconButton>\r\n      ) : (\r\n        <Statisitcs\r\n          setIsStatsVisible={setIsStatsVisible}\r\n          style={{ position: \"absolute\", top: 5, left: 5 }}\r\n        ></Statisitcs>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n"]},"metadata":{},"sourceType":"module"}