{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\naruto\\\\src\\\\components\\\\home.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport \"./home.css\";\nimport ReactTooltip from \"react-tooltip\"; // This is a simplified example of an org chart with a depth of 2.\n// Note how deeper levels are defined recursively via the `children` property.\n\nimport treeData from \"./data/tree\";\nimport { Col, Container, Row, Card, Button } from \"react-bootstrap\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport { BsFillGrid3X3GapFill, BsList, BsX } from \"react-icons/bs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Preferences = props => {\n  _s();\n\n  const [isPreferencesVis, setIsPreferencesOn] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      right: 0,\n      top: 0,\n      margin: 12,\n      // height: \"40vh\",\n      // width: \"20vw\",\n      position: \"absolute\",\n      display: \"block\" // backgroundColor: \"white\",\n\n    },\n    children: isPreferencesVis ? /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        margin: 8,\n        height: \"30vh\",\n        width: \"15vw\",\n        backgroundColor: \"white\"\n      } //   onMouseOut={() => {\n      //     setIsPreferencesOn(false);\n      //   }}\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        style: {},\n        children: /*#__PURE__*/_jsxDEV(BsX, {\n          style: {\n            float: \"right\"\n          },\n          onClick: () => {\n            setIsPreferencesOn(false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(BsList, {\n      onClick: () => {\n        setIsPreferencesOn(true);\n      },\n      style: {\n        margin: 8,\n        color: \"white\",\n        fontSize: 20\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Preferences, \"L2Mlc8ARbfJ17wwyK2lwCIn4VBo=\");\n\n_c = Preferences;\n\nconst Tooltip = props => {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      left: 0,\n      bottom: 0,\n      margin: 12,\n      height: \"60vh\",\n      width: \"15vw\",\n      position: \"absolute\",\n      display: \"block\",\n      backgroundColor: \"white\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Tooltip;\nexport default function OrgChartTree() {\n  _s2();\n\n  const treeRef = useRef(null);\n  const [translation, setTranslation] = useState({\n    x: 0,\n    y: 0\n  });\n  const [depth, setDepth] = useState(0);\n  const [scaleExtent, setScaleExtent] = useState({\n    min: 0.1,\n    max: 1\n  });\n  const [tooltip, setTooltip] = useState({});\n  const [isToolTipVis, setIsToolTipVis] = useState(false);\n  const [disappearingToolTip, setDisappearingToolTip] = useState(true);\n  useEffect(() => {\n    console.log(treeRef);\n    setTranslation({\n      y: Math.floor(treeRef.current.clientHeight / 2),\n      x: Math.floor(treeRef.current.clientWidth / 2)\n    });\n  }, [treeRef]);\n  useEffect(() => {\n    console.log(depth);\n\n    if (depth > 0) {\n      var temp_y = translation.y;\n      temp_y = Math.floor(temp_y - temp_y / 7);\n      setTranslation({\n        x: translation.x,\n        y: temp_y\n      });\n      var temp_max = scaleExtent.max;\n      temp_max = temp_max - 0.08;\n      setScaleExtent({\n        min: scaleExtent.min,\n        max: temp_max\n      });\n    }\n  }, [depth]);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(\"div\", {\n      id: \"treeWrapper\",\n      ref: treeRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        padding: 0,\n        margin: 0,\n        backgroundColor: \"black\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Preferences, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this), disappearingToolTip ? isToolTipVis ? /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this) : null : /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tree, {\n        data: treeData,\n        enableLegacyTransitions: true,\n        orientation: \"vertical\",\n        transitionDuration: 500,\n        rootNodeClassName: \"node__root\",\n        branchNodeClassName: \"node__branch\",\n        leafNodeClassName: \"node__leaf\",\n        initialDepth: 0,\n        translate: translation,\n        collapsible: true,\n        zoomable: true,\n        zoom: 1,\n        scaleExtent: scaleExtent,\n        separation: {\n          siblings: 1,\n          nonSiblings: 1\n        },\n        shouldCollapseNeighborNodes: false,\n        onNodeClick: (...args) => {\n          console.log(args);\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\n        },\n        onNodeMouseOver: (...args) => {\n          if (isToolTipVis === false) {\n            setIsToolTipVis(true);\n          }\n        },\n        onNodeMouseOut: (...args) => {\n          setIsToolTipVis(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s2(OrgChartTree, \"H59FMMDFNjoO/HoBCeSKEVeXSaQ=\");\n\n_c3 = OrgChartTree;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Preferences\");\n$RefreshReg$(_c2, \"Tooltip\");\n$RefreshReg$(_c3, \"OrgChartTree\");","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","useRef","useEffect","useState","Tree","ReactTooltip","treeData","Col","Container","Row","Card","Button","Switch","BsFillGrid3X3GapFill","BsList","BsX","Preferences","props","isPreferencesVis","setIsPreferencesOn","right","top","margin","position","display","height","width","backgroundColor","float","color","fontSize","Tooltip","left","bottom","OrgChartTree","treeRef","translation","setTranslation","x","y","depth","setDepth","scaleExtent","setScaleExtent","min","max","tooltip","setTooltip","isToolTipVis","setIsToolTipVis","disappearingToolTip","setDisappearingToolTip","console","log","Math","floor","current","clientHeight","clientWidth","temp_y","temp_max","padding","siblings","nonSiblings","args","__rd3t"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport \"./home.css\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n// This is a simplified example of an org chart with a depth of 2.\r\n// Note how deeper levels are defined recursively via the `children` property.\r\nimport treeData from \"./data/tree\";\r\nimport { Col, Container, Row, Card, Button } from \"react-bootstrap\";\r\nimport Switch from \"react-bootstrap/esm/Switch\";\r\nimport { BsFillGrid3X3GapFill, BsList, BsX } from \"react-icons/bs\";\r\nconst Preferences = (props) => {\r\n  const [isPreferencesVis, setIsPreferencesOn] = useState(false);\r\n  return (\r\n    <div\r\n      style={{\r\n        right: 0,\r\n        top: 0,\r\n        margin: 12,\r\n        // height: \"40vh\",\r\n        // width: \"20vw\",\r\n        position: \"absolute\",\r\n        display: \"block\",\r\n        // backgroundColor: \"white\",\r\n      }}\r\n    >\r\n      {isPreferencesVis ? (\r\n        <Card\r\n          style={{\r\n            margin: 8,\r\n            height: \"30vh\",\r\n            width: \"15vw\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n          //   onMouseOut={() => {\r\n          //     setIsPreferencesOn(false);\r\n          //   }}\r\n        >\r\n          <header style={{}}>\r\n            <BsX\r\n              style={{ float: \"right\" }}\r\n              onClick={() => {\r\n                setIsPreferencesOn(false);\r\n              }}\r\n            ></BsX>\r\n          </header>\r\n          <Switch></Switch>\r\n        </Card>\r\n      ) : (\r\n        <BsList\r\n          onClick={() => {\r\n            setIsPreferencesOn(true);\r\n          }}\r\n          style={{\r\n            margin: 8,\r\n            color: \"white\",\r\n            fontSize: 20,\r\n          }}\r\n        ></BsList>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst Tooltip = (props) => {\r\n  return (\r\n    <Card\r\n      style={{\r\n        left: 0,\r\n        bottom: 0,\r\n        margin: 12,\r\n        height: \"60vh\",\r\n        width: \"15vw\",\r\n        position: \"absolute\",\r\n        display: \"block\",\r\n        backgroundColor: \"white\",\r\n      }}\r\n    ></Card>\r\n  );\r\n};\r\nexport default function OrgChartTree() {\r\n  const treeRef = useRef(null);\r\n  const [translation, setTranslation] = useState({ x: 0, y: 0 });\r\n  const [depth, setDepth] = useState(0);\r\n  const [scaleExtent, setScaleExtent] = useState({ min: 0.1, max: 1 });\r\n  const [tooltip, setTooltip] = useState({});\r\n  const [isToolTipVis, setIsToolTipVis] = useState(false);\r\n  const [disappearingToolTip, setDisappearingToolTip] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log(treeRef);\r\n    setTranslation({\r\n      y: Math.floor(treeRef.current.clientHeight / 2),\r\n      x: Math.floor(treeRef.current.clientWidth / 2),\r\n    });\r\n  }, [treeRef]);\r\n\r\n  useEffect(() => {\r\n    console.log(depth);\r\n    if (depth > 0) {\r\n      var temp_y = translation.y;\r\n      temp_y = Math.floor(temp_y - temp_y / 7);\r\n      setTranslation({ x: translation.x, y: temp_y });\r\n\r\n      var temp_max = scaleExtent.max;\r\n      temp_max = temp_max - 0.08;\r\n      setScaleExtent({ min: scaleExtent.min, max: temp_max });\r\n    }\r\n  }, [depth]);\r\n  return (\r\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n    <div\r\n      id=\"treeWrapper\"\r\n      ref={treeRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        padding: 0,\r\n        margin: 0,\r\n\r\n        backgroundColor: \"black\",\r\n      }}\r\n    >\r\n      <Preferences></Preferences>\r\n      {disappearingToolTip ? (\r\n        isToolTipVis ? (\r\n          <Tooltip></Tooltip>\r\n        ) : null\r\n      ) : (\r\n        <Tooltip></Tooltip>\r\n      )}\r\n      <Tree\r\n        data={treeData}\r\n        enableLegacyTransitions={true}\r\n        orientation=\"vertical\"\r\n        transitionDuration={500}\r\n        rootNodeClassName=\"node__root\"\r\n        branchNodeClassName=\"node__branch\"\r\n        leafNodeClassName=\"node__leaf\"\r\n        initialDepth={0}\r\n        translate={translation}\r\n        collapsible={true}\r\n        zoomable={true}\r\n        zoom={1}\r\n        scaleExtent={scaleExtent}\r\n        separation={{ siblings: 1, nonSiblings: 1 }}\r\n        shouldCollapseNeighborNodes={false}\r\n        onNodeClick={(...args) => {\r\n          console.log(args);\r\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\r\n        }}\r\n        onNodeMouseOver={(...args) => {\r\n          if (isToolTipVis === false) {\r\n            setIsToolTipVis(true);\r\n          }\r\n        }}\r\n        onNodeMouseOut={(...args) => {\r\n          setIsToolTipVis(false);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}