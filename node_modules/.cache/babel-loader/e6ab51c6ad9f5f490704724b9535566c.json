{"ast":null,"code":"import { Vector } from \"../core/vector\";\nexport function plagueInfectionToNeighbours(creatures) {\n  let n = creatures.current.length;\n\n  for (let i = 0; i < n; i++) {\n    const observer = creatures.current[i];\n\n    if (observer.isInfected) {\n      for (let j = 0; j < n; j++) {\n        const target = creatures.current[j];\n\n        if (observer.pos.subtr(target.pos).mag() < 20) {\n          target.infect();\n        }\n      }\n    }\n  }\n}\n\nfunction findNearestCalamity(calamities, creature) {\n  const creaturePos = creature.pos;\n  let nearestCalamity = null;\n  let minDist = 100000;\n  calamities.forEach(calamity => {\n    const calamityPos = new Vector(calamity.position.x, calamity.position.y);\n\n    if (minDist > calamityPos.subtr(creaturePos).mag() && calamityPos.subtr(creaturePos).mag() < calamity.size) {\n      minDist = calamityPos.subtr(creaturePos).mag();\n      nearestCalamity = calamity;\n    }\n  });\n  return nearestCalamity;\n}\n\nexport function calamityEffect(creatures, calamities) {\n  if (calamities.current.length > 0) {\n    creatures.current.forEach((creature, index) => {\n      const nearestCalamity = findNearestCalamity(calamities.current, creature);\n\n      if (nearestCalamity) {\n        creatures.current.splice(index, 1); //add different effect for every calamity with different range\n      }\n    });\n  }\n}\n\nfunction plagueInfectionOnMouseClick(creatures, mouse) {\n  const n = creatures.current.length;\n\n  for (let i = 0; i < n; i++) {\n    const observer = creatures.current[i];\n\n    if (observer.pos.subtr(mouse).mag() < 10) {\n      observer.infect();\n    }\n  }\n}\n\nexport function handleCalamityEffect(creatures, calamities, calamityType, mouse, setCalamityPosition) {\n  if (calamityType.localeCompare(\"plague\") === 0) {\n    plagueInfectionOnMouseClick(creatures, mouse);\n  } else if (calamityType.localeCompare(\"none\") !== 0 && calamities.length < 5) {\n    setCalamityPosition({\n      x: mouse.x,\n      y: mouse.y\n    });\n  }\n}","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/gaFunctions/calamityEffect.js"],"names":["Vector","plagueInfectionToNeighbours","creatures","n","current","length","i","observer","isInfected","j","target","pos","subtr","mag","infect","findNearestCalamity","calamities","creature","creaturePos","nearestCalamity","minDist","forEach","calamity","calamityPos","position","x","y","size","calamityEffect","index","splice","plagueInfectionOnMouseClick","mouse","handleCalamityEffect","calamityType","setCalamityPosition","localeCompare"],"mappings":"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","sourcesContent":["import { Vector } from \"../core/vector\";\r\n\r\nexport function plagueInfectionToNeighbours(creatures) {\r\n  let n = creatures.current.length;\r\n  for (let i = 0; i < n; i++) {\r\n    const observer = creatures.current[i];\r\n    if (observer.isInfected) {\r\n      for (let j = 0; j < n; j++) {\r\n        const target = creatures.current[j];\r\n        if (observer.pos.subtr(target.pos).mag() < 20) {\r\n          target.infect();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction findNearestCalamity(calamities, creature) {\r\n  const creaturePos = creature.pos;\r\n  let nearestCalamity = null;\r\n  let minDist = 100000;\r\n  calamities.forEach((calamity) => {\r\n    const calamityPos = new Vector(calamity.position.x, calamity.position.y);\r\n    if (\r\n      minDist > calamityPos.subtr(creaturePos).mag() &&\r\n      calamityPos.subtr(creaturePos).mag() < calamity.size\r\n    ) {\r\n      minDist = calamityPos.subtr(creaturePos).mag();\r\n      nearestCalamity = calamity;\r\n    }\r\n  });\r\n  return nearestCalamity;\r\n}\r\nexport function calamityEffect(creatures, calamities) {\r\n  if (calamities.current.length > 0) {\r\n    creatures.current.forEach((creature, index) => {\r\n      const nearestCalamity = findNearestCalamity(calamities.current, creature);\r\n      if (nearestCalamity) {\r\n        creatures.current.splice(index, 1);\r\n        //add different effect for every calamity with different range\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction plagueInfectionOnMouseClick(creatures, mouse) {\r\n  const n = creatures.current.length;\r\n  for (let i = 0; i < n; i++) {\r\n    const observer = creatures.current[i];\r\n    if (observer.pos.subtr(mouse).mag() < 10) {\r\n      observer.infect();\r\n    }\r\n  }\r\n}\r\n\r\nexport function handleCalamityEffect(\r\n  creatures,\r\n  calamities,\r\n  calamityType,\r\n  mouse,\r\n  setCalamityPosition\r\n) {\r\n  if (calamityType.localeCompare(\"plague\") === 0) {\r\n    plagueInfectionOnMouseClick(creatures, mouse);\r\n  } else if (\r\n    calamityType.localeCompare(\"none\") !== 0 &&\r\n    calamities.length < 5\r\n  ) {\r\n    setCalamityPosition({\r\n      x: mouse.x,\r\n      y: mouse.y,\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}