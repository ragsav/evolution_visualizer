{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\node.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport ReactDom from \"react-dom\";\nimport React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport \"./node.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = props => {\n  _s();\n\n  const bounds = props.bounds;\n  const size = 10;\n  const nodeRef = useRef(null);\n  const [position, setPosition] = useState({\n    x: Math.floor(Math.random() * bounds.w),\n    y: Math.floor(Math.random() * bounds.h)\n  });\n  const [color, setColor] = useState(\"#5EFF00\");\n  useEffect(() => {\n    var timeInterval = setInterval(() => {\n      const pos = [1, -1];\n      const skipX = Math.floor(Math.random() * 50);\n      const skipY = Math.floor(Math.random() * 50);\n      const plusMinusX = Math.floor(Math.random() * 2);\n      const plusMinusY = Math.floor(Math.random() * 2);\n      const newPosition = {\n        x: position.x + pos[plusMinusX] * skipX,\n        y: position.y + pos[plusMinusY] * skipY\n      };\n\n      if (newPosition.x > bounds.w + bounds.l) {\n        newPosition.x = bounds.w;\n      }\n\n      if (newPosition.y > bounds.h + bounds.t) {\n        newPosition.y = bounds.h;\n      }\n\n      if (newPosition.x < bounds.l) {\n        newPosition.x = bounds.l;\n      }\n\n      if (newPosition.y < bounds.t) {\n        newPosition.y = bounds.t;\n      }\n\n      setPosition({ ...newPosition\n      });\n\n      if (true) {\n        var _nodeRef$current$pare;\n\n        const children = (_nodeRef$current$pare = nodeRef.current.parentNode) === null || _nodeRef$current$pare === void 0 ? void 0 : _nodeRef$current$pare.childNodes;\n\n        if (children) {\n          Object.keys(children).forEach(key => {\n            var _children$key;\n\n            if (((_children$key = children[key]) === null || _children$key === void 0 ? void 0 : _children$key.nodeName) === \"DIV\" && Math.abs(children[key].offsetLeft - nodeRef.current.offsetLeft) < 60 && Math.abs(children[key].offsetTop - nodeRef.current.offsetTop) < 60 && children[key].firstChild.id.localeCompare(\"1\") !== 0) {\n              if (Math.random() > 0.97) {\n                setColor(\"#FF0000\");\n                const creatures = props.creatures;\n                creatures.push( /*#__PURE__*/_jsxDEV(Node, {\n                  screenRef: props.screenRef,\n                  setCreatures: props.setCreatures,\n                  creatures: creatures,\n                  bounds: bounds,\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 35\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 33\n                }, this));\n                props.setCreatures([...creatures]);\n              } //do mating here\n\n            }\n          });\n        }\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timeInterval);\n    };\n  }, [position]);\n  useEffect(() => {\n    if (nodeRef && nodeRef.current) {}\n  }, [nodeRef]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    ref: nodeRef,\n    style: {\n      backgroundColor: color,\n      height: size,\n      width: size,\n      top: position.y,\n      left: position.x,\n      position: \"absolute\",\n      borderRadius: size / 2,\n      border: \"none\",\n      transition: \"all 2s ease-in-out\"\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Node, \"gs2zZ6yh+UChAijHDTaIOwWvqK0=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/node.js"],"names":["useEffect","useState","useRef","ReactDom","React","Card","useGlobalActions","useGlobalState","Node","props","bounds","size","nodeRef","position","setPosition","x","Math","floor","random","w","y","h","color","setColor","timeInterval","setInterval","pos","skipX","skipY","plusMinusX","plusMinusY","newPosition","l","t","children","current","parentNode","childNodes","Object","keys","forEach","key","nodeName","abs","offsetLeft","offsetTop","firstChild","id","localeCompare","creatures","push","screenRef","setCreatures","clearInterval","backgroundColor","height","width","top","left","borderRadius","border","transition"],"mappings":"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","sourcesContent":["import { useEffect, useState ,useRef} from \"react\";\r\nimport ReactDom from \"react-dom\"\r\nimport React from \"react\"\r\nimport {Card} from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport \"./node.css\";\r\nconst Node = (props)=>{\r\n\r\n    const bounds = props.bounds;\r\n    const size = 10;\r\n    \r\n    \r\n    const nodeRef = useRef(null);\r\n    const [position, setPosition] = useState({\r\n      x: Math.floor(Math.random() * bounds.w),\r\n      y: Math.floor(Math.random() * bounds.h),\r\n    });\r\n    const [color,setColor] = useState(\"#5EFF00\")\r\n\r\n    \r\n    useEffect(()=>{\r\n        var timeInterval = setInterval(()=>{\r\n            const pos = [1,-1]\r\n            const skipX = Math.floor(Math.random()*50);\r\n            const skipY = Math.floor(Math.random() * 50);\r\n\r\n            const plusMinusX = Math.floor(Math.random()*2);\r\n            const plusMinusY = Math.floor(Math.random() * 2);\r\n\r\n            const newPosition = {\r\n              x: position.x + pos[plusMinusX] * skipX,\r\n              y: position.y + pos[plusMinusY] * skipY,\r\n            };\r\n            if(newPosition.x > bounds.w + bounds.l){\r\n                newPosition.x = bounds.w;\r\n            }\r\n            if (newPosition.y > bounds.h + bounds.t) {\r\n              newPosition.y = bounds.h;\r\n            }\r\n            if (newPosition.x < bounds.l) {\r\n              newPosition.x = bounds.l;\r\n            }\r\n            if (newPosition.y< bounds.t) {\r\n              newPosition.y = bounds.t;\r\n            }\r\n\r\n            \r\n            setPosition({...newPosition});\r\n            if(true){\r\n                const children = nodeRef.current.parentNode?.childNodes;\r\n                if(children){\r\n                    Object.keys(children).forEach((key) => {\r\n                      if (\r\n                        children[key]?.nodeName === \"DIV\" &&\r\n                        Math.abs(\r\n                          children[key].offsetLeft - nodeRef.current.offsetLeft\r\n                        ) < 60 &&\r\n                        Math.abs(\r\n                          children[key].offsetTop - nodeRef.current.offsetTop\r\n                        ) < 60 &&\r\n                        children[key].firstChild.id.localeCompare(\"1\") !== 0\r\n                      ) {\r\n                          if(Math.random()>0.97){\r\n\r\n                            setColor(\"#FF0000\")\r\n                              const creatures = props.creatures;\r\n                              creatures.push(\r\n                                <Node\r\n                                  screenRef={props.screenRef}\r\n                                  setCreatures={props.setCreatures}\r\n                                  creatures={creatures}\r\n                                  bounds={bounds}\r\n                                >\r\n                                  <span></span>\r\n                                </Node>\r\n                              );\r\n                            props.setCreatures([...creatures])\r\n                          }\r\n                        \r\n                        \r\n                        //do mating here\r\n                      }\r\n                    });\r\n                }\r\n                \r\n            }\r\n\r\n        },1000);\r\n        return ()=>{\r\n            clearInterval(timeInterval);\r\n        }\r\n        \r\n    },[position])\r\n\r\n    useEffect(()=>{\r\n        if(nodeRef&&nodeRef.current){\r\n            \r\n        }\r\n    },[nodeRef])\r\n\r\n    \r\n    return (\r\n      <Card\r\n        ref={nodeRef}\r\n        style={{\r\n          backgroundColor: color,\r\n          height: size,\r\n          width: size,\r\n          top: position.y,\r\n          left: position.x,\r\n          position: \"absolute\",\r\n          borderRadius: size / 2,\r\n          border: \"none\",\r\n          transition: \"all 2s ease-in-out\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default Node;"]},"metadata":{},"sourceType":"module"}