{"version":3,"sources":["logo.svg","context/globalContext.js","components/node.js","components/statistics.js","components/screen.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStateContext","React","createContext","undefined","GlobalActionsContext","GlobalContextProvider","children","useState","status","setStatus","speed","setSpeed","Provider","value","useGlobalState","context","useContext","Error","useGlobalActions","Node","props","bounds","nodeRef","useRef","x","Math","floor","random","w","y","h","position","setPosition","color","setColor","useEffect","localeCompare","timeInterval","setInterval","pos","skipX","skipY","plusMinusX","plusMinusY","newPosition","l","t","current","parentNode","childNodes","Object","keys","forEach","key","nodeName","abs","offsetLeft","offsetTop","firstChild","id","uid","creatures","k","uuidv4","push","screenRef","setCreatures","clearInterval","Card","ref","style","backgroundColor","height","width","top","left","borderRadius","size","border","transition","ValueLabelComponent","open","Tooltip","enterTouchDelay","placement","title","Statisitcs","padding","margin","zIndex","ModalHeader","Row","Col","textAlign","IconButton","onClick","e","preventDefault","setIsStatsVisible","fontSize","ButtonGroup","Button","variant","boxShadow","Divider","Grid","container","spacing","item","fontWeight","xs","Slider","min","max","onChange","v","demo","Array","from","Screen","trueRef","setTrueRef","isStatsVisible","prevCreatures","usePrevious","InitializeCreatures","splice","length","i","clientWidth","clientHeight","console","log","index","creaturesTemp","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42d20779.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createRef, useEffect, useState ,useRef} from \"react\";\r\n\r\n\r\n\r\nconst GlobalStateContext = React.createContext(undefined);\r\nconst GlobalActionsContext = React.createContext(undefined);\r\n\r\n\r\n\r\nconst GlobalContextProvider = ({ children }) => {\r\n  \r\n\r\n  const [status,setStatus] = useState(\"Paused\")\r\n  const [speed,setSpeed] = useState(1);\r\n\r\n  return (\r\n    <GlobalStateContext.Provider\r\n      value={{\r\n        status,\r\n        speed\r\n      }}\r\n      \r\n    >\r\n      <GlobalActionsContext.Provider value={{ setStatus ,setSpeed}}>\r\n        {children}\r\n      </GlobalActionsContext.Provider>\r\n    </GlobalStateContext.Provider>\r\n  );\r\n};\r\n\r\nconst useGlobalState = () => {\r\n  const context = React.useContext(GlobalStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      \"useGlobalState error\"\r\n    );\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nconst useGlobalActions = () => {\r\n  const context = React.useContext(GlobalActionsContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      \"useGlobalActions error\"\r\n    );\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\r\n","import { useEffect, useState ,useRef} from \"react\";\r\nimport ReactDom from \"react-dom\"\r\nimport React from \"react\"\r\nimport {Card} from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport \"./node.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nconst Node = (props)=>{\r\n\r\n    const bounds = props.bounds;\r\n    const size = 5;\r\n    \r\n    \r\n    const nodeRef = useRef(null);\r\n    const {status,speed} = useGlobalState();\r\n    const [position, setPosition] = useState({\r\n      x: Math.floor(Math.random() * bounds.w),\r\n      y: Math.floor(Math.random() * bounds.h),\r\n    });\r\n    const [color,setColor] = useState(props.color?props.color:\"#5EFF00\")\r\n\r\n    \r\n    useEffect(()=>{\r\n        if(status.localeCompare(\"Playing\")===0){\r\n            var timeInterval = setInterval(() => {\r\n              const pos = [1, -1];\r\n              const skipX = Math.floor(Math.random() * 100);\r\n              const skipY = Math.floor(Math.random() *100);\r\n\r\n              const plusMinusX = Math.floor(Math.random() * 2);\r\n              const plusMinusY = Math.floor(Math.random() * 2);\r\n\r\n              const newPosition = {\r\n                x: position.x + pos[plusMinusX] * skipX,\r\n                y: position.y + pos[plusMinusY] * skipY,\r\n              };\r\n              if (newPosition.x > bounds.w + bounds.l) {\r\n                newPosition.x = bounds.w;\r\n              }\r\n              if (newPosition.y > bounds.h + bounds.t) {\r\n                newPosition.y = bounds.h;\r\n              }\r\n              if (newPosition.x < bounds.l) {\r\n                newPosition.x = bounds.l;\r\n              }\r\n              if (newPosition.y < bounds.t) {\r\n                newPosition.y = bounds.t;\r\n              }\r\n\r\n              setPosition({ ...newPosition });\r\n              setColor(\"#5EFF00\");\r\n              if (true) {\r\n                const children = nodeRef.current?.parentNode?.childNodes;\r\n                if (children) {\r\n                  Object.keys(children).forEach((key) => {\r\n                    if (\r\n                      children[key]?.nodeName === \"DIV\" &&\r\n                      Math.abs(\r\n                        children[key].offsetLeft - nodeRef.current.offsetLeft\r\n                      ) < 10 &&\r\n                      Math.abs(\r\n                        children[key].offsetTop - nodeRef.current.offsetTop\r\n                      ) < 10 &&\r\n                      children[key].firstChild.id.localeCompare(\r\n                        `${props.uid}+123`\r\n                      ) !== 0\r\n                    ) {\r\n                      if (Math.random() > 0.6) {\r\n                        const creatures = props.creatures;\r\n                        const k = uuidv4();\r\n                        creatures.push(\r\n                          <Node\r\n                            uid={k}\r\n                            key={k}\r\n                            color=\"#FF0000\"\r\n                            screenRef={props.screenRef}\r\n                            setCreatures={props.setCreatures}\r\n                            creatures={creatures}\r\n                            bounds={bounds}\r\n                          >\r\n                            <span key={`${k}+123`} id={`${k}+123`}></span>\r\n                          </Node>\r\n                        );\r\n                        props.setCreatures([...creatures]);\r\n                      }\r\n\r\n                      //do mating here\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            },Math.random()*5000/speed);\r\n            return () => {\r\n              clearInterval(timeInterval);\r\n            };\r\n        }\r\n        \r\n        \r\n    },[position,status,speed])\r\n\r\n    useEffect(()=>{\r\n        if(nodeRef&&nodeRef.current){\r\n            \r\n        }\r\n    },[nodeRef])\r\n\r\n    \r\n    return (\r\n      <Card\r\n        ref={nodeRef}\r\n        style={{\r\n          backgroundColor: color,\r\n          height: size,\r\n          width: size,\r\n          top: position.y,\r\n          left: position.x,\r\n          position: \"absolute\",\r\n          borderRadius: size / 2,\r\n          border: \"none\",\r\n          transition: \"all 1s ease-in-out\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default Node;","import { Row, Card, Col, ButtonGroup } from \"react-bootstrap\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport ModalHeader from \"react-bootstrap/esm/ModalHeader\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n// import Cross from \"@material-ui/icons/Dehaze\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport { Divider } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nfunction ValueLabelComponent(props) {\r\n  const { children, open, value } = props;\r\n\r\n  return (\r\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n      {children}\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nconst Statisitcs = (props) => {\r\n  const { setStatus, setSpeed } = useGlobalActions();\r\n  const { status, speed } = useGlobalState();\r\n\r\n  return (\r\n    <Card\r\n      style={{ padding: 0, margin: 4, top: 4, left: 4, width: 300, zIndex: 10 }}\r\n    >\r\n      <ModalHeader style={{ padding: 0, margin: 0 }}>\r\n        <Row style={{ padding: 4, margin: 0, width: \"100%\" }}>\r\n          <Col style={{ padding: 2, margin: 0, textAlign: \"start\" }}>\r\n            Statisitcs\r\n          </Col>\r\n          <Col\r\n            style={{\r\n              padding: 0,\r\n              margin: 0,\r\n              textAlign: \"end\",\r\n            }}\r\n          >\r\n            <IconButton\r\n              style={{ padding: 0, margin: 0 }}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                props.setIsStatsVisible(false);\r\n              }}\r\n            >\r\n              <ClearIcon fontSize=\"small\"></ClearIcon>\r\n            </IconButton>\r\n          </Col>\r\n        </Row>\r\n      </ModalHeader>\r\n      <Row style={{ margin: 0, padding: 4 }}>\r\n        <ButtonGroup>\r\n          <Button\r\n            variant=\"dark\"\r\n            style={{\r\n              padding: \"2px 8px 2px 8px\",\r\n              boxShadow: \"none\",\r\n              fontSize: 12,\r\n            }}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              status.localeCompare(\"Playing\") === 0\r\n                ? setStatus(\"Paused\")\r\n                : setStatus(\"Playing\");\r\n            }}\r\n          >\r\n            {status.localeCompare(\"Playing\") === 0 ? \"Pause\" : \"Play\"}\r\n          </Button>\r\n          <Button\r\n            //   disabled={status.localeCompare(\"Finished\") === 0}\r\n            variant=\"dark\"\r\n            style={{\r\n              padding: \"2px 8px 2px 8px\",\r\n              boxShadow: \"none\",\r\n\r\n              fontSize: 12,\r\n            }}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              status.localeCompare(\"Finished\") === 0\r\n                ? setStatus(\"Playing\")\r\n                : setStatus(\"Finished\");\r\n            }}\r\n          >\r\n            {status.localeCompare(\"Finished\") === 0\r\n              ? \"Start simulation\"\r\n              : \"Finish\"}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Row>\r\n      <Divider></Divider>\r\n      <Row style={{ margin: 0, padding: \"4px 8px 4px 8px\" }}>\r\n        <Grid container spacing={2}>\r\n          <Grid item style={{ fontSize: 14, fontWeight: \"500\" }}>\r\n            Speed\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Slider\r\n              style={{ boxShadow: \"none\" }}\r\n              ValueLabelComponent={ValueLabelComponent}\r\n              value={speed}\r\n              min={1}\r\n              max={100}\r\n              onChange={(e, v) => {\r\n                e.preventDefault();\r\n                setSpeed(v);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Row>\r\n      <Divider></Divider>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Statisitcs;\r\n","import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DehazeIcon from \"@material-ui/icons/Dehaze\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Statisitcs from \"./statistics\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\n\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const { setStatus } = useGlobalActions();\r\n    const { status } = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n    const [isStatsVisible,setIsStatsVisible] = useState(false);\r\n    const [creatures,setCreatures] = useState([])\r\n  \r\n     const prevCreatures = usePrevious(creatures);\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    function InitializeCreatures()  {\r\n      creatures.splice(0, creatures.length);\r\n      demo.forEach((t, i) => {\r\n        const k = uuidv4();\r\n        \r\n        creatures.push(\r\n          <Node\r\n            screenRef={screenRef}\r\n            uid={k}\r\n            key={k}\r\n            setCreatures={setCreatures}\r\n            creatures={creatures}\r\n            bounds={{\r\n              l: screenRef.current.offsetLeft,\r\n              t: screenRef.current.offsetTop,\r\n              w: screenRef.current.clientWidth,\r\n              h: screenRef.current.clientHeight,\r\n            }}\r\n          >\r\n            <span key={`${k}+123`} id={`${k}+123`}></span>\r\n          </Node>\r\n        );\r\n      });\r\n      setCreatures([...creatures]);\r\n    }\r\n\r\n    useEffect(() => {\r\n      console.log(creatures.length);\r\n\r\n      if (\r\n        status.localeCompare(\"Playing\") === 0 &&\r\n        Math.random() > 0.7 &&\r\n        creatures.length !== prevCreatures.length\r\n      ) {\r\n        const l = creatures.length;\r\n        const index = Math.random() * l;\r\n        const creaturesTemp = [...creatures];\r\n        creaturesTemp.splice(index, 1);\r\n        setCreatures([...creaturesTemp]);\r\n      }\r\n    }, [creatures]);\r\n\r\n    useEffect(() => {\r\n      if (status.localeCompare(\"Finished\") === 0) {\r\n        InitializeCreatures();\r\n      }\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n      if (screenRef) {\r\n        if (screenRef.current) {\r\n          setTrueRef(screenRef.current);\r\n          InitializeCreatures();\r\n        }\r\n      }\r\n    }, [screenRef]);\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        id=\"screen\"\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {isStatsVisible === false ? (\r\n          <IconButton\r\n            style={{ position: \"absolute\", top: 5, left: 5 }}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setIsStatsVisible(true);\r\n            }}\r\n          >\r\n            <DehazeIcon style={{ color: \"white\" }}></DehazeIcon>\r\n          </IconButton>\r\n        ) : (\r\n          <Statisitcs\r\n            setIsStatsVisible = {setIsStatsVisible}\r\n            style={{position: \"absolute\", top: 5, left: 5 }}\r\n          ></Statisitcs>\r\n        )}\r\n        {trueRef ? creatures : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;","import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Screen from './components/screen';\r\nimport { GlobalContextProvider } from './context/globalContext';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalContextProvider>\r\n        <Screen></Screen>\r\n      </GlobalContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}