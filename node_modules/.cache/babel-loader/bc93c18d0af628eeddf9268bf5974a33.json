{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\node.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport ReactDom from \"react-dom\";\nimport React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport \"./node.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = props => {\n  _s();\n\n  const bounds = props.bounds;\n  const size = 5;\n  const nodeRef = useRef(null);\n  const [position, setPosition] = useState({\n    x: Math.floor(Math.random() * bounds.w),\n    y: Math.floor(Math.random() * bounds.h)\n  });\n  const {\n    status\n  } = useGlobalState();\n  const {\n    setStatus\n  } = useGlobalActions();\n  const [color, setColor] = useState(props.color ? props.color : \"#5EFF00\");\n  useEffect(() => {\n    if (status.localeCompare(\"playing\") === 0) {\n      var timeInterval = setInterval(() => {\n        const pos = [1, -1];\n        const skipX = Math.floor(Math.random() * 100);\n        const skipY = Math.floor(Math.random() * 100);\n        const plusMinusX = Math.floor(Math.random() * 2);\n        const plusMinusY = Math.floor(Math.random() * 2);\n        const newPosition = {\n          x: position.x + pos[plusMinusX] * skipX,\n          y: position.y + pos[plusMinusY] * skipY\n        };\n\n        if (newPosition.x > bounds.w + bounds.l) {\n          newPosition.x = bounds.w;\n        }\n\n        if (newPosition.y > bounds.h + bounds.t) {\n          newPosition.y = bounds.h;\n        }\n\n        if (newPosition.x < bounds.l) {\n          newPosition.x = bounds.l;\n        }\n\n        if (newPosition.y < bounds.t) {\n          newPosition.y = bounds.t;\n        }\n\n        setPosition({ ...newPosition\n        });\n        setColor(\"#5EFF00\");\n\n        if (true) {\n          var _nodeRef$current, _nodeRef$current$pare;\n\n          const children = (_nodeRef$current = nodeRef.current) === null || _nodeRef$current === void 0 ? void 0 : (_nodeRef$current$pare = _nodeRef$current.parentNode) === null || _nodeRef$current$pare === void 0 ? void 0 : _nodeRef$current$pare.childNodes;\n\n          if (children) {\n            Object.keys(children).forEach(key => {\n              var _children$key, _children$key2, _children$key3;\n\n              if (((_children$key = children[key]) === null || _children$key === void 0 ? void 0 : _children$key.nodeName) === \"DIV\" && Math.abs(((_children$key2 = children[key]) === null || _children$key2 === void 0 ? void 0 : _children$key2.offsetLeft) - nodeRef.current.offsetLeft) < 10 && Math.abs(((_children$key3 = children[key]) === null || _children$key3 === void 0 ? void 0 : _children$key3.offsetTop) - nodeRef.current.offsetTop) < 10 && children[key].firstChild.id.localeCompare(`${props.uid}+123`) !== 0) {\n                if (Math.random() > 0.7) {\n                  const creatures = props.creatures;\n                  const k = uuidv4();\n                  creatures.push( /*#__PURE__*/_jsxDEV(Node, {\n                    uid: k,\n                    color: \"#FF0000\",\n                    screenRef: props.screenRef,\n                    setCreatures: props.setCreatures,\n                    creatures: creatures,\n                    bounds: bounds,\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      id: `${k}+123`\n                    }, `${k}+123`, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 83,\n                      columnNumber: 29\n                    }, this)\n                  }, k, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 27\n                  }, this));\n                  props.setCreatures([...creatures]);\n                } //do mating here\n\n              }\n            });\n          }\n        }\n      }, 10);\n      return () => {\n        clearInterval(timeInterval);\n      };\n    }\n  }, [position, status]);\n  useEffect(() => {\n    if (nodeRef && nodeRef.current) {}\n  }, [nodeRef]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    ref: nodeRef,\n    style: {\n      backgroundColor: color,\n      height: size,\n      width: size,\n      top: position.y,\n      left: position.x,\n      position: \"absolute\",\n      borderRadius: size / 2,\n      border: \"none\",\n      transition: \"all 1s ease-in-out\"\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Node, \"5AB2vUmdyf2eY/uP1FSBN3abSMw=\", false, function () {\n  return [useGlobalState, useGlobalActions];\n});\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/node.js"],"names":["useEffect","useState","useRef","ReactDom","React","Card","useGlobalActions","useGlobalState","v4","uuidv4","Node","props","bounds","size","nodeRef","position","setPosition","x","Math","floor","random","w","y","h","status","setStatus","color","setColor","localeCompare","timeInterval","setInterval","pos","skipX","skipY","plusMinusX","plusMinusY","newPosition","l","t","children","current","parentNode","childNodes","Object","keys","forEach","key","nodeName","abs","offsetLeft","offsetTop","firstChild","id","uid","creatures","k","push","screenRef","setCreatures","clearInterval","backgroundColor","height","width","top","left","borderRadius","border","transition"],"mappings":"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","sourcesContent":["import { useEffect, useState ,useRef} from \"react\";\r\nimport ReactDom from \"react-dom\"\r\nimport React from \"react\"\r\nimport {Card} from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport \"./node.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nconst Node = (props)=>{\r\n\r\n    const bounds = props.bounds;\r\n    const size = 5;\r\n    \r\n    \r\n    const nodeRef = useRef(null);\r\n    const [position, setPosition] = useState({\r\n      x: Math.floor(Math.random() * bounds.w),\r\n      y: Math.floor(Math.random() * bounds.h),\r\n    });\r\n    const { status } = useGlobalState();\r\n    const { setStatus } = useGlobalActions();\r\n    const [color,setColor] = useState(props.color?props.color:\"#5EFF00\")\r\n\r\n    \r\n    useEffect(()=>{\r\n        if  (status.localeCompare(\"playing\")  ===  0)  {\r\n          \r\n          var timeInterval = setInterval(() => {\r\n              const pos = [1, -1];\r\n              const skipX = Math.floor(Math.random() * 100);\r\n              const skipY = Math.floor(Math.random() * 100);\r\n\r\n              const plusMinusX = Math.floor(Math.random() * 2);\r\n              const plusMinusY = Math.floor(Math.random() * 2);\r\n\r\n              const newPosition = {\r\n                x: position.x + pos[plusMinusX] * skipX,\r\n                y: position.y + pos[plusMinusY] * skipY,\r\n              };\r\n              if (newPosition.x > bounds.w + bounds.l) {\r\n                newPosition.x = bounds.w;\r\n              }\r\n              if (newPosition.y > bounds.h + bounds.t) {\r\n                newPosition.y = bounds.h;\r\n              }\r\n              if (newPosition.x < bounds.l) {\r\n                newPosition.x = bounds.l;\r\n              }\r\n              if (newPosition.y < bounds.t) {\r\n                newPosition.y = bounds.t;\r\n              }\r\n\r\n              setPosition({ ...newPosition });\r\n              setColor(\"#5EFF00\");\r\n              if (true) {\r\n                const children = nodeRef.current?.parentNode?.childNodes;\r\n                if (children) {\r\n                  Object.keys(children).forEach((key) => {\r\n                    if (\r\n                      children[key]?.nodeName === \"DIV\" &&\r\n                      Math.abs(\r\n                        children[key]?.offsetLeft - nodeRef.current.offsetLeft\r\n                      ) < 10 &&\r\n                      Math.abs(\r\n                        children[key]?.offsetTop - nodeRef.current.offsetTop\r\n                      ) < 10 &&\r\n                      children[key].firstChild.id.localeCompare(\r\n                        `${props.uid}+123`\r\n                      ) !== 0\r\n                    ) {\r\n                      if (Math.random() > 0.7) {\r\n                        const creatures = props.creatures;\r\n                        const k = uuidv4();\r\n                        creatures.push(\r\n                          <Node\r\n                            uid={k}\r\n                            key={k}\r\n                            color=\"#FF0000\"\r\n                            screenRef={props.screenRef}\r\n                            setCreatures={props.setCreatures}\r\n                            creatures={creatures}\r\n                            bounds={bounds}\r\n                          >\r\n                            <span key={`${k}+123`} id={`${k}+123`}></span>\r\n                          </Node>\r\n                        );\r\n                        props.setCreatures([...creatures]);\r\n                      }\r\n\r\n                      //do mating here\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            }, 10);\r\n            return () => {\r\n              clearInterval(timeInterval);\r\n            };\r\n        \r\n        }\r\n        \r\n        \r\n    },[position,status])\r\n\r\n    useEffect(()=>{\r\n        if(nodeRef&&nodeRef.current){\r\n            \r\n        }\r\n    },[nodeRef])\r\n\r\n    \r\n    return (\r\n      <Card\r\n        ref={nodeRef}\r\n        style={{\r\n          backgroundColor: color,\r\n          height: size,\r\n          width: size,\r\n          top: position.y,\r\n          left: position.x,\r\n          position: \"absolute\",\r\n          borderRadius: size / 2,\r\n          border: \"none\",\r\n          transition: \"all 1s ease-in-out\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default Node;"]},"metadata":{},"sourceType":"module"}