{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\context\\\\globalContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalStateContext = /*#__PURE__*/React.createContext(undefined);\nconst GlobalActionsContext = /*#__PURE__*/React.createContext(undefined);\n\nfunction ga() {}\n\nconst GlobalContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [creatures, setCreatures] = useState(Array.from(Array(10).keys()));\n  return /*#__PURE__*/_jsxDEV(GlobalStateContext.Provider, {\n    value: {\n      creatures\n    },\n    children: /*#__PURE__*/_jsxDEV(GlobalActionsContext.Provider, {\n      value: {\n        setCreatures\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalContextProvider, \"eOeQi2XRhBgEknk8TbkJ3rFzyDs=\");\n\n_c = GlobalContextProvider;\n\nconst useGlobalState = () => {\n  _s2();\n\n  const context = React.useContext(GlobalStateContext);\n\n  if (context === undefined) {\n    throw new Error(\"useGlobalState error\");\n  }\n\n  return context;\n};\n\n_s2(useGlobalState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nconst useGlobalActions = () => {\n  _s3();\n\n  const context = React.useContext(GlobalActionsContext);\n\n  if (context === undefined) {\n    throw new Error(\"useGlobalActions error\");\n  }\n\n  return context;\n};\n\n_s3(useGlobalActions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/context/globalContext.js"],"names":["React","useEffect","useState","GlobalStateContext","createContext","undefined","GlobalActionsContext","ga","GlobalContextProvider","children","creatures","setCreatures","Array","from","keys","useGlobalState","context","useContext","Error","useGlobalActions"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAIA,MAAMC,kBAAkB,gBAAGH,KAAK,CAACI,aAAN,CAAoBC,SAApB,CAA3B;AACA,MAAMC,oBAAoB,gBAAGN,KAAK,CAACI,aAAN,CAAoBC,SAApB,CAA7B;;AAEA,SAASE,EAAT,GAAa,CAEZ;;AAED,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAU9C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAACU,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAL,CAAUE,IAAV,EAAX,CAAD,CAA1C;AAKA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA;AADK,KADT;AAAA,2BAKE,QAAC,oBAAD,CAAsB,QAAtB;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA;AAAF,OADT;AAAA,gBAGGF;AAHH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA5BD;;GAAMD,qB;;KAAAA,qB;;AA8BN,MAAMO,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,OAAO,GAAGhB,KAAK,CAACiB,UAAN,CAAiBd,kBAAjB,CAAhB;;AACA,MAAIa,OAAO,KAAKX,SAAhB,EAA2B;AACzB,UAAM,IAAIa,KAAJ,CACJ,sBADI,CAAN;AAGD;;AAED,SAAOF,OAAP;AACD,CATD;;IAAMD,c;;AAWN,MAAMI,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAMH,OAAO,GAAGhB,KAAK,CAACiB,UAAN,CAAiBX,oBAAjB,CAAhB;;AACA,MAAIU,OAAO,KAAKX,SAAhB,EAA2B;AACzB,UAAM,IAAIa,KAAJ,CACJ,wBADI,CAAN;AAGD;;AAED,SAAOF,OAAP;AACD,CATD;;IAAMG,gB;;AAWN,SAASJ,cAAT,EAAyBI,gBAAzB,EAA2CX,qBAA3C","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n\n\nconst GlobalStateContext = React.createContext(undefined);\nconst GlobalActionsContext = React.createContext(undefined);\n\nfunction ga(){\n\n}\n\nconst GlobalContextProvider = ({ children }) => {\n  \n\n  \n\n  \n\n  \n\n  \n  const [creatures, setCreatures] = useState(Array.from(Array(10).keys()));\n  \n\n\n\n  return (\n    <GlobalStateContext.Provider\n      value={{\n        creatures\n      }}\n    >\n      <GlobalActionsContext.Provider\n        value={{ setCreatures }}\n      >\n        {children}\n      </GlobalActionsContext.Provider>\n    </GlobalStateContext.Provider>\n  );\n};\n\nconst useGlobalState = () => {\n  const context = React.useContext(GlobalStateContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalState error\"\n    );\n  }\n\n  return context;\n};\n\nconst useGlobalActions = () => {\n  const context = React.useContext(GlobalActionsContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalActions error\"\n    );\n  }\n\n  return context;\n};\n\nexport { useGlobalState, useGlobalActions, GlobalContextProvider };\n"]},"metadata":{},"sourceType":"module"}