{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Screen = () => {\n  _s();\n\n  const {\n    ground\n  } = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n      }\n    }\n  }, [screenRef]);\n  useEffect(() => {// setCreaturesData([...creatures])\n    // console.log(creatures);\n  }, [ground]); // useEffect(()=>{\n  //     console.log(creaturesData);\n  // },[creaturesData])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? ground.map((m, index) => {\n      return /*#__PURE__*/_jsxDEV(Node, {\n        id: index,\n        current: creatures[index].current //   bounds={{\n        //     l: screenRef.current.offsetLeft,\n        //     t: screenRef.current.offsetTop,\n        //     w: screenRef.current.clientWidth,\n        //     h: screenRef.current.clientHeight,\n        //   }}\n\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"CW/30PfRpTKAZ1dmq6RMBOhe5tU=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","useGlobalActions","useGlobalState","Node","Screen","ground","trueRef","setTrueRef","screenRef","current","height","width","backgroundColor","map","m","index","creatures"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,0BAAjD;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,MAAM,GAAG,MAAI;AAAA;;AAGf,QAAM;AAACC,IAAAA;AAAD,MAAWH,cAAc,EAA/B;AACA,QAAM,CAACI,OAAD,EAASC,UAAT,IAAuBR,QAAQ,CAAC,IAAD,CAArC;AACA,QAAMS,SAAS,GAAGV,MAAM,CAAC,IAAD,CAAxB;AAaAD,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGW,SAAH,EAAa;AACT,UAAGA,SAAS,CAACC,OAAb,EAAqB;AACjBF,QAAAA,UAAU,CAACC,SAAS,CAACC,OAAX,CAAV;AACH;AACJ;AACJ,GANQ,EAMP,CAACD,SAAD,CANO,CAAT;AASAX,EAAAA,SAAS,CAAC,MAAI,CAEV;AACA;AACH,GAJQ,EAIP,CAACQ,MAAD,CAJO,CAAT,CA3Be,CAiCf;AACA;AACA;;AAKA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KADT;AAEE,IAAA,GAAG,EAAEJ,SAFP;AAAA,cAIIF,OAAD,GACGD,MAAM,CAACQ,GAAP,CAAW,CAACC,CAAD,EAAGC,KAAH,KAAa;AACtB,0BAEE,QAAC,IAAD;AAGI,QAAA,EAAE,EAAEA,KAHR;AAKI,QAAA,OAAO,EAAIC,SAAS,CAACD,KAAD,CAAT,CAAiBN,OALhC,CAMA;AACA;AACA;AACA;AACA;AACA;;AAXA,SAEUM,KAFV;AAAA;AAAA;AAAA;AAAA,cAFF;AAkBD,KAnBD,CADH,GAqBG;AAzBN;AAAA;AAAA;AAAA;AAAA,UADF;AA6BH,CArED;;GAAMX,M;UAGeF,c;;;KAHfE,M;AAuEN,eAAeA,MAAf","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\n\r\nconst Screen = ()=>{\r\n\r\n    \r\n    const {ground} = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n  \r\n    \r\n\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n   \r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n\r\n    useEffect(()=>{\r\n        \r\n        // setCreaturesData([...creatures])\r\n        // console.log(creatures);\r\n    },[ground])\r\n\r\n    // useEffect(()=>{\r\n    //     console.log(creaturesData);\r\n    // },[creaturesData])\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {(trueRef)\r\n          ? ground.map((m,index) => {\r\n              return (\r\n                \r\n                <Node\r\n                    \r\n                    key ={index}\r\n                    id={index}\r\n                    \r\n                    current = {creatures[index].current}\r\n                //   bounds={{\r\n                //     l: screenRef.current.offsetLeft,\r\n                //     t: screenRef.current.offsetTop,\r\n                //     w: screenRef.current.clientWidth,\r\n                //     h: screenRef.current.clientHeight,\r\n                //   }}\r\n                >\r\n                  {/* <span key={index} id={index}></span> */}\r\n                </Node>:null)\r\n              \r\n            })\r\n          : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}