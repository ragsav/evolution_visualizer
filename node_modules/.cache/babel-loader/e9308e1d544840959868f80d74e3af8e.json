{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\node.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = props => {\n  _s();\n\n  const bounds = props.bounds;\n  const size = 10;\n  const [position, setPosition] = useState({\n    x: Math.floor(Math.random() * bounds.w) - size / 2,\n    y: Math.floor(Math.random() * bounds.h) - size / 2\n  });\n  useEffect(() => {\n    var timeInterval = setInterval(() => {\n      const pos = [1, -1];\n      const skipX = Math.floor(Math.random() * 3);\n      const skipY = Math.floor(Math.random() * 3);\n      const plusMinusX = Math.floor(Math.random() * 2);\n      const plusMinusY = Math.floor(Math.random() * 2);\n      const newPosition = {\n        x: position.x + pos[plusMinusX] * skipX,\n        y: position.y + pos[plusMinusY] * skipY\n      };\n      setPosition({ ...newPosition\n      });\n    }, 100);\n    return () => {\n      clearInterval(timeInterval);\n    };\n  }, [position]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      backgroundColor: \"#34FF3B\",\n      height: size,\n      width: size,\n      top: position.y,\n      left: position.x,\n      position: \"absolute\",\n      borderRadius: size / 2,\n      border: \"none\"\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Node, \"HMwH9NaCyajMGb2FHS1vOJc+yIg=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/node.js"],"names":["useEffect","useState","Card","Node","props","bounds","size","position","setPosition","x","Math","floor","random","w","y","h","timeInterval","setInterval","pos","skipX","skipY","plusMinusX","plusMinusY","newPosition","clearInterval","backgroundColor","height","width","top","left","borderRadius","border","children"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAQC,IAAR,QAAmB,iBAAnB;;;AACA,MAAMC,IAAI,GAAIC,KAAD,IAAS;AAAA;;AAElB,QAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,MAAM,CAACQ,CAAlC,IAAqCP,IAAI,GAAC,CADN;AAEvCQ,IAAAA,CAAC,EAAEJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,MAAM,CAACU,CAAlC,IAAqCT,IAAI,GAAC;AAFN,GAAD,CAAxC;AAKAN,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIgB,YAAY,GAAGC,WAAW,CAAC,MAAI;AAC/B,YAAMC,GAAG,GAAG,CAAC,CAAD,EAAG,CAAC,CAAJ,CAAZ;AACA,YAAMC,KAAK,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAAd;AACA,YAAMQ,KAAK,GAAGV,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAd;AAEA,YAAMS,UAAU,GAAGX,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAAnB;AACA,YAAMU,UAAU,GAAGZ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAnB;AAEA,YAAMW,WAAW,GAAG;AAClBd,QAAAA,CAAC,EAAEF,QAAQ,CAACE,CAAT,GAAaS,GAAG,CAACG,UAAD,CAAH,GAAkBF,KADhB;AAElBL,QAAAA,CAAC,EAAEP,QAAQ,CAACO,CAAT,GAAaI,GAAG,CAACI,UAAD,CAAH,GAAkBF;AAFhB,OAApB;AAKAZ,MAAAA,WAAW,CAAC,EAAC,GAAGe;AAAJ,OAAD,CAAX;AAEH,KAf6B,EAe5B,GAf4B,CAA9B;AAgBA,WAAO,MAAI;AACPC,MAAAA,aAAa,CAACR,YAAD,CAAb;AACH,KAFD;AAIH,GArBQ,EAqBP,CAACT,QAAD,CArBO,CAAT;AAsBA,sBACE,QAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLkB,MAAAA,eAAe,EAAE,SADZ;AAELC,MAAAA,MAAM,EAAEpB,IAFH;AAGLqB,MAAAA,KAAK,EAAErB,IAHF;AAILsB,MAAAA,GAAG,EAACrB,QAAQ,CAACO,CAJR;AAKLe,MAAAA,IAAI,EAACtB,QAAQ,CAACE,CALT;AAMLF,MAAAA,QAAQ,EAAC,UANJ;AAOLuB,MAAAA,YAAY,EAAExB,IAAI,GAAC,CAPd;AAQLyB,MAAAA,MAAM,EAAE;AARH,KADT;AAAA,cAYG3B,KAAK,CAAC4B;AAZT;AAAA;AAAA;AAAA;AAAA,UADF;AAgBH,CA/CD;;GAAM7B,I;;KAAAA,I;AAiDN,eAAeA,IAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport {Card} from \"react-bootstrap\";\r\nconst Node = (props)=>{\r\n\r\n    const bounds = props.bounds;\r\n    const size = 10;\r\n    const [position, setPosition] = useState({\r\n      x: Math.floor(Math.random() * bounds.w)-size/2,\r\n      y: Math.floor(Math.random() * bounds.h)-size/2,\r\n    });\r\n\r\n    useEffect(()=>{\r\n        var timeInterval = setInterval(()=>{\r\n            const pos = [1,-1]\r\n            const skipX = Math.floor(Math.random()*3);\r\n            const skipY = Math.floor(Math.random() * 3);\r\n\r\n            const plusMinusX = Math.floor(Math.random()*2);\r\n            const plusMinusY = Math.floor(Math.random() * 2);\r\n\r\n            const newPosition = {\r\n              x: position.x + pos[plusMinusX] * skipX,\r\n              y: position.y + pos[plusMinusY] * skipY,\r\n            };\r\n\r\n            setPosition({...newPosition});\r\n\r\n        },100);\r\n        return ()=>{\r\n            clearInterval(timeInterval);\r\n        }\r\n        \r\n    },[position])\r\n    return (\r\n      <Card\r\n        style={{\r\n          backgroundColor: \"#34FF3B\",\r\n          height: size,\r\n          width: size,\r\n          top:position.y,\r\n          left:position.x,\r\n          position:\"absolute\",\r\n          borderRadius: size/2,\r\n          border: \"none\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default Node;"]},"metadata":{},"sourceType":"module"}