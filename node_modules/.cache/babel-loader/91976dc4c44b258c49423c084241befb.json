{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Screen = () => {\n  _s();\n\n  // const {ground} = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n      }\n    }\n  }, [screenRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? demo.map((k, i) => {\n      return /*#__PURE__*/_jsxDEV(Node, {\n        screenRef: screenRef,\n        uid: i,\n        bounds: {\n          l: screenRef.current.offsetLeft,\n          t: screenRef.current.offsetTop,\n          w: screenRef.current.clientWidth,\n          h: screenRef.current.clientHeight\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: i\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, `k-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"8GGVdTneNwk3m6XWm9MR+4tzWYs=\");\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","useGlobalActions","useGlobalState","Node","demo","Array","from","keys","Screen","trueRef","setTrueRef","screenRef","current","height","width","backgroundColor","map","k","i","l","offsetLeft","t","offsetTop","w","clientWidth","h","clientHeight"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,0BAAjD;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAL,CAAUE,IAAV,EAAX,CAAb;;AACA,MAAMC,MAAM,GAAG,MAAI;AAAA;;AAGf;AACA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBX,QAAQ,CAAC,IAAD,CAArC;AACA,QAAMY,SAAS,GAAGb,MAAM,CAAC,IAAD,CAAxB;AAaAD,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGc,SAAH,EAAa;AACT,UAAGA,SAAS,CAACC,OAAb,EAAqB;AACjBF,QAAAA,UAAU,CAACC,SAAS,CAACC,OAAX,CAAV;AACH;AACJ;AACJ,GANQ,EAMP,CAACD,SAAD,CANO,CAAT;AAgBA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KADT;AAEE,IAAA,GAAG,EAAEJ,SAFP;AAAA,cAIGF,OAAO,GACJL,IAAI,CAACY,GAAL,CAAS,CAACC,CAAD,EAAGC,CAAH,KAAO;AACZ,0BACE,QAAC,IAAD;AACE,QAAA,SAAS,EAAIP,SADf;AAEE,QAAA,GAAG,EAAEO,CAFP;AAIE,QAAA,MAAM,EAAE;AACNC,UAAAA,CAAC,EAAER,SAAS,CAACC,OAAV,CAAkBQ,UADf;AAENC,UAAAA,CAAC,EAAEV,SAAS,CAACC,OAAV,CAAkBU,SAFf;AAGNC,UAAAA,CAAC,EAAEZ,SAAS,CAACC,OAAV,CAAkBY,WAHf;AAINC,UAAAA,CAAC,EAAEd,SAAS,CAACC,OAAV,CAAkBc;AAJf,SAJV;AAAA,+BAWE;AAAc,UAAA,EAAE,EAAER;AAAlB,WAAWA,CAAX;AAAA;AAAA;AAAA;AAAA;AAXF,SAGQ,KAAIA,CAAE,EAHd;AAAA;AAAA;AAAA;AAAA,cADF;AAeH,KAhBD,CADI,GAmBJ;AAvBN;AAAA;AAAA;AAAA;AAAA,UADF;AA2BH,CA7DD;;GAAMV,M;;KAAAA,M;AA+DN,eAAeA,MAAf","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n  \r\n    \r\n\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n   \r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {trueRef ? (\r\n            demo.map((k,i)=>{\r\n                return (\r\n                  <Node\r\n                    screenRef = {screenRef}\r\n                    uid={i}\r\n                    key={`k-${i}`}\r\n                    bounds={{\r\n                      l: screenRef.current.offsetLeft,\r\n                      t: screenRef.current.offsetTop,\r\n                      w: screenRef.current.clientWidth,\r\n                      h: screenRef.current.clientHeight,\r\n                    }}\r\n                  >\r\n                    <span key={i} id={i}></span>\r\n                  </Node>\r\n                );\r\n            })\r\n          \r\n        ) : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}