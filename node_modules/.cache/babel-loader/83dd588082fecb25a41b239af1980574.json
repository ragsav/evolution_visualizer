{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\naruto\\\\src\\\\components\\\\home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport \"./home.css\";\nimport ReactTooltip from \"react-tooltip\"; // This is a simplified example of an org chart with a depth of 2.\n// Note how deeper levels are defined recursively via the `children` property.\n\nimport treeData from \"./data/tree\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tooltip = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      left: 0,\n      top: 0,\n      margin: 4,\n      height: \"40vh\",\n      width: \"20vw\",\n      position: \"absolute\",\n      display: \"block\",\n      backgroundColor: \"white\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Tooltip;\nexport default function OrgChartTree() {\n  _s();\n\n  const treeRef = useRef(null);\n  const [translation, setTranslation] = useState({\n    x: 0,\n    y: 0\n  });\n  const [depth, setDepth] = useState(0);\n  const [scaleExtent, setScaleExtent] = useState({\n    min: 0.1,\n    max: 1\n  });\n  const [tooltip, setTooltip] = useState({});\n  const [isToolTipVis, setIsToolTipVis] = useState(false);\n  useEffect(() => {\n    console.log(treeRef);\n    setTranslation({\n      y: Math.floor(treeRef.current.clientHeight / 2),\n      x: Math.floor(treeRef.current.clientWidth / 2)\n    });\n  }, [treeRef]);\n  useEffect(() => {\n    console.log(depth);\n\n    if (depth > 0) {\n      var temp_y = translation.y;\n      temp_y = Math.floor(temp_y - temp_y / 7);\n      setTranslation({\n        x: translation.x,\n        y: temp_y\n      });\n      var temp_max = scaleExtent.max;\n      temp_max = temp_max - 0.08;\n      setScaleExtent({\n        min: scaleExtent.min,\n        max: temp_max\n      });\n    }\n  }, [depth]);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(\"div\", {\n      id: \"treeWrapper\",\n      ref: treeRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        padding: 0,\n        margin: 0,\n        backgroundColor: \"black\",\n        zIndex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Tree, {\n        data: treeData,\n        enableLegacyTransitions: true,\n        orientation: \"vertical\",\n        transitionDuration: 500,\n        rootNodeClassName: \"node__root\",\n        branchNodeClassName: \"node__branch\",\n        leafNodeClassName: \"node__leaf\",\n        initialDepth: 0,\n        translate: translation,\n        collapsible: true,\n        zoomable: true,\n        zoom: 3,\n        scaleExtent: scaleExtent,\n        separation: {\n          siblings: 1,\n          nonSiblings: 1\n        },\n        shouldCollapseNeighborNodes: false,\n        onNodeClick: (...args) => {\n          console.log(args);\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\n        },\n        onNodeClick: (...args) => {\n          console.log(\"onNodeMouseOver\", args);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(OrgChartTree, \"WeY4MX2eYQ5f6+qysN2AGsGLIMc=\");\n\n_c2 = OrgChartTree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tooltip\");\n$RefreshReg$(_c2, \"OrgChartTree\");","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","useRef","useEffect","useState","Tree","ReactTooltip","treeData","Col","Container","Row","Tooltip","props","left","top","margin","height","width","position","display","backgroundColor","OrgChartTree","treeRef","translation","setTranslation","x","y","depth","setDepth","scaleExtent","setScaleExtent","min","max","tooltip","setTooltip","isToolTipVis","setIsToolTipVis","console","log","Math","floor","current","clientHeight","clientWidth","temp_y","temp_max","padding","zIndex","siblings","nonSiblings","args","__rd3t"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport \"./home.css\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n// This is a simplified example of an org chart with a depth of 2.\r\n// Note how deeper levels are defined recursively via the `children` property.\r\nimport treeData from \"./data/tree\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\nconst Tooltip = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        left: 0,\r\n        top: 0,\r\n        margin: 4,\r\n        height: \"40vh\",\r\n        width: \"20vw\",\r\n        position: \"absolute\",\r\n        display: \"block\",\r\n        backgroundColor: \"white\",\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\nexport default function OrgChartTree() {\r\n  const treeRef = useRef(null);\r\n  const [translation, setTranslation] = useState({ x: 0, y: 0 });\r\n  const [depth, setDepth] = useState(0);\r\n  const [scaleExtent, setScaleExtent] = useState({ min: 0.1, max: 1 });\r\n  const [tooltip, setTooltip] = useState({});\r\n  const [isToolTipVis, setIsToolTipVis] = useState(false);\r\n  useEffect(() => {\r\n    console.log(treeRef);\r\n    setTranslation({\r\n      y: Math.floor(treeRef.current.clientHeight / 2),\r\n      x: Math.floor(treeRef.current.clientWidth / 2),\r\n    });\r\n  }, [treeRef]);\r\n\r\n  useEffect(() => {\r\n    console.log(depth);\r\n    if (depth > 0) {\r\n      var temp_y = translation.y;\r\n      temp_y = Math.floor(temp_y - temp_y / 7);\r\n      setTranslation({ x: translation.x, y: temp_y });\r\n\r\n      var temp_max = scaleExtent.max;\r\n      temp_max = temp_max - 0.08;\r\n      setScaleExtent({ min: scaleExtent.min, max: temp_max });\r\n    }\r\n  }, [depth]);\r\n  return (\r\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n    <div\r\n      id=\"treeWrapper\"\r\n      ref={treeRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        padding: 0,\r\n        margin: 0,\r\n\r\n        backgroundColor: \"black\",\r\n\r\n        zIndex: 1,\r\n      }}\r\n    >\r\n      <Tooltip></Tooltip>\r\n      <Tree\r\n        data={treeData}\r\n        enableLegacyTransitions={true}\r\n        orientation=\"vertical\"\r\n        transitionDuration={500}\r\n        rootNodeClassName=\"node__root\"\r\n        branchNodeClassName=\"node__branch\"\r\n        leafNodeClassName=\"node__leaf\"\r\n        initialDepth={0}\r\n        translate={translation}\r\n        collapsible={true}\r\n        zoomable={true}\r\n        zoom={3}\r\n        scaleExtent={scaleExtent}\r\n        separation={{ siblings: 1, nonSiblings: 1 }}\r\n        shouldCollapseNeighborNodes={false}\r\n        onNodeClick={(...args) => {\r\n          console.log(args);\r\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\r\n        }}\r\n        onNodeClick={(...args) => {\r\n          console.log(\"onNodeMouseOver\", args);\r\n        }}\r\n      />\r\n      {/* <Row style={{ width: \"100%\", height: \"100%\", padding: 0, margin: 0 }}>\r\n        <Col\r\n          md={{ span: 2 }}\r\n          lg={{ span: 2 }}\r\n          xl={{ span: 2 }}\r\n          className=\"d-none d-md-block\"\r\n          style={{\r\n            height: \"100%\",\r\n\r\n            padding: 0,\r\n            margin: 0,\r\n            backgroundColor: \"white\",\r\n          }}\r\n        ></Col>\r\n        <Col\r\n          xs={{ span: 12 }}\r\n          sm={{ span: 12 }}\r\n          md={{ span: 10 }}\r\n          lg={{ span: 10 }}\r\n          xl={{ span: 10 }}\r\n          style={{ height: \"100%\", padding: 0, margin: 0 }}\r\n          ref={treeRef}\r\n        >\r\n          <Tree\r\n            data={treeData}\r\n            enableLegacyTransitions={true}\r\n            orientation=\"vertical\"\r\n            transitionDuration={500}\r\n            rootNodeClassName=\"node__root\"\r\n            branchNodeClassName=\"node__branch\"\r\n            leafNodeClassName=\"node__leaf\"\r\n            initialDepth={0}\r\n            translate={translation}\r\n            collapsible={true}\r\n            zoomable={true}\r\n            zoom={3}\r\n            scaleExtent={scaleExtent}\r\n            separation={{ siblings: 1, nonSiblings: 1 }}\r\n            shouldCollapseNeighborNodes={false}\r\n            onNodeClick={(...args) => {\r\n              console.log(args);\r\n              if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\r\n            }}\r\n            onNodeClick={(...args) => {\r\n              console.log(\"onNodeMouseOver\", args);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row> */}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}