{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction usePrevious(value) {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nconst demo = Array.from(Array(20).keys());\n\nconst Screen = () => {\n  _s2();\n\n  // const {ground} = useGlobalState();\n  const {\n    setStatus\n  } = useGlobalActions();\n  const {\n    status\n  } = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  const [creatures, setCreatures] = useState([]);\n  const prevCreatures = usePrevious(creatures);\n\n  function InitializeCreatures() {\n    demo.forEach((t, i) => {\n      const k = uuidv4();\n      creatures.push( /*#__PURE__*/_jsxDEV(Node, {\n        screenRef: screenRef,\n        uid: k,\n        setCreatures: setCreatures,\n        creatures: creatures,\n        bounds: {\n          l: screenRef.current.offsetLeft,\n          t: screenRef.current.offsetTop,\n          w: screenRef.current.clientWidth,\n          h: screenRef.current.clientHeight\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: `${k}+123`\n        }, `${k}+123`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, k, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this));\n    });\n    setCreatures([...creatures]);\n  }\n\n  useEffect(() => {\n    console.log(creatures.length);\n\n    if (status.localeCompare(\"Playing\") === 0 && Math.random() > 0.7 && creatures.length !== prevCreatures.length) {\n      const l = creatures.length;\n      const index = Math.random() * l;\n      const creaturesTemp = [...creatures];\n      creaturesTemp.splice(index, 1);\n      setCreatures([...creaturesTemp]);\n    }\n  }, [creatures]);\n  useEffect(() => {\n    if (status.localeCompare(\"Finished\") === 0) {\n      InitializeCreatures();\n    }\n  }, [status]);\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n        InitializeCreatures();\n      }\n    }\n  }, [screenRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"screen\",\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? creatures : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 7\n  }, this);\n};\n\n_s2(Screen, \"iT7opV3yEg13GDZJ6ckd1tYI77o=\", false, function () {\n  return [useGlobalActions, useGlobalState, usePrevious];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Button","Card","useGlobalActions","useGlobalState","Node","v4","uuidv4","usePrevious","value","ref","current","demo","Array","from","keys","Screen","setStatus","status","trueRef","setTrueRef","screenRef","creatures","setCreatures","prevCreatures","InitializeCreatures","forEach","t","i","k","push","l","offsetLeft","offsetTop","w","clientWidth","h","clientHeight","console","log","length","localeCompare","Math","random","index","creaturesTemp","splice","height","width","backgroundColor"],"mappings":"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","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\n\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const { setStatus } = useGlobalActions();\r\n    const { status } = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n    const [creatures,setCreatures] = useState([])\r\n  \r\n     const prevCreatures = usePrevious(creatures);\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    function InitializeCreatures()  {\r\n      demo.forEach((t, i) => {\r\n        const k = uuidv4();\r\n        creatures.push(\r\n          <Node\r\n            screenRef={screenRef}\r\n            uid={k}\r\n            key={k}\r\n            setCreatures={setCreatures}\r\n            creatures={creatures}\r\n            bounds={{\r\n              l: screenRef.current.offsetLeft,\r\n              t: screenRef.current.offsetTop,\r\n              w: screenRef.current.clientWidth,\r\n              h: screenRef.current.clientHeight,\r\n            }}\r\n          >\r\n            <span key={`${k}+123`} id={`${k}+123`}></span>\r\n          </Node>\r\n        );\r\n      });\r\n      setCreatures([...creatures]);\r\n    }\r\n\r\n    useEffect(() => {\r\n      console.log(creatures.length);\r\n\r\n      if (\r\n        status.localeCompare(\"Playing\") === 0 &&\r\n        Math.random() > 0.7 &&\r\n        creatures.length !== prevCreatures.length\r\n      ) {\r\n        const l = creatures.length;\r\n        const index = Math.random() * l;\r\n        const creaturesTemp = [...creatures];\r\n        creaturesTemp.splice(index, 1);\r\n        setCreatures([...creaturesTemp]);\r\n      }\r\n    }, [creatures]);\r\n\r\n    useEffect(() => {\r\n      if (status.localeCompare(\"Finished\") === 0) {\r\n        InitializeCreatures();\r\n      }\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n      if (screenRef) {\r\n        if (screenRef.current) {\r\n          setTrueRef(screenRef.current);\r\n          InitializeCreatures();\r\n        }\r\n      }\r\n    }, [screenRef]);\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        id=\"screen\"\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {trueRef ? creatures : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}