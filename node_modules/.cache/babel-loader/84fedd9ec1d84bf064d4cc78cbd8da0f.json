{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Screen = () => {\n  _s();\n\n  // const {ground} = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n      }\n    }\n  }, [screenRef]); // useEffect(()=>{\n  //     console.log(creaturesData);\n  // },[creaturesData])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? /*#__PURE__*/_jsxDEV(Node // key ={index}\n    // id={index}\n    , {\n      bounds: {\n        l: screenRef.current.offsetLeft,\n        t: screenRef.current.offsetTop,\n        w: screenRef.current.clientWidth,\n        h: screenRef.current.clientHeight\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"8GGVdTneNwk3m6XWm9MR+4tzWYs=\");\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","useGlobalActions","useGlobalState","Node","Screen","trueRef","setTrueRef","screenRef","current","height","width","backgroundColor","l","offsetLeft","t","offsetTop","w","clientWidth","h","clientHeight"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,0BAAjD;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,MAAM,GAAG,MAAI;AAAA;;AAGf;AACA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBP,QAAQ,CAAC,IAAD,CAArC;AACA,QAAMQ,SAAS,GAAGT,MAAM,CAAC,IAAD,CAAxB;AAaAD,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGU,SAAH,EAAa;AACT,UAAGA,SAAS,CAACC,OAAb,EAAqB;AACjBF,QAAAA,UAAU,CAACC,SAAS,CAACC,OAAX,CAAV;AACH;AACJ;AACJ,GANQ,EAMP,CAACD,SAAD,CANO,CAAT,CAlBe,CA6Bf;AACA;AACA;;AAKA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KADT;AAEE,IAAA,GAAG,EAAEJ,SAFP;AAAA,cAIIF,OAAD,gBACG,QAAC,IAAD,CAEQ;AACA;AAHR;AAMM,MAAA,MAAM,EAAE;AACNO,QAAAA,CAAC,EAAEL,SAAS,CAACC,OAAV,CAAkBK,UADf;AAENC,QAAAA,CAAC,EAAEP,SAAS,CAACC,OAAV,CAAkBO,SAFf;AAGNC,QAAAA,CAAC,EAAET,SAAS,CAACC,OAAV,CAAkBS,WAHf;AAINC,QAAAA,CAAC,EAAEX,SAAS,CAACC,OAAV,CAAkBW;AAJf;AANd;AAAA;AAAA;AAAA;AAAA,YADH,GAee;AAnBlB;AAAA;AAAA;AAAA;AAAA,UADF;AAuBH,CA3DD;;GAAMf,M;;KAAAA,M;AA6DN,eAAeA,MAAf","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\n\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n  \r\n    \r\n\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n   \r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n\r\n    \r\n\r\n    // useEffect(()=>{\r\n    //     console.log(creaturesData);\r\n    // },[creaturesData])\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {(trueRef)\r\n          ? <Node\r\n                    \r\n                    // key ={index}\r\n                    // id={index}\r\n                    \r\n                    \r\n                  bounds={{\r\n                    l: screenRef.current.offsetLeft,\r\n                    t: screenRef.current.offsetTop,\r\n                    w: screenRef.current.clientWidth,\r\n                    h: screenRef.current.clientHeight,\r\n                  }}\r\n                >\r\n                  {/* <span key={index} id={index}></span> */}\r\n                </Node>:null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}