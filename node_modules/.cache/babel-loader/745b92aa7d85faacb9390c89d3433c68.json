{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\naruto\\\\src\\\\components\\\\home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport \"./home.css\"; // This is a simplified example of an org chart with a depth of 2.\n// Note how deeper levels are defined recursively via the `children` property.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst orgChart = {\n  name: \"Foreman\",\n  attributes: {\n    department: \"Assembly\"\n  },\n  children: [{\n    name: \"Foreman\",\n    attributes: {\n      department: \"Assembly\"\n    },\n    children: [{\n      name: \"Foreman\",\n      attributes: {\n        department: \"Assembly\"\n      },\n      children: [{\n        name: \"Foreman\",\n        attributes: {\n          department: \"Assembly\"\n        },\n        children: [{\n          name: \"Foreman\",\n          attributes: {\n            department: \"Assembly\"\n          },\n          children: [{\n            name: \"Foreman\",\n            attributes: {\n              department: \"Assembly\"\n            },\n            children: [{\n              name: \"Foreman\",\n              attributes: {\n                department: \"Assembly\"\n              },\n              children: [{\n                name: \"Foreman\",\n                attributes: {\n                  department: \"Assembly\"\n                },\n                children: [{\n                  name: \"Worker\"\n                }]\n              }]\n            }]\n          }]\n        }]\n      }]\n    }]\n  }]\n};\nexport default function OrgChartTree() {\n  _s();\n\n  const treeRef = useRef(null);\n  const [translation, setTranslation] = useState({\n    x: 0,\n    y: 0\n  });\n  const [depth, setDepth] = useState(0);\n  const [scaleExtent, setScaleExtent] = useState({\n    min: 0.1,\n    max: 1\n  });\n  useEffect(() => {\n    // console.log(treeRef);\n    setTranslation({\n      y: Math.floor(treeRef.current.clientHeight / 2),\n      x: Math.floor(treeRef.current.clientWidth / 2)\n    });\n  }, [treeRef]);\n  useEffect(() => {\n    console.log(depth);\n\n    if (depth > 0) {\n      var temp_y = translation.y;\n      temp_y = Math.floor(temp_y - temp_y / 7);\n      setTranslation({\n        x: translation.x,\n        y: temp_y\n      });\n      var temp_max = scaleExtent.max;\n      temp_max = temp_max - 0.1;\n      setScaleExtent({\n        min: scaleExtent.min,\n        max: temp_max\n      });\n    }\n  }, [depth]);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(\"div\", {\n      id: \"treeWrapper\",\n      ref: treeRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"black\",\n        top: \"50%\",\n        left: \"50%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        data: orgChart,\n        enableLegacyTransitions: true,\n        orientation: \"vertical\",\n        transitionDuration: 500,\n        rootNodeClassName: \"node__root\",\n        branchNodeClassName: \"node__branch\",\n        leafNodeClassName: \"node__leaf\",\n        initialDepth: 0,\n        translate: translation,\n        collapsible: true,\n        zoomable: true,\n        zoom: 3,\n        scaleExtent: scaleExtent,\n        separation: {\n          siblings: 2,\n          nonSiblings: 2\n        },\n        shouldCollapseNeighborNodes: false,\n        onNodeClick: (...args) => {\n          console.log(args);\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\n        },\n        styles: {\n          nodes: {\n            node: {\n              circle: {\n                fill: \"#52e2c5\"\n              },\n              attributes: {\n                stroke: \"#000\"\n              }\n            },\n            leafNode: {\n              circle: {\n                fill: \"transparent\"\n              },\n              attributes: {\n                stroke: \"#000\"\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(OrgChartTree, \"YT1Ews/ko6fwf0BMxPDWGgyevTM=\");\n\n_c = OrgChartTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrgChartTree\");","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","useRef","useEffect","useState","Tree","orgChart","name","attributes","department","children","OrgChartTree","treeRef","translation","setTranslation","x","y","depth","setDepth","scaleExtent","setScaleExtent","min","max","Math","floor","current","clientHeight","clientWidth","console","log","temp_y","temp_max","width","height","backgroundColor","top","left","siblings","nonSiblings","args","__rd3t","nodes","node","circle","fill","stroke","leafNode"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport \"./home.css\";\r\n// This is a simplified example of an org chart with a depth of 2.\r\n// Note how deeper levels are defined recursively via the `children` property.\r\nconst orgChart = {\r\n  name: \"Foreman\",\r\n  attributes: {\r\n    department: \"Assembly\",\r\n  },\r\n  children: [\r\n    {\r\n      name: \"Foreman\",\r\n      attributes: {\r\n        department: \"Assembly\",\r\n      },\r\n      children: [\r\n        {\r\n          name: \"Foreman\",\r\n          attributes: {\r\n            department: \"Assembly\",\r\n          },\r\n          children: [\r\n            {\r\n              name: \"Foreman\",\r\n              attributes: {\r\n                department: \"Assembly\",\r\n              },\r\n              children: [\r\n                {\r\n                  name: \"Foreman\",\r\n                  attributes: {\r\n                    department: \"Assembly\",\r\n                  },\r\n                  children: [\r\n                    {\r\n                      name: \"Foreman\",\r\n                      attributes: {\r\n                        department: \"Assembly\",\r\n                      },\r\n                      children: [\r\n                        {\r\n                          name: \"Foreman\",\r\n                          attributes: {\r\n                            department: \"Assembly\",\r\n                          },\r\n                          children: [\r\n                            {\r\n                              name: \"Foreman\",\r\n                              attributes: {\r\n                                department: \"Assembly\",\r\n                              },\r\n                              children: [\r\n                                {\r\n                                  name: \"Worker\",\r\n                                },\r\n                              ],\r\n                            },\r\n                          ],\r\n                        },\r\n                      ],\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default function OrgChartTree() {\r\n  const treeRef = useRef(null);\r\n  const [translation, setTranslation] = useState({ x: 0, y: 0 });\r\n  const [depth, setDepth] = useState(0);\r\n  const [scaleExtent, setScaleExtent] = useState({ min: 0.1, max: 1 });\r\n  useEffect(() => {\r\n    // console.log(treeRef);\r\n    setTranslation({\r\n      y: Math.floor(treeRef.current.clientHeight / 2),\r\n      x: Math.floor(treeRef.current.clientWidth / 2),\r\n    });\r\n  }, [treeRef]);\r\n\r\n  useEffect(() => {\r\n    console.log(depth);\r\n    if (depth > 0) {\r\n      var temp_y = translation.y;\r\n      temp_y = Math.floor(temp_y - temp_y / 7);\r\n      setTranslation({ x: translation.x, y: temp_y });\r\n\r\n      var temp_max = scaleExtent.max;\r\n      temp_max = temp_max - 0.1;\r\n      setScaleExtent({ min: scaleExtent.min, max: temp_max });\r\n    }\r\n  }, [depth]);\r\n  return (\r\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n    <div\r\n      id=\"treeWrapper\"\r\n      ref={treeRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        backgroundColor: \"black\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n      }}\r\n    >\r\n      <Tree\r\n        data={orgChart}\r\n        enableLegacyTransitions={true}\r\n        orientation=\"vertical\"\r\n        transitionDuration={500}\r\n        rootNodeClassName=\"node__root\"\r\n        branchNodeClassName=\"node__branch\"\r\n        leafNodeClassName=\"node__leaf\"\r\n        initialDepth={0}\r\n        translate={translation}\r\n        collapsible={true}\r\n        zoomable={true}\r\n        zoom={3}\r\n        scaleExtent={scaleExtent}\r\n        separation={{ siblings: 2, nonSiblings: 2 }}\r\n        shouldCollapseNeighborNodes={false}\r\n        onNodeClick={(...args) => {\r\n          console.log(args);\r\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\r\n        }}\r\n        styles={{\r\n          nodes: {\r\n            node: {\r\n              circle: {\r\n                fill: \"#52e2c5\",\r\n              },\r\n              attributes: {\r\n                stroke: \"#000\",\r\n              },\r\n            },\r\n            leafNode: {\r\n              circle: {\r\n                fill: \"transparent\",\r\n              },\r\n              attributes: {\r\n                stroke: \"#000\",\r\n              },\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}