{"ast":null,"code":"import _pt from \"prop-types\";\nimport React from 'react';\nimport cx from 'classnames';\nimport { Group } from '@visx/group';\nimport { partition as d3partition } from 'd3-hierarchy';\nimport DefaultNode from '../HierarchyDefaultRectNode';\nexport default function Partition(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      root = _ref.root,\n      size = _ref.size,\n      round = _ref.round,\n      padding = _ref.padding,\n      children = _ref.children,\n      _ref$nodeComponent = _ref.nodeComponent,\n      nodeComponent = _ref$nodeComponent === void 0 ? DefaultNode : _ref$nodeComponent;\n  var partition = d3partition();\n  if (size) partition.size(size);\n  if (round) partition.round(round);\n  if (padding) partition.padding(padding);\n  var data = partition(root);\n  if (children) return /*#__PURE__*/React.createElement(React.Fragment, null, children(data));\n  return /*#__PURE__*/React.createElement(Group, {\n    top: top,\n    left: left,\n    className: cx('visx-partition', className)\n  }, nodeComponent && data.descendants().map(function (node, i) {\n    return /*#__PURE__*/React.createElement(Group, {\n      key: \"partition-node-\" + i\n    }, /*#__PURE__*/React.createElement(nodeComponent, {\n      node: node\n    }));\n  }));\n}\nPartition.propTypes = {\n  children: _pt.func,\n  top: _pt.number,\n  left: _pt.number,\n  className: _pt.string,\n  round: _pt.bool,\n  padding: _pt.number\n};","map":{"version":3,"sources":["E:/projects/Fun/naruto/node_modules/@visx/hierarchy/esm/hierarchies/Partition.js"],"names":["_pt","React","cx","Group","partition","d3partition","DefaultNode","Partition","_ref","top","left","className","root","size","round","padding","children","_ref$nodeComponent","nodeComponent","data","createElement","Fragment","descendants","map","node","i","key","propTypes","func","number","string","bool"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,SAAS,IAAIC,WAAtB,QAAyC,cAAzC;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,eAAe,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACtC,MAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAAA,MAGIC,IAAI,GAAGJ,IAAI,CAACI,IAHhB;AAAA,MAIIC,IAAI,GAAGL,IAAI,CAACK,IAJhB;AAAA,MAKIC,KAAK,GAAGN,IAAI,CAACM,KALjB;AAAA,MAMIC,OAAO,GAAGP,IAAI,CAACO,OANnB;AAAA,MAOIC,QAAQ,GAAGR,IAAI,CAACQ,QAPpB;AAAA,MAQIC,kBAAkB,GAAGT,IAAI,CAACU,aAR9B;AAAA,MASIA,aAAa,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgCX,WAAhC,GAA8CW,kBATlE;AAUA,MAAIb,SAAS,GAAGC,WAAW,EAA3B;AACA,MAAIQ,IAAJ,EAAUT,SAAS,CAACS,IAAV,CAAeA,IAAf;AACV,MAAIC,KAAJ,EAAWV,SAAS,CAACU,KAAV,CAAgBA,KAAhB;AACX,MAAIC,OAAJ,EAAaX,SAAS,CAACW,OAAV,CAAkBA,OAAlB;AACb,MAAII,IAAI,GAAGf,SAAS,CAACQ,IAAD,CAApB;AACA,MAAII,QAAJ,EAAc,OAAO,aAAaf,KAAK,CAACmB,aAAN,CAAoBnB,KAAK,CAACoB,QAA1B,EAAoC,IAApC,EAA0CL,QAAQ,CAACG,IAAD,CAAlD,CAApB;AACd,SAAO,aAAalB,KAAK,CAACmB,aAAN,CAAoBjB,KAApB,EAA2B;AAC7CM,IAAAA,GAAG,EAAEA,GADwC;AAE7CC,IAAAA,IAAI,EAAEA,IAFuC;AAG7CC,IAAAA,SAAS,EAAET,EAAE,CAAC,gBAAD,EAAmBS,SAAnB;AAHgC,GAA3B,EAIjBO,aAAa,IAAIC,IAAI,CAACG,WAAL,GAAmBC,GAAnB,CAAuB,UAAUC,IAAV,EAAgBC,CAAhB,EAAmB;AAC5D,WAAO,aAAaxB,KAAK,CAACmB,aAAN,CAAoBjB,KAApB,EAA2B;AAC7CuB,MAAAA,GAAG,EAAE,oBAAoBD;AADoB,KAA3B,EAEjB,aAAaxB,KAAK,CAACmB,aAAN,CAAoBF,aAApB,EAAmC;AACjDM,MAAAA,IAAI,EAAEA;AAD2C,KAAnC,CAFI,CAApB;AAKD,GANmB,CAJA,CAApB;AAWD;AACDjB,SAAS,CAACoB,SAAV,GAAsB;AACpBX,EAAAA,QAAQ,EAAEhB,GAAG,CAAC4B,IADM;AAEpBnB,EAAAA,GAAG,EAAET,GAAG,CAAC6B,MAFW;AAGpBnB,EAAAA,IAAI,EAAEV,GAAG,CAAC6B,MAHU;AAIpBlB,EAAAA,SAAS,EAAEX,GAAG,CAAC8B,MAJK;AAKpBhB,EAAAA,KAAK,EAAEd,GAAG,CAAC+B,IALS;AAMpBhB,EAAAA,OAAO,EAAEf,GAAG,CAAC6B;AANO,CAAtB","sourcesContent":["import _pt from \"prop-types\";\nimport React from 'react';\nimport cx from 'classnames';\nimport { Group } from '@visx/group';\nimport { partition as d3partition } from 'd3-hierarchy';\nimport DefaultNode from '../HierarchyDefaultRectNode';\nexport default function Partition(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      root = _ref.root,\n      size = _ref.size,\n      round = _ref.round,\n      padding = _ref.padding,\n      children = _ref.children,\n      _ref$nodeComponent = _ref.nodeComponent,\n      nodeComponent = _ref$nodeComponent === void 0 ? DefaultNode : _ref$nodeComponent;\n  var partition = d3partition();\n  if (size) partition.size(size);\n  if (round) partition.round(round);\n  if (padding) partition.padding(padding);\n  var data = partition(root);\n  if (children) return /*#__PURE__*/React.createElement(React.Fragment, null, children(data));\n  return /*#__PURE__*/React.createElement(Group, {\n    top: top,\n    left: left,\n    className: cx('visx-partition', className)\n  }, nodeComponent && data.descendants().map(function (node, i) {\n    return /*#__PURE__*/React.createElement(Group, {\n      key: \"partition-node-\" + i\n    }, /*#__PURE__*/React.createElement(nodeComponent, {\n      node: node\n    }));\n  }));\n}\nPartition.propTypes = {\n  children: _pt.func,\n  top: _pt.number,\n  left: _pt.number,\n  className: _pt.string,\n  round: _pt.bool,\n  padding: _pt.number\n};"]},"metadata":{},"sourceType":"module"}