{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Screen = () => {\n  _s();\n\n  // const {ground} = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  const [creatures, setCreatures] = useState([]);\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n        demo.forEach((k, i) => {\n          creatures.push( /*#__PURE__*/_jsxDEV(Node, {\n            screenRef: screenRef,\n            uid: i,\n            bounds: {\n              l: screenRef.current.offsetLeft,\n              t: screenRef.current.offsetTop,\n              w: screenRef.current.clientWidth,\n              h: screenRef.current.clientHeight\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              id: i\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 23\n            }, this)\n          }, `k-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }, this));\n        });\n        setCreatures([...creatures]);\n      }\n    }\n  }, [screenRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"screen\",\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: trueRef ? {\n      creatures\n    } : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"XzmimEOAwLCjPv1Fq1y/vetQ2Z4=\");\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","useGlobalActions","useGlobalState","Node","demo","Array","from","keys","Screen","trueRef","setTrueRef","screenRef","creatures","setCreatures","current","forEach","k","i","push","l","offsetLeft","t","offsetTop","w","clientWidth","h","clientHeight","height","width","backgroundColor"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,0BAAjD;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAL,CAAUE,IAAV,EAAX,CAAb;;AACA,MAAMC,MAAM,GAAG,MAAI;AAAA;;AAGf;AACA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBX,QAAQ,CAAC,IAAD,CAArC;AACA,QAAMY,SAAS,GAAGb,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAM,CAACc,SAAD,EAAWC,YAAX,IAA2Bd,QAAQ,CAAC,EAAD,CAAzC;AAaAF,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGc,SAAH,EAAa;AACT,UAAGA,SAAS,CAACG,OAAb,EAAqB;AACjBJ,QAAAA,UAAU,CAACC,SAAS,CAACG,OAAX,CAAV;AACAV,QAAAA,IAAI,CAACW,OAAL,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrBL,UAAAA,SAAS,CAACM,IAAV,eACE,QAAC,IAAD;AACE,YAAA,SAAS,EAAEP,SADb;AAEE,YAAA,GAAG,EAAEM,CAFP;AAIE,YAAA,MAAM,EAAE;AACNE,cAAAA,CAAC,EAAER,SAAS,CAACG,OAAV,CAAkBM,UADf;AAENC,cAAAA,CAAC,EAAEV,SAAS,CAACG,OAAV,CAAkBQ,SAFf;AAGNC,cAAAA,CAAC,EAAEZ,SAAS,CAACG,OAAV,CAAkBU,WAHf;AAINC,cAAAA,CAAC,EAAEd,SAAS,CAACG,OAAV,CAAkBY;AAJf,aAJV;AAAA,mCAWE;AAAc,cAAA,EAAE,EAAET;AAAlB,eAAWA,CAAX;AAAA;AAAA;AAAA;AAAA;AAXF,aAGQ,KAAIA,CAAE,EAHd;AAAA;AAAA;AAAA;AAAA,kBADF;AAeD,SAhBD;AAiBAJ,QAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,CAAD,CAAZ;AACH;AACJ;AACJ,GAxBQ,EAwBP,CAACD,SAAD,CAxBO,CAAT;AAkCA,sBACE;AACA,IAAA,EAAE,EAAC,QADH;AAEE,IAAA,KAAK,EAAE;AAAEgB,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KAFT;AAGE,IAAA,GAAG,EAAElB,SAHP;AAAA,cAKGF,OAAO,GAAG;AAACG,MAAAA;AAAD,KAAH,GAAiB;AAL3B;AAAA;AAAA;AAAA;AAAA,UADF;AASH,CA/DD;;GAAMJ,M;;KAAAA,M;AAiEN,eAAeA,MAAf","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    \r\n    const [creatures,setCreatures] = useState([])\r\n  \r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n    \r\n\r\n   \r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n                demo.forEach((k, i) => {\r\n                  creatures.push(\r\n                    <Node\r\n                      screenRef={screenRef}\r\n                      uid={i}\r\n                      key={`k-${i}`}\r\n                      bounds={{\r\n                        l: screenRef.current.offsetLeft,\r\n                        t: screenRef.current.offsetTop,\r\n                        w: screenRef.current.clientWidth,\r\n                        h: screenRef.current.clientHeight,\r\n                      }}\r\n                    >\r\n                      <span key={i} id={i}></span>\r\n                    </Node>\r\n                  );\r\n                });\r\n                setCreatures([...creatures])\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n      id=\"screen\"\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        {trueRef ? {creatures} : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}