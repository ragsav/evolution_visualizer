{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\node.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport \"./node.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = props => {\n  _s();\n\n  const bounds = props.bounds;\n  const size = 10;\n  const {\n    creatureRef\n  } = useGlobalState();\n  const nodeRef = useRef(null);\n  const [position, setPosition] = useState({\n    x: Math.floor(Math.random() * bounds.w),\n    y: Math.floor(Math.random() * bounds.h)\n  });\n  useEffect(() => {\n    var timeInterval = setInterval(() => {\n      const pos = [1, -1];\n      const skipX = Math.floor(Math.random() * 100);\n      const skipY = Math.floor(Math.random() * 100);\n      const plusMinusX = Math.floor(Math.random() * 2);\n      const plusMinusY = Math.floor(Math.random() * 2);\n      const newPosition = {\n        x: position.x + pos[plusMinusX] * skipX,\n        y: position.y + pos[plusMinusY] * skipY\n      };\n\n      if (newPosition.x > bounds.w + bounds.l) {\n        newPosition.x = bounds.w;\n      }\n\n      if (newPosition.y > bounds.h + bounds.t) {\n        newPosition.y = bounds.h;\n      }\n\n      if (newPosition.x < bounds.l) {\n        newPosition.x = bounds.l;\n      }\n\n      if (newPosition.y < bounds.t) {\n        newPosition.y = bounds.t;\n      }\n\n      setPosition({ ...newPosition\n      });\n    }, 500);\n    return () => {\n      clearInterval(timeInterval);\n    };\n  }, [position]);\n  useEffect(() => {\n    if (nodeRef && nodeRef.current) {}\n  }, [nodeRef]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    ref: nodeRef,\n    style: {\n      backgroundColor: \"#34FF3B\",\n      height: size,\n      width: size,\n      top: position.y,\n      left: position.x,\n      position: \"absolute\",\n      borderRadius: size / 2,\n      border: \"none\",\n      transition: \"all 1s ease-in-out\"\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Node, \"Epfm/N1hBwnsBcOj4bMD26N84yA=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/node.js"],"names":["useEffect","useState","useRef","Card","useGlobalActions","useGlobalState","Node","props","bounds","size","creatureRef","nodeRef","position","setPosition","x","Math","floor","random","w","y","h","timeInterval","setInterval","pos","skipX","skipY","plusMinusX","plusMinusY","newPosition","l","t","clearInterval","current","backgroundColor","height","width","top","left","borderRadius","border","transition","children"],"mappings":"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","sourcesContent":["import { useEffect, useState ,useRef} from \"react\";\r\nimport {Card} from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport \"./node.css\";\r\nconst Node = (props)=>{\r\n\r\n    const bounds = props.bounds;\r\n    const size = 10;\r\n    const {creatureRef} = useGlobalState();\r\n    \r\n    const nodeRef = useRef(null);\r\n    const [position, setPosition] = useState({\r\n      x: Math.floor(Math.random() * bounds.w),\r\n      y: Math.floor(Math.random() * bounds.h),\r\n    });\r\n\r\n    \r\n    useEffect(()=>{\r\n        var timeInterval = setInterval(()=>{\r\n            const pos = [1,-1]\r\n            const skipX = Math.floor(Math.random()*100);\r\n            const skipY = Math.floor(Math.random() * 100);\r\n\r\n            const plusMinusX = Math.floor(Math.random()*2);\r\n            const plusMinusY = Math.floor(Math.random() * 2);\r\n\r\n            const newPosition = {\r\n              x: position.x + pos[plusMinusX] * skipX,\r\n              y: position.y + pos[plusMinusY] * skipY,\r\n            };\r\n            if(newPosition.x > bounds.w + bounds.l){\r\n                newPosition.x = bounds.w;\r\n            }\r\n            if (newPosition.y > bounds.h + bounds.t) {\r\n              newPosition.y = bounds.h;\r\n            }\r\n            if (newPosition.x < bounds.l) {\r\n              newPosition.x = bounds.l;\r\n            }\r\n            if (newPosition.y< bounds.t) {\r\n              newPosition.y = bounds.t;\r\n            }\r\n            setPosition({...newPosition});\r\n\r\n        },500);\r\n        return ()=>{\r\n            clearInterval(timeInterval);\r\n        }\r\n        \r\n    },[position])\r\n\r\n    useEffect(()=>{\r\n        if(nodeRef&&nodeRef.current){\r\n            \r\n        }\r\n    },[nodeRef])\r\n    return (\r\n      <Card\r\n        ref={nodeRef}\r\n        style={{\r\n          backgroundColor: \"#34FF3B\",\r\n          height: size,\r\n          width: size,\r\n          top: position.y,\r\n          left: position.x,\r\n          position: \"absolute\",\r\n          borderRadius: size / 2,\r\n          border: \"none\",\r\n          transition: \"all 1s ease-in-out\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </Card>\r\n    );\r\n}\r\n\r\nexport default Node;"]},"metadata":{},"sourceType":"module"}