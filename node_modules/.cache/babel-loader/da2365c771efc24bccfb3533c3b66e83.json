{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\nimport Node from \"./node\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Screen = () => {\n  _s();\n\n  // const {ground} = useGlobalState();\n  const [trueRef, setTrueRef] = useState(null);\n  const screenRef = useRef(null);\n  const {\n    status\n  } = useGlobalState();\n  const {\n    setStatus\n  } = useGlobalActions();\n  const [creatures, setCreatures] = useState([]);\n  useEffect(() => {\n    if (status.localeCompare(\"playing\") === 0) {\n      console.log(creatures.length);\n\n      if (Math.random() > 0.7 / creatures.length * 20) {\n        const l = creatures.length;\n        const index = Math.random() * l;\n        const creaturesTemp = [...creatures];\n        creaturesTemp.splice(index, 1);\n        setCreatures([...creaturesTemp]);\n      }\n    }\n  }, [creatures]);\n\n  function addCreature(c) {\n    creatures.push(c);\n    setCreatures([...creatures]);\n  }\n\n  useEffect(() => {\n    if (screenRef) {\n      if (screenRef.current) {\n        setTrueRef(screenRef.current);\n        demo.forEach((t, i) => {\n          const k = uuidv4();\n          creatures.push( /*#__PURE__*/_jsxDEV(Node, {\n            screenRef: screenRef,\n            uid: k,\n            setCreatures: setCreatures,\n            creatures: creatures,\n            bounds: {\n              l: screenRef.current.offsetLeft,\n              t: screenRef.current.offsetTop,\n              w: screenRef.current.clientWidth,\n              h: screenRef.current.clientHeight\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              id: `${k}+123`\n            }, `${k}+123`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 23\n            }, this)\n          }, k, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this));\n        });\n        setCreatures([...creatures]);\n      }\n    }\n  }, [screenRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"screen\",\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"#1E1E1E\"\n    },\n    ref: screenRef,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        padding: 4,\n        margin: 4,\n        top: 20,\n        left: 20,\n        position: \"absolute\",\n        borderRadius: 0\n      },\n      onClick: e => {\n        e.preventDefault();\n\n        if (status.localeCompare(\"playing\") === 0) {\n          setStatus(\"paused\");\n        } else {\n          setStatus(\"playing\");\n        }\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), trueRef ? creatures : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Screen, \"CGqpMy1lX4GNypH36kDa3N2pk6E=\", false, function () {\n  return [useGlobalState, useGlobalActions];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/screen.js"],"names":["createRef","useEffect","useRef","useState","Card","Button","useGlobalActions","useGlobalState","Node","v4","uuidv4","demo","Array","from","keys","Screen","trueRef","setTrueRef","screenRef","status","setStatus","creatures","setCreatures","localeCompare","console","log","length","Math","random","l","index","creaturesTemp","splice","addCreature","c","push","current","forEach","t","i","k","offsetLeft","offsetTop","w","clientWidth","h","clientHeight","height","width","backgroundColor","padding","margin","top","left","position","borderRadius","e","preventDefault"],"mappings":"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","sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { Card ,Button} from \"react-bootstrap\";\r\nimport { useGlobalActions, useGlobalState } from \"../context/globalContext\";\r\nimport Node from \"./node\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Screen = ()=>{\r\n\r\n    \r\n    // const {ground} = useGlobalState();\r\n    const [trueRef,setTrueRef] = useState(null);\r\n    const screenRef = useRef(null);\r\n    const {status} = useGlobalState();\r\n    const {setStatus} = useGlobalActions();\r\n    const [creatures,setCreatures] = useState([])\r\n  \r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    useEffect(()=>{\r\n        if(status.localeCompare(\"playing\")===0){\r\n            console.log(creatures.length);\r\n            if(Math.random() > (0.7 / creatures.length) * 20){\r\n                const l = creatures.length;\r\n                const index = Math.random() * l;\r\n                const creaturesTemp = [...creatures];\r\n                creaturesTemp.splice(index, 1);\r\n                setCreatures([...creaturesTemp]);\r\n            }\r\n            \r\n        }\r\n        \r\n    },[creatures])\r\n\r\n   function addCreature(c) {\r\n     creatures.push(c);\r\n\r\n     setCreatures([...creatures]);\r\n   }\r\n    \r\n    useEffect(()=>{\r\n        if(screenRef){\r\n            if(screenRef.current){\r\n                setTrueRef(screenRef.current);\r\n                demo.forEach((t, i) => {\r\n                    const k = uuidv4();\r\n                  creatures.push(\r\n                    <Node\r\n                      screenRef={screenRef}\r\n                      uid={k}\r\n                      key={k}\r\n                      setCreatures={setCreatures}\r\n                      creatures={creatures}\r\n                      bounds={{\r\n                        l: screenRef.current.offsetLeft,\r\n                        t: screenRef.current.offsetTop,\r\n                        w: screenRef.current.clientWidth,\r\n                        h: screenRef.current.clientHeight,\r\n                      }}\r\n                    >\r\n                      <span key={`${k}+123`} id={`${k}+123`}></span>\r\n                    </Node>\r\n                  );\r\n                });\r\n                setCreatures([...creatures])\r\n            }\r\n        }\r\n    },[screenRef])\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n      <div\r\n        id=\"screen\"\r\n        style={{ height: \"100%\", width: \"100%\", backgroundColor: \"#1E1E1E\" }}\r\n        ref={screenRef}\r\n      >\r\n        <Button\r\n          style={{\r\n            padding: 4,\r\n            margin: 4,\r\n            top: 20,\r\n            left: 20,\r\n            position: \"absolute\",\r\n            borderRadius:0,\r\n          }}\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            if (status.localeCompare(\"playing\") === 0) {\r\n              setStatus(\"paused\");\r\n            }else{\r\n                setStatus(\"playing\")\r\n            }\r\n          }}\r\n        >\r\n          {status}\r\n        </Button>\r\n        {trueRef ? creatures : null}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Screen;"]},"metadata":{},"sourceType":"module"}