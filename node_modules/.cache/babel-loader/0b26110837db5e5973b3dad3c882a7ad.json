{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\core\\\\earth.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Vector } from \"./vector\";\nimport { useGlobalState, useGlobalActions } from \"../../context/globalContext\";\nimport { Food } from \"./food\";\nimport EarthQuake from \"../calamities/earthQuake\";\nimport Volcano from \"../calamities/volcana\";\nimport Radiation from \"../calamities/radiation\";\nimport WaterBody from \"../resources/waterBody\";\nimport { makeInitialFood, makeInitialPopulation } from \"../gaFunctions/initiators\";\nimport { isPairEqual, randInt } from \"../utils/util\";\nimport { matingPool } from \"../gaFunctions/mating\";\nimport { findFood } from \"../gaFunctions/survival\";\nimport { calamityEffect, handleCalamityEffect, plagueInfectionToNeighbours } from \"../gaFunctions/calamityEffect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction clearCanvas(ctx, canvasRef) {\n  var _canvasRef$current, _canvasRef$current2;\n\n  ctx === null || ctx === void 0 ? void 0 : ctx.clearRect(0, 0, canvasRef === null || canvasRef === void 0 ? void 0 : (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.clientWidth, canvasRef === null || canvasRef === void 0 ? void 0 : (_canvasRef$current2 = canvasRef.current) === null || _canvasRef$current2 === void 0 ? void 0 : _canvasRef$current2.clientHeight);\n}\n\nfunction addRandomNumberOfFood(foods, rate) {\n  if (Math.random() < rate) {\n    const food = new Food(randInt(10, window.innerWidth - 300 - 10), randInt(10, window.innerHeight - 10), foods);\n  }\n}\n\nfunction die(creatures) {\n  for (let i = 0; i < creatures.current.length; i++) {\n    if (creatures.current[i].canDie()) {\n      creatures.current.splice(i, 1);\n    }\n  }\n}\n\nconst Earth = () => {\n  _s();\n\n  const {\n    restarted,\n    calamityType,\n    calamities,\n    resources,\n    resourceType,\n    status,\n    speed,\n    initialPopulation,\n    foodSpawnRate\n  } = useGlobalState();\n  const {\n    setTotalPopulation,\n    setCalamityPosition,\n    setResourcePosition\n  } = useGlobalActions();\n  const [ctx, setCtx] = useState(null);\n  const canvasRef = useRef(null);\n  const foodSpawnRateRef = useRef(foodSpawnRate);\n  const speedRef = useRef(0.5);\n  const statusRef = useRef(status);\n  const calamitiesRef = useRef(calamities);\n  const CREATURES = useRef([]);\n  const FOODS = useRef([]);\n  const data = useRef([]);\n  useEffect(() => {\n    foodSpawnRateRef.current = foodSpawnRate;\n  }, [foodSpawnRate]);\n  useEffect(() => {\n    speedRef.current = speed;\n  }, [speed]);\n  useEffect(() => {\n    calamitiesRef.current = calamities;\n  }, [calamities]);\n  useEffect(() => {\n    if (canvasRef && canvasRef.current) {\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n      canvasRef.current.focus();\n      setCtx(ctx);\n    }\n  }, [canvasRef]);\n  useEffect(() => {\n    if (ctx) {\n      clearCanvas(ctx, canvasRef);\n      makeInitialPopulation(initialPopulation, CREATURES);\n      makeInitialFood(FOODS);\n    }\n  }, [ctx, restarted, initialPopulation]);\n  useEffect(() => {\n    let reqID = null;\n    statusRef.current = status;\n\n    if (status.localeCompare(\"Playing\") === 0) {\n      reqID = requestAnimationFrame(mainLoop);\n    }\n\n    return () => {\n      if (reqID) {\n        cancelAnimationFrame(reqID);\n      }\n    };\n  }, [status]);\n\n  function mainLoop(timestamp) {\n    if (statusRef.current.localeCompare(\"Playing\") === 0) {\n      data.current.push({\n        timestamp,\n        population: CREATURES.current.length,\n        food: FOODS.current.length\n      });\n      clearCanvas(ctx, canvasRef);\n      calamityEffect(CREATURES, calamitiesRef);\n      findFood(CREATURES, FOODS);\n      die(CREATURES);\n      plagueInfectionToNeighbours(CREATURES);\n      matingPool(CREATURES);\n      CREATURES.current.forEach((b, index) => {\n        b.updateCreature(ctx, speedRef.current);\n      });\n      FOODS.current.forEach((f, index) => {\n        f.drawFood(ctx);\n      });\n      addRandomNumberOfFood(FOODS, foodSpawnRateRef.current);\n      setTotalPopulation(CREATURES.current.length);\n      requestAnimationFrame(mainLoop);\n    }\n\n    return;\n  }\n\n  function handleCanvasClick(e) {\n    const mouse = new Vector(e.clientX - 300, e.clientY);\n    handleCalamityEffect(CREATURES, calamities, calamityType, mouse, setCalamityPosition);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [resources ? resources.map(resource => {\n      if (resource.type.localeCompare(\"waterBody\") === 0) {\n        return /*#__PURE__*/_jsxDEV(WaterBody, {\n          uid: resource.id,\n          size: resource.size,\n          position: resource.position\n        }, `${resource.id}+resource`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }, this);\n      }\n    }) : null, calamities ? calamities.map(calamity => {\n      if (calamity.type.localeCompare(\"earthQuake\") === 0) {\n        return /*#__PURE__*/_jsxDEV(EarthQuake, {\n          size: calamity.size,\n          amplitude: calamity.amplitude,\n          duration: calamity.duration,\n          position: calamity.position\n        }, `${calamity.id}+calamity`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }, this);\n      } else if (calamity.type.localeCompare(\"volcano\") === 0) {\n        return /*#__PURE__*/_jsxDEV(Volcano, {\n          size: calamity.size,\n          amplitude: calamity.amplitude,\n          duration: calamity.duration,\n          position: calamity.position\n        }, `${calamity.id}+calamity`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }, this);\n      } else if (calamity.type.localeCompare(\"radiation\") === 0) {\n        return /*#__PURE__*/_jsxDEV(Radiation, {\n          size: calamity.size,\n          amplitude: calamity.amplitude,\n          duration: calamity.duration,\n          position: calamity.position\n        }, `${calamity.id}+calamity`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }, this);\n      }\n    }) : null, /*#__PURE__*/_jsxDEV(\"canvas\", {\n      onClick: handleCanvasClick,\n      tabIndex: 1,\n      id: \"canvas\",\n      ref: canvasRef,\n      width: window.innerWidth - 300,\n      height: window.innerHeight,\n      style: {\n        backgroundColor: \"#222222\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Earth, \"4Al1PQTqiMe+P4rVrypsH+AzulI=\", false, function () {\n  return [useGlobalState, useGlobalActions];\n});\n\n_c = Earth;\nexport default Earth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Earth\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/core/earth.js"],"names":["useEffect","useRef","useState","Vector","useGlobalState","useGlobalActions","Food","EarthQuake","Volcano","Radiation","WaterBody","makeInitialFood","makeInitialPopulation","isPairEqual","randInt","matingPool","findFood","calamityEffect","handleCalamityEffect","plagueInfectionToNeighbours","clearCanvas","ctx","canvasRef","clearRect","current","clientWidth","clientHeight","addRandomNumberOfFood","foods","rate","Math","random","food","window","innerWidth","innerHeight","die","creatures","i","length","canDie","splice","Earth","restarted","calamityType","calamities","resources","resourceType","status","speed","initialPopulation","foodSpawnRate","setTotalPopulation","setCalamityPosition","setResourcePosition","setCtx","foodSpawnRateRef","speedRef","statusRef","calamitiesRef","CREATURES","FOODS","data","canvas","document","getElementById","getContext","focus","reqID","localeCompare","requestAnimationFrame","mainLoop","cancelAnimationFrame","timestamp","push","population","forEach","b","index","updateCreature","f","drawFood","handleCanvasClick","e","mouse","clientX","clientY","map","resource","type","id","size","position","calamity","amplitude","duration","backgroundColor"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { Vector } from \"./vector\";\r\nimport { useGlobalState, useGlobalActions } from \"../../context/globalContext\";\r\nimport { Food } from \"./food\";\r\nimport EarthQuake from \"../calamities/earthQuake\";\r\nimport Volcano from \"../calamities/volcana\";\r\nimport Radiation from \"../calamities/radiation\";\r\nimport WaterBody from \"../resources/waterBody\";\r\nimport {\r\n  makeInitialFood,\r\n  makeInitialPopulation,\r\n} from \"../gaFunctions/initiators\";\r\nimport { isPairEqual, randInt } from \"../utils/util\";\r\nimport { matingPool } from \"../gaFunctions/mating\";\r\nimport { findFood } from \"../gaFunctions/survival\";\r\nimport {\r\n  calamityEffect,\r\n  handleCalamityEffect,\r\n  plagueInfectionToNeighbours,\r\n} from \"../gaFunctions/calamityEffect\";\r\n\r\nfunction clearCanvas(ctx, canvasRef) {\r\n  ctx?.clearRect(\r\n    0,\r\n    0,\r\n    canvasRef?.current?.clientWidth,\r\n    canvasRef?.current?.clientHeight\r\n  );\r\n}\r\n\r\nfunction addRandomNumberOfFood(foods, rate) {\r\n  if (Math.random() < rate) {\r\n    const food = new Food(\r\n      randInt(10, window.innerWidth - 300 - 10),\r\n      randInt(10, window.innerHeight - 10),\r\n      foods\r\n    );\r\n  }\r\n}\r\n\r\nfunction die(creatures) {\r\n  for (let i = 0; i < creatures.current.length; i++) {\r\n    if (creatures.current[i].canDie()) {\r\n      creatures.current.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n\r\nconst Earth = () => {\r\n  const {\r\n    restarted,\r\n    calamityType,\r\n    calamities,\r\n    resources,\r\n    resourceType,\r\n    status,\r\n    speed,\r\n    initialPopulation,\r\n    foodSpawnRate,\r\n  } = useGlobalState();\r\n\r\n  const {\r\n    setTotalPopulation,\r\n    setCalamityPosition,\r\n    setResourcePosition,\r\n  } = useGlobalActions();\r\n\r\n  const [ctx, setCtx] = useState(null);\r\n\r\n  const canvasRef = useRef(null);\r\n  const foodSpawnRateRef = useRef(foodSpawnRate);\r\n  const speedRef = useRef(0.5);\r\n  const statusRef = useRef(status);\r\n  const calamitiesRef = useRef(calamities);\r\n  const CREATURES = useRef([]);\r\n  const FOODS = useRef([]);\r\n  const data = useRef([]);\r\n\r\n  useEffect(() => {\r\n    foodSpawnRateRef.current = foodSpawnRate;\r\n  }, [foodSpawnRate]);\r\n  useEffect(() => {\r\n    speedRef.current = speed;\r\n  }, [speed]);\r\n\r\n  useEffect(() => {\r\n    calamitiesRef.current = calamities;\r\n  }, [calamities]);\r\n\r\n  useEffect(() => {\r\n    if (canvasRef && canvasRef.current) {\r\n      const canvas = document.getElementById(\"canvas\");\r\n      const ctx = canvas.getContext(\"2d\");\r\n      canvasRef.current.focus();\r\n      setCtx(ctx);\r\n    }\r\n  }, [canvasRef]);\r\n\r\n  useEffect(() => {\r\n    if (ctx) {\r\n      clearCanvas(ctx, canvasRef);\r\n      makeInitialPopulation(initialPopulation, CREATURES);\r\n      makeInitialFood(FOODS);\r\n    }\r\n  }, [ctx, restarted, initialPopulation]);\r\n\r\n  useEffect(() => {\r\n    let reqID = null;\r\n    statusRef.current = status;\r\n    if (status.localeCompare(\"Playing\") === 0) {\r\n      reqID = requestAnimationFrame(mainLoop);\r\n    }\r\n    return () => {\r\n      if (reqID) {\r\n        cancelAnimationFrame(reqID);\r\n      }\r\n    };\r\n  }, [status]);\r\n\r\n  function mainLoop(timestamp) {\r\n    if (statusRef.current.localeCompare(\"Playing\") === 0) {\r\n      data.current.push({\r\n        timestamp,\r\n        population: CREATURES.current.length,\r\n        food: FOODS.current.length,\r\n      });\r\n      clearCanvas(ctx, canvasRef);\r\n      calamityEffect(CREATURES, calamitiesRef);\r\n      findFood(CREATURES, FOODS);\r\n      die(CREATURES);\r\n      plagueInfectionToNeighbours(CREATURES);\r\n      matingPool(CREATURES);\r\n      CREATURES.current.forEach((b, index) => {\r\n        b.updateCreature(ctx, speedRef.current);\r\n      });\r\n      FOODS.current.forEach((f, index) => {\r\n        f.drawFood(ctx);\r\n      });\r\n      addRandomNumberOfFood(FOODS, foodSpawnRateRef.current);\r\n      setTotalPopulation(CREATURES.current.length);\r\n      requestAnimationFrame(mainLoop);\r\n    }\r\n    return;\r\n  }\r\n\r\n  function handleCanvasClick(e) {\r\n    const mouse = new Vector(e.clientX - 300, e.clientY);\r\n    handleCalamityEffect(\r\n      CREATURES,\r\n      calamities,\r\n      calamityType,\r\n      mouse,\r\n      setCalamityPosition\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      {resources\r\n        ? resources.map((resource) => {\r\n            if (resource.type.localeCompare(\"waterBody\") === 0) {\r\n              return (\r\n                <WaterBody\r\n                  key={`${resource.id}+resource`}\r\n                  uid={resource.id}\r\n                  size={resource.size}\r\n                  position={resource.position}\r\n                ></WaterBody>\r\n              );\r\n            }\r\n          })\r\n        : null}\r\n      {calamities\r\n        ? calamities.map((calamity) => {\r\n            if (calamity.type.localeCompare(\"earthQuake\") === 0) {\r\n              return (\r\n                <EarthQuake\r\n                  key={`${calamity.id}+calamity`}\r\n                  size={calamity.size}\r\n                  amplitude={calamity.amplitude}\r\n                  duration={calamity.duration}\r\n                  position={calamity.position}\r\n                />\r\n              );\r\n            } else if (calamity.type.localeCompare(\"volcano\") === 0) {\r\n              return (\r\n                <Volcano\r\n                  key={`${calamity.id}+calamity`}\r\n                  size={calamity.size}\r\n                  amplitude={calamity.amplitude}\r\n                  duration={calamity.duration}\r\n                  position={calamity.position}\r\n                />\r\n              );\r\n            } else if (calamity.type.localeCompare(\"radiation\") === 0) {\r\n              return (\r\n                <Radiation\r\n                  key={`${calamity.id}+calamity`}\r\n                  size={calamity.size}\r\n                  amplitude={calamity.amplitude}\r\n                  duration={calamity.duration}\r\n                  position={calamity.position}\r\n                />\r\n              );\r\n            }\r\n          })\r\n        : null}\r\n      <canvas\r\n        onClick={handleCanvasClick}\r\n        tabIndex={1}\r\n        id=\"canvas\"\r\n        ref={canvasRef}\r\n        width={window.innerWidth - 300}\r\n        height={window.innerHeight}\r\n        style={{ backgroundColor: \"#222222\" }}\r\n      ></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n"]},"metadata":{},"sourceType":"module"}