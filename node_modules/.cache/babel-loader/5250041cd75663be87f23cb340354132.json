{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\genetic algorithm\\\\src\\\\components\\\\experiments\\\\screen.js\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst demo = Array.from(Array(20).keys());\n\nconst Earth = () => {\n  _s();\n\n  const [creatures, setCreatures] = useState([]);\n  const [earthDimensions, setEarthDimensions] = useState({});\n  const earthRef = /*#__PURE__*/createRef();\n  useEffect(() => {\n    if (earthRef && earthRef.current) {\n      setEarthDimensions({\n        top: earthRef.current.offsetTop,\n        left: earthRef.current.offsetLeft,\n        w: earthRef.current.offsetWidth,\n        h: earthRef.current.offsetHeight\n      });\n    }\n  }, [earthRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: earthRef,\n    style: {\n      backgroundColor: \"#2C931D\",\n      height: \"100%\",\n      width: \"100%\"\n    },\n    children: earthRef ? demo.map(() => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          borderRadius: 5,\n          height: 10,\n          width: 10,\n          backgroundColor: \"#111111\",\n          position: \"absolute\",\n          top: Math.floor(Math.random() * earthDimensions.h + earthDimensions.top),\n          left: Math.floor(Math.random() * earthDimensions.w + earthDimensions.left)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Earth, \"rpwa8B1qMRnVwGGn2BBSpiB1K3g=\");\n\n_c = Earth;\nexport default Earth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Earth\");","map":{"version":3,"sources":["E:/projects/Fun/genetic algorithm/src/components/experiments/screen.js"],"names":["createRef","useEffect","useState","demo","Array","from","keys","Earth","creatures","setCreatures","earthDimensions","setEarthDimensions","earthRef","current","top","offsetTop","left","offsetLeft","w","offsetWidth","h","offsetHeight","backgroundColor","height","width","map","borderRadius","position","Math","floor","random"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;;AAEA,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAL,CAAUE,IAAV,EAAX,CAAb;;AACA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAMU,QAAQ,gBAAGZ,SAAS,EAA1B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,QAAQ,IAAIA,QAAQ,CAACC,OAAzB,EAAkC;AAChCF,MAAAA,kBAAkB,CAAC;AACjBG,QAAAA,GAAG,EAAEF,QAAQ,CAACC,OAAT,CAAiBE,SADL;AAEjBC,QAAAA,IAAI,EAAEJ,QAAQ,CAACC,OAAT,CAAiBI,UAFN;AAGjBC,QAAAA,CAAC,EAAEN,QAAQ,CAACC,OAAT,CAAiBM,WAHH;AAIjBC,QAAAA,CAAC,EAAER,QAAQ,CAACC,OAAT,CAAiBQ;AAJH,OAAD,CAAlB;AAMD;AACF,GATQ,EASN,CAACT,QAAD,CATM,CAAT;AAUA,sBACE;AACE,IAAA,GAAG,EAAEA,QADP;AAEE,IAAA,KAAK,EAAE;AAAEU,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE,MAAtC;AAA8CC,MAAAA,KAAK,EAAE;AAArD,KAFT;AAAA,cAIGZ,QAAQ,GACLT,IAAI,CAACsB,GAAL,CAAS,MAAM;AACb,0BACE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,YAAY,EAAE,CADT;AAELH,UAAAA,MAAM,EAAE,EAFH;AAGLC,UAAAA,KAAK,EAAE,EAHF;AAILF,UAAAA,eAAe,EAAE,SAJZ;AAKLK,UAAAA,QAAQ,EAAE,UALL;AAMLb,UAAAA,GAAG,EAAEc,IAAI,CAACC,KAAL,CACHD,IAAI,CAACE,MAAL,KAAgBpB,eAAe,CAACU,CAAhC,GAAoCV,eAAe,CAACI,GADjD,CANA;AASLE,UAAAA,IAAI,EAAEY,IAAI,CAACC,KAAL,CACJD,IAAI,CAACE,MAAL,KAAgBpB,eAAe,CAACQ,CAAhC,GAAoCR,eAAe,CAACM,IADhD;AATD;AADT;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD,KAlBD,CADK,GAoBL;AAxBN;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA3CD;;GAAMT,K;;KAAAA,K;AA6CN,eAAeA,KAAf","sourcesContent":["import { createRef, useEffect, useState } from \"react\";\r\n\r\nconst demo = Array.from(Array(20).keys());\r\nconst Earth = () => {\r\n  const [creatures, setCreatures] = useState([]);\r\n  const [earthDimensions, setEarthDimensions] = useState({});\r\n  const earthRef = createRef();\r\n\r\n  useEffect(() => {\r\n    if (earthRef && earthRef.current) {\r\n      setEarthDimensions({\r\n        top: earthRef.current.offsetTop,\r\n        left: earthRef.current.offsetLeft,\r\n        w: earthRef.current.offsetWidth,\r\n        h: earthRef.current.offsetHeight,\r\n      });\r\n    }\r\n  }, [earthRef]);\r\n  return (\r\n    <div\r\n      ref={earthRef}\r\n      style={{ backgroundColor: \"#2C931D\", height: \"100%\", width: \"100%\" }}\r\n    >\r\n      {earthRef\r\n        ? demo.map(() => {\r\n            return (\r\n              <div\r\n                style={{\r\n                  borderRadius: 5,\r\n                  height: 10,\r\n                  width: 10,\r\n                  backgroundColor: \"#111111\",\r\n                  position: \"absolute\",\r\n                  top: Math.floor(\r\n                    Math.random() * earthDimensions.h + earthDimensions.top\r\n                  ),\r\n                  left: Math.floor(\r\n                    Math.random() * earthDimensions.w + earthDimensions.left\r\n                  ),\r\n                }}\r\n              ></div>\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n"]},"metadata":{},"sourceType":"module"}