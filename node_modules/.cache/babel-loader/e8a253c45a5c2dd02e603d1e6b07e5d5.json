{"ast":null,"code":"import _slicedToArray from\"E:/projects/Fun/naruto/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useEffect,useState}from\"react\";import Tree from\"react-d3-tree\";import\"./home.css\";// This is a simplified example of an org chart with a depth of 2.\n// Note how deeper levels are defined recursively via the `children` property.\nimport treeData from\"./data/tree\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function OrgChartTree(){var treeRef=useRef(null);var _useState=useState({x:0,y:0}),_useState2=_slicedToArray(_useState,2),translation=_useState2[0],setTranslation=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),depth=_useState4[0],setDepth=_useState4[1];var _useState5=useState({min:0.1,max:0.5}),_useState6=_slicedToArray(_useState5,2),scaleExtent=_useState6[0],setScaleExtent=_useState6[1];useEffect(function(){// console.log(treeRef);\nsetTranslation({y:Math.floor(treeRef.current.clientHeight/2),x:Math.floor(treeRef.current.clientWidth/2)});},[treeRef]);useEffect(function(){console.log(depth);if(depth>0){var temp_y=translation.y;temp_y=Math.floor(temp_y-temp_y/7);setTranslation({x:translation.x,y:temp_y});var temp_max=scaleExtent.max;temp_max=temp_max-0.08;setScaleExtent({min:scaleExtent.min,max:temp_max});}},[depth]);return/*#__PURE__*/ (// `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n_jsx(\"div\",{id:\"treeWrapper\",ref:treeRef,style:{width:\"100%\",height:\"100%\",backgroundColor:\"black\",top:\"50%\",left:\"50%\"},children:/*#__PURE__*/_jsx(Tree,{data:treeData,enableLegacyTransitions:true,orientation:\"vertical\",transitionDuration:500,rootNodeClassName:\"node__root\",branchNodeClassName:\"node__branch\",leafNodeClassName:\"node__leaf\"// initialDepth={0}\n,translate:translation,collapsible:false,zoomable:true,zoom:3,scaleExtent:scaleExtent,separation:{siblings:2,nonSiblings:2},shouldCollapseNeighborNodes:false,onNodeClick:function onNodeClick(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}console.log(args);if(args[0].__rd3t.depth>depth)setDepth(args[0].__rd3t.depth);}})}));}","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","useRef","useEffect","useState","Tree","treeData","OrgChartTree","treeRef","x","y","translation","setTranslation","depth","setDepth","min","max","scaleExtent","setScaleExtent","Math","floor","current","clientHeight","clientWidth","console","log","temp_y","temp_max","width","height","backgroundColor","top","left","siblings","nonSiblings","args","__rd3t"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport \"./home.css\";\r\n// This is a simplified example of an org chart with a depth of 2.\r\n// Note how deeper levels are defined recursively via the `children` property.\r\nimport treeData from \"./data/tree\";\r\n\r\nexport default function OrgChartTree() {\r\n  const treeRef = useRef(null);\r\n  const [translation, setTranslation] = useState({ x: 0, y: 0 });\r\n  const [depth, setDepth] = useState(0);\r\n  const [scaleExtent, setScaleExtent] = useState({ min: 0.1, max: 0.5 });\r\n  useEffect(() => {\r\n    // console.log(treeRef);\r\n    setTranslation({\r\n      y: Math.floor(treeRef.current.clientHeight / 2),\r\n      x: Math.floor(treeRef.current.clientWidth / 2),\r\n    });\r\n  }, [treeRef]);\r\n\r\n  useEffect(() => {\r\n    console.log(depth);\r\n    if (depth > 0) {\r\n      var temp_y = translation.y;\r\n      temp_y = Math.floor(temp_y - temp_y / 7);\r\n      setTranslation({ x: translation.x, y: temp_y });\r\n\r\n      var temp_max = scaleExtent.max;\r\n      temp_max = temp_max - 0.08;\r\n      setScaleExtent({ min: scaleExtent.min, max: temp_max });\r\n    }\r\n  }, [depth]);\r\n  return (\r\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n    <div\r\n      id=\"treeWrapper\"\r\n      ref={treeRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        backgroundColor: \"black\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n      }}\r\n    >\r\n      <Tree\r\n        data={treeData}\r\n        enableLegacyTransitions={true}\r\n        orientation=\"vertical\"\r\n        transitionDuration={500}\r\n        rootNodeClassName=\"node__root\"\r\n        branchNodeClassName=\"node__branch\"\r\n        leafNodeClassName=\"node__leaf\"\r\n        // initialDepth={0}\r\n        translate={translation}\r\n        collapsible={false}\r\n        zoomable={true}\r\n        zoom={3}\r\n        scaleExtent={scaleExtent}\r\n        separation={{ siblings: 2, nonSiblings: 2 }}\r\n        shouldCollapseNeighborNodes={false}\r\n        onNodeClick={(...args) => {\r\n          console.log(args);\r\n          if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}