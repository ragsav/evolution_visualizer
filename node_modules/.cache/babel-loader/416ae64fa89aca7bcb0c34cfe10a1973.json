{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\naruto\\\\src\\\\components\\\\home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport \"./home.css\";\nimport ReactTooltip from \"react-tooltip\"; // This is a simplified example of an org chart with a depth of 2.\n// Note how deeper levels are defined recursively via the `children` property.\n\nimport treeData from \"./data/tree\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OrgChartTree() {\n  _s();\n\n  const treeRef = useRef(null);\n  const [translation, setTranslation] = useState({\n    x: 0,\n    y: 0\n  });\n  const [depth, setDepth] = useState(0);\n  const [scaleExtent, setScaleExtent] = useState({\n    min: 0.1,\n    max: 1\n  });\n  const [tooltip, setTooltip] = useState({});\n  const [isToolTipVis, setIsToolTipVis] = useState(false);\n  useEffect(() => {\n    // console.log(treeRef);\n    setTranslation({\n      y: Math.floor(treeRef.current.clientHeight / 2),\n      x: Math.floor(treeRef.current.clientWidth / 2)\n    });\n  }, [treeRef]);\n  useEffect(() => {\n    console.log(depth);\n\n    if (depth > 0) {\n      var temp_y = translation.y;\n      temp_y = Math.floor(temp_y - temp_y / 7);\n      setTranslation({\n        x: translation.x,\n        y: temp_y\n      });\n      var temp_max = scaleExtent.max;\n      temp_max = temp_max - 0.08;\n      setScaleExtent({\n        min: scaleExtent.min,\n        max: temp_max\n      });\n    }\n  }, [depth]);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(Container, {\n      id: \"treeWrapper\",\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"black\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          padding: 0,\n          margin: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            height: \"100%\",\n            width: \"50%\",\n            padding: 0,\n            margin: 0,\n            backgroundColor: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            height: \"100%\",\n            width: \"50%\",\n            padding: 0,\n            margin: 0\n          },\n          ref: treeRef,\n          children: /*#__PURE__*/_jsxDEV(Tree, {\n            data: treeData,\n            enableLegacyTransitions: true,\n            orientation: \"vertical\",\n            transitionDuration: 500,\n            rootNodeClassName: \"node__root\",\n            branchNodeClassName: \"node__branch\",\n            leafNodeClassName: \"node__leaf\",\n            initialDepth: 0,\n            translate: translation,\n            collapsible: true,\n            zoomable: true,\n            zoom: 3,\n            scaleExtent: scaleExtent,\n            separation: {\n              siblings: 1,\n              nonSiblings: 1\n            },\n            shouldCollapseNeighborNodes: false,\n            onNodeClick: (...args) => {\n              console.log(args);\n              if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\n            },\n            onNodeClick: (...args) => {\n              console.log(\"onNodeMouseOver\", args);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(OrgChartTree, \"WeY4MX2eYQ5f6+qysN2AGsGLIMc=\");\n\n_c = OrgChartTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrgChartTree\");","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","useRef","useEffect","useState","Tree","ReactTooltip","treeData","Col","Container","Row","OrgChartTree","treeRef","translation","setTranslation","x","y","depth","setDepth","scaleExtent","setScaleExtent","min","max","tooltip","setTooltip","isToolTipVis","setIsToolTipVis","Math","floor","current","clientHeight","clientWidth","console","log","temp_y","temp_max","width","height","backgroundColor","padding","margin","siblings","nonSiblings","args","__rd3t"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport \"./home.css\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n// This is a simplified example of an org chart with a depth of 2.\r\n// Note how deeper levels are defined recursively via the `children` property.\r\nimport treeData from \"./data/tree\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\nexport default function OrgChartTree() {\r\n  const treeRef = useRef(null);\r\n  const [translation, setTranslation] = useState({ x: 0, y: 0 });\r\n  const [depth, setDepth] = useState(0);\r\n  const [scaleExtent, setScaleExtent] = useState({ min: 0.1, max: 1 });\r\n  const [tooltip, setTooltip] = useState({});\r\n  const [isToolTipVis, setIsToolTipVis] = useState(false);\r\n  useEffect(() => {\r\n    // console.log(treeRef);\r\n    setTranslation({\r\n      y: Math.floor(treeRef.current.clientHeight / 2),\r\n      x: Math.floor(treeRef.current.clientWidth / 2),\r\n    });\r\n  }, [treeRef]);\r\n\r\n  useEffect(() => {\r\n    console.log(depth);\r\n    if (depth > 0) {\r\n      var temp_y = translation.y;\r\n      temp_y = Math.floor(temp_y - temp_y / 7);\r\n      setTranslation({ x: translation.x, y: temp_y });\r\n\r\n      var temp_max = scaleExtent.max;\r\n      temp_max = temp_max - 0.08;\r\n      setScaleExtent({ min: scaleExtent.min, max: temp_max });\r\n    }\r\n  }, [depth]);\r\n  return (\r\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n    <Container\r\n      id=\"treeWrapper\"\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        backgroundColor: \"black\",\r\n      }}\r\n    >\r\n      <Row style={{ width: \"100%\", height: \"100%\", padding: 0, margin: 0 }}>\r\n        <Col\r\n          style={{\r\n            height: \"100%\",\r\n            width: \"50%\",\r\n            padding: 0,\r\n            margin: 0,\r\n            backgroundColor: \"white\",\r\n          }}\r\n        ></Col>\r\n        <Col\r\n          style={{ height: \"100%\", width: \"50%\", padding: 0, margin: 0 }}\r\n          ref={treeRef}\r\n        >\r\n          <Tree\r\n            data={treeData}\r\n            enableLegacyTransitions={true}\r\n            orientation=\"vertical\"\r\n            transitionDuration={500}\r\n            rootNodeClassName=\"node__root\"\r\n            branchNodeClassName=\"node__branch\"\r\n            leafNodeClassName=\"node__leaf\"\r\n            initialDepth={0}\r\n            translate={translation}\r\n            collapsible={true}\r\n            zoomable={true}\r\n            zoom={3}\r\n            scaleExtent={scaleExtent}\r\n            separation={{ siblings: 1, nonSiblings: 1 }}\r\n            shouldCollapseNeighborNodes={false}\r\n            onNodeClick={(...args) => {\r\n              console.log(args);\r\n              if (args[0].__rd3t.depth > depth) setDepth(args[0].__rd3t.depth);\r\n            }}\r\n            onNodeClick={(...args) => {\r\n              console.log(\"onNodeMouseOver\", args);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}