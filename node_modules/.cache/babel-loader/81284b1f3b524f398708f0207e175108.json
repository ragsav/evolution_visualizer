{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\Fun\\\\naruto\\\\src\\\\components\\\\home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport \"./home.css\"; // This is a simplified example of an org chart with a depth of 2.\n// Note how deeper levels are defined recursively via the `children` property.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst orgChart = {\n  name: \"CEO\",\n  children: [{\n    name: \"Manager\",\n    attributes: {\n      department: \"Production\"\n    },\n    children: [{\n      name: \"Foreman\",\n      attributes: {\n        department: \"Fabrication\"\n      },\n      children: [{\n        name: \"Worker\"\n      }]\n    }, {\n      name: \"Foreman\",\n      attributes: {\n        department: \"Assembly\"\n      },\n      children: [{\n        name: \"Worker\"\n      }]\n    }]\n  }]\n};\nexport default function OrgChartTree() {\n  _s();\n\n  var _treeRef$current, _treeRef$current2;\n\n  const treeRef = useRef(null);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(\"div\", {\n      id: \"treeWrapper\",\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"white\",\n        top: \"50%\",\n        left: \"50%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        ref: treeRef,\n        data: orgChart,\n        enableLegacyTransitions: true,\n        orientation: \"vertical\",\n        transitionDuration: 500 // rootNodeClassName=\"node__root\"\n        // branchNodeClassName=\"node__branch\"\n        // leafNodeClassName=\"node__leaf\"\n        ,\n        initialDepth: 0,\n        translate: {\n          x: 200,\n          y: 300\n        },\n        collapsible: true,\n        zoomable: true,\n        zoom: 1,\n        scaleExtent: {\n          min: 0.1,\n          max: 1\n        },\n        nodeSize: {\n          x: Math.floor((treeRef === null || treeRef === void 0 ? void 0 : (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.clientHeight) / 2),\n          y: Math.floor((treeRef === null || treeRef === void 0 ? void 0 : (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.clientWidth) / 2)\n        },\n        separation: {\n          siblings: 2,\n          nonSiblings: 2\n        },\n        styles: {\n          nodes: {\n            node: {\n              circle: {\n                fill: \"#E2A452\"\n              },\n              attributes: {\n                stroke: \"#000\"\n              }\n            },\n            leafNode: {\n              circle: {\n                fill: \"transparent\"\n              },\n              attributes: {\n                stroke: \"#000\"\n              }\n            }\n          }\n        },\n        shouldCollapseNeighborNodes: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(OrgChartTree, \"HHGHCTtmiWvbFMbJlM9n+Rju3RY=\");\n\n_c = OrgChartTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrgChartTree\");","map":{"version":3,"sources":["E:/projects/Fun/naruto/src/components/home.js"],"names":["React","useRef","Tree","orgChart","name","children","attributes","department","OrgChartTree","treeRef","width","height","backgroundColor","top","left","x","y","min","max","Math","floor","current","clientHeight","clientWidth","siblings","nonSiblings","nodes","node","circle","fill","stroke","leafNode"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport \"./home.css\";\r\n// This is a simplified example of an org chart with a depth of 2.\r\n// Note how deeper levels are defined recursively via the `children` property.\r\nconst orgChart = {\r\n  name: \"CEO\",\r\n  children: [\r\n    {\r\n      name: \"Manager\",\r\n      attributes: {\r\n        department: \"Production\",\r\n      },\r\n      children: [\r\n        {\r\n          name: \"Foreman\",\r\n          attributes: {\r\n            department: \"Fabrication\",\r\n          },\r\n          children: [\r\n            {\r\n              name: \"Worker\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          name: \"Foreman\",\r\n          attributes: {\r\n            department: \"Assembly\",\r\n          },\r\n          children: [\r\n            {\r\n              name: \"Worker\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default function OrgChartTree() {\r\n  const treeRef = useRef(null);\r\n  return (\r\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n    <div\r\n      id=\"treeWrapper\"\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        backgroundColor: \"white\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n      }}\r\n    >\r\n      <Tree\r\n        ref={treeRef}\r\n        data={orgChart}\r\n        enableLegacyTransitions={true}\r\n        orientation=\"vertical\"\r\n        transitionDuration={500}\r\n        // rootNodeClassName=\"node__root\"\r\n        // branchNodeClassName=\"node__branch\"\r\n        // leafNodeClassName=\"node__leaf\"\r\n        initialDepth={0}\r\n        translate={{ x: 200, y: 300 }}\r\n        collapsible={true}\r\n        zoomable={true}\r\n        zoom={1}\r\n        scaleExtent={{ min: 0.1, max: 1 }}\r\n        nodeSize={{\r\n          x: Math.floor(treeRef?.current?.clientHeight / 2),\r\n          y: Math.floor(treeRef?.current?.clientWidth / 2),\r\n        }}\r\n        separation={{ siblings: 2, nonSiblings: 2 }}\r\n        styles={{\r\n          nodes: {\r\n            node: {\r\n              circle: {\r\n                fill: \"#E2A452\",\r\n              },\r\n              attributes: {\r\n                stroke: \"#000\",\r\n              },\r\n            },\r\n            leafNode: {\r\n              circle: {\r\n                fill: \"transparent\",\r\n              },\r\n              attributes: {\r\n                stroke: \"#000\",\r\n              },\r\n            },\r\n          },\r\n        }}\r\n        shouldCollapseNeighborNodes={false}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}